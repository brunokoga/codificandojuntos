1
00:00:00,012 --> 00:00:09,814
Legendas em português por
Bruno Koga - koga@centraldosapps.com

2
00:00:09,814 --> 00:00:18,212
Bem vindos a aula 15 de CS193P, inverno de 2013.
E hoje nós vamos falar sobre

3
00:00:18,212 --> 00:00:25,481
encontrar o device, o device aonde
você está rodando, no mundo físico.

4
00:00:25,481 --> 00:00:28,367
Ok? Então existem
duas partes sobre isso no iOS,

5
00:00:28,367 --> 00:00:33,392
tem o Core Location, que é esse
framework não-UI para encontrar

6
00:00:33,392 --> 00:00:38,417
onde o seu device está e existe o
MapKit, que contém uma UIView,

7
00:00:38,417 --> 00:00:43,479
um MapView que deixa você ver
essa localização ou ver várias localizações

8
00:00:43,480 --> 00:00:46,446
graficamente.
Então são duas partes aqui.

9
00:00:46,446 --> 00:00:51,215
Eu vou tentar passar por esses slides
rapidamente porque a demo vale mais

10
00:00:51,215 --> 00:00:55,838
do que mil palavras, então eu vou
fazer uma demo de MapKit e tudo vai

11
00:00:55,838 --> 00:00:59,686
ficar mais claro sobre como
você faz essas coisas funcionarem.

12
00:00:59,686 --> 00:01:04,344
Seu homework é para quinta, como vocês sabem
e espero que vocês todos já tenham começado

13
00:01:04,344 --> 00:01:08,696
no projeto final, pelo menos
pensando como vocÊ vai abordá-lo,

14
00:01:08,696 --> 00:01:12,319
se não já estiver escrevendo código.
E na sexta, nós vamos ter essa

15
00:01:12,319 --> 00:01:16,807
Friday section essa semana,
é sobre Instruments, que é esse

16
00:01:16,807 --> 00:01:21,567
programa adjunto ao Xcode que te permite
medir a performance da sua aplicação,

17
00:01:21,567 --> 00:01:25,851
tanto seu uso de memória e também
coisas de performance, quanta computação,

18
00:01:25,851 --> 00:01:28,750
quantos ciclos de computação ele está usando
ou algo assim. Ok?

19
00:01:28,750 --> 00:01:33,460
É isso que vamos cobrir.
Então vamos entrar de cara no Core Location.

20
00:01:33,461 --> 00:01:38,863
E como eu disse, Core Location é esse framework
para gerencar localização e também direção.

21
00:01:38,863 --> 00:01:43,863
E o objeto básico no Core Location
é o CLLocation, CL de Core Location,

22
00:01:43,863 --> 00:01:47,212
Location porque ele
encapsula a localização.

23
00:01:47,213 --> 00:01:52,472
Ele tem um monte de propriedades nele
que eu estão mostradas aí e eu vou aprofundar

24
00:01:52,472 --> 00:01:57,057
em algumas delas em particular.
A coisa mais importante é cordinate.

25
00:01:57,057 --> 00:02:02,205
Um objeto CLLocation tem uma coordinate
e uma coordinate é um C struct e ele tem

26
00:02:02,205 --> 00:02:06,750
latitude e longitude nele.
Aí está a C struct, vocês podem ver

27
00:02:06,750 --> 00:02:09,570
logo ali.
A latitude e longitude são

28
00:02:09,570 --> 00:02:12,669
CLLocationDegrees,
que é basicamente um double.

29
00:02:12,669 --> 00:02:15,333
Certo?
E ele também tem a altitude.

30
00:02:15,333 --> 00:02:18,306
Certo?
Isso é a altitude do GPS, basicamente.

31
00:02:18,306 --> 00:02:23,641
E a altitude pode ser negativa,
seria abaixo do nível do mar e a altitude

32
00:02:23,641 --> 00:02:27,726
é em metros.
Então, entre essas duas coisas você pode

33
00:02:27,726 --> 00:02:34,656
definitivamente identificar um ponto no espaço
em qualquer lugar da Terra, ou até

34
00:02:34,656 --> 00:02:39,076
acima da Terra.
Mas quando nós começamos a falar sobre

35
00:02:39,076 --> 00:02:43,422
obter essas localizações.
Pergunta. (já?!)

36
00:02:43,422 --> 00:02:47,926
>> [Estudante perguntando]
Deixe-me voltar aqui.

37
00:02:47,927 --> 00:02:53,136
A C struct aqui, a CLLocationCoordinate2D,
essa struct tem dois

38
00:02:53,136 --> 00:02:56,171
doubles nela.
Um para latitude, um para longitude.

39
00:02:56,171 --> 00:02:58,879
Eles são apenas doubles.
(...)

40
00:02:58,879 --> 00:02:59,739
Ok.

41
00:02:59,739 --> 00:03:04,673
Quando nós começarmos a falar
sobre essas locations, essas latitudes

42
00:03:04,673 --> 00:03:09,909
e longitudes, como nós obtemos a location?
Como nós determinamos o que é? Não é sempre

43
00:03:09,909 --> 00:03:13,906
da mesma forma.
Não é sempre location do GPS, certo?

44
00:03:13,906 --> 00:03:18,763
Por que isso? Bom, nós vamos falar
sobre as diferentes maneiras de obtê-la,

45
00:03:18,763 --> 00:03:21,546
porque você iria ter esse tradeoff
em uma em relação a outra.

46
00:03:21,546 --> 00:03:26,816
Mas CLLocation por causa disso tem esse
conceito de accuracy. Accuracy

47
00:03:26,816 --> 00:03:30,886
horizontal e vertical.
E existem um monte de constantes para

48
00:03:30,886 --> 00:03:36,151
setar a accuracy horizontal e vertical,
a partir da accuracy de

49
00:03:36,151 --> 00:03:41,292
por exemplo, dentro de 3 kilômetros,
ok? Isso não é muito preciso.

50
00:03:41,292 --> 00:03:44,810
Isso é tipo você
na vizinhança inteira.

51
00:03:44,810 --> 00:03:48,206
Até esse esse LocationBest,
ou até melhor, BestForNavigation,

52
00:03:48,206 --> 00:03:52,494
que é: eu realmente quero saber
exatamente, o mais perto possível,

53
00:03:52,494 --> 00:03:56,718
onde exatamente eu estou, porque talvez
eu esteja usando direções turn-by-turn e não quero

54
00:03:56,718 --> 00:04:01,069
que a pessoa vire na direção errada
por achar que elas estão na outra rua.

55
00:04:01,069 --> 00:04:03,242
Ok?
E obviamente temos coisas

56
00:04:03,242 --> 00:04:06,792
entre elas.
Como você escolheria entre essas

57
00:04:06,792 --> 00:04:12,626
várias accuracies e então como isso
iria se refletir na maneira como você usa essa API?

58
00:04:12,626 --> 00:04:18,482
Bom, o quanto mais preciso você quiser,
basicamente mais bateria vai

59
00:04:18,482 --> 00:04:19,846
te custar.
Ok?

60
00:04:19,846 --> 00:04:25,740
E isso soa um pouco engraçado de dizer,
mas esse é o tradeoff primário aqui.

61
00:04:25,740 --> 00:04:29,936
É bateria, ok?
Porque o GPS usa bastante energia

62
00:04:29,936 --> 00:04:36,033
para que sua antena aceite sinais dos
satélites de GPS e os triangule

63
00:04:36,033 --> 00:04:41,417
e o celular usa bem pouca energia.
Ok? Celular tem sido projetado durante

64
00:04:41,417 --> 00:04:44,737
sua vida inteira para ser
um mecanismo de pouca energia.

65
00:04:44,737 --> 00:04:47,797
E tem também, no meio, o WiFi, ok?

66
00:04:47,797 --> 00:04:52,753
O WiFi usa mais energia que o celular,
mas não tanto quanto o GPS, pelo menos

67
00:04:52,753 --> 00:04:56,722
não checa tão constantemente como o GPS.
Como essas 3 coisas são usadas?

68
00:04:56,722 --> 00:04:59,394
Bom, obviamente o celular, você pode
dizer

69
00:04:59,394 --> 00:05:03,810
aonde você está dentro de um quilômetro ou por aí,
porque você só pode ver onde estão 

70
00:05:03,810 --> 00:05:07,622
as torres de celular e daí você meio que sabe
onde você está.
you are, where you are. 

71
00:05:07,623 --> 00:05:11,391
Mas é tudo meio aproximado e depende
de onde você está.

72
00:05:11,391 --> 00:05:15,753
Se você está em uma cidade, com um monte de
torres de celular, você pode ter uma

73
00:05:15,753 --> 00:05:18,468
precisão muito boa.
Mas se você está tipo fora da cidade

74
00:05:18,468 --> 00:05:22,766
ou na estrada, poderia ser bem ruinzinho.
O WiFi surpreende as pessoas.

75
00:05:22,766 --> 00:05:27,260
Mas existe na verdade um banco de dados
na internet com toneladas e toneladas,

76
00:05:27,260 --> 00:05:28,491
milhares de WiFi nodes. Ok?

77
00:05:28,491 --> 00:05:32,913
Como, todas essas da Stanford
que vocês estão constantemente conectando

78
00:05:32,913 --> 00:05:35,025
enquanto vocês andam pelo campus.
Elas estão em um banco de dados.

79
00:05:35,025 --> 00:05:39,319
Então ele pode triangular baseado na
força do sinal de WiFi nodes que estão

80
00:05:39,319 --> 00:05:40,186
perto de você.
Ok?

81
00:05:40,186 --> 00:05:43,794
Isso é especialmente bom se você
está em um lugar fechado e não pode receber GPS.

82
00:05:43,795 --> 00:05:48,513
Você pode uma descrição bem precisa,
especialmente em um lugar como a Stanford

83
00:05:48,513 --> 00:05:51,260
onde existem vários WiFi nodes.
Quero dizer: um monte.

84
00:05:51,260 --> 00:05:54,681
Você pode ter uma triangulação
bem boa aqui.

85
00:05:54,681 --> 00:05:59,336
Então essa é a forma mediana.
Qual desses é escolhido,

86
00:05:59,336 --> 00:06:03,985
infezlimente não é uma opção sua.
Ok? A única forma que você pode dar uma dica

87
00:06:03,985 --> 00:06:08,756
pro sistema de qual você quer usar
é especificando sua accuracy.

88
00:06:08,756 --> 00:06:12,327
Então, se você especificar a melhor,
você vai receber GPS, porque essa é a melhor,

89
00:06:12,327 --> 00:06:15,132
a maneira mais precisa.
Se você especificar três quilômetros ou até

90
00:06:15,132 --> 00:06:18,817
um quilômetro, você provavelmente vai obter
celular, porque gasta menos energia e

91
00:06:18,817 --> 00:06:20,756
isso é tudo que você precisa,
então é o que você vai receber.

92
00:06:20,756 --> 00:06:24,306
Accuracy é tipo como você especifica isso,
mas não é um mapeamento um-pra-um.

93
00:06:24,306 --> 00:06:26,556
Ok? E você não tem garantia
de nada, porque

94
00:06:26,556 --> 00:06:30,292
algumas coisas podem não estar disponíveis.
Se você está indoor, você não vai receber

95
00:06:30,292 --> 00:06:32,331
GPS, não importa quão preciso
você peça.

96
00:06:32,331 --> 00:06:33,886
Ok?
Faz sentido?

97
00:06:33,886 --> 00:06:38,886
Accuracy é a maneira que nós especificamos isso.
Além de location, também tem speed,

98
00:06:38,886 --> 00:06:43,627
que é sua velocidade instantânea na verdade.
É sua velocidade dentro de um último

99
00:06:43,627 --> 00:06:47,322
intervalo pequeno de tempo.
Não sua velocidade média dentro

100
00:06:47,322 --> 00:06:50,546
dos últimos dez segundos ou algo
mais alto nível assim.

101
00:06:50,546 --> 00:06:55,451
Então speed é tipo para consulta. É bom apenas
para navegacão em veículos, se você estiver

102
00:06:55,451 --> 00:07:00,005
andando dentro de um veículo porque
você recebe GPS suficiente para

103
00:07:00,005 --> 00:07:03,174
calcular a velocidade.
Course é um interessante.

104
00:07:03,174 --> 00:07:07,602
Esse é sua direção e alguns devices
são melhores nisso do que outros porque

105
00:07:07,602 --> 00:07:11,119
alguns devices tem bússolas magnéticas neles,
ok? E outros não tem.

106
00:07:11,119 --> 00:07:15,547
Então os outros podem dizer o course apenas
olhando para onde você está indo e vendo

107
00:07:15,547 --> 00:07:17,890
pra onde fica.
Outros podem realmente dizer

108
00:07:17,890 --> 00:07:22,848
magneticamente pra onde você está se movendo, ok?
Então depende do device e você vai ver

109
00:07:22,848 --> 00:07:27,888
nessa API aqui no decorrer da aula
que existem três maneiras de descobrir

110
00:07:27,888 --> 00:07:32,004
o que seu device pode fazer, ok?
Time stamp é um importante porque

111
00:07:32,004 --> 00:07:37,096
esses updates de location chegam para você
inconstantemente, eles não estão chegndo

112
00:07:37,096 --> 00:07:42,188
tipo a cada cinco segundos, ok? Eles estão
vindo, um segundo, um décimo de segundo,

113
00:07:42,188 --> 00:07:45,180
três segundos. Então você realmente precisa
olhar para os time stamps

114
00:07:45,180 --> 00:07:49,170
se você quer entender como essa pessoa
está se movendo no tempo e espaço,

115
00:07:49,170 --> 00:07:51,047
ok?
Então toda leitura é time-stamped.

116
00:07:51,047 --> 00:07:54,980
E existem também utility functions como,
tendo duas CLLocations, qual é

117
00:07:54,980 --> 00:07:57,566
a diferença entre elas,
coisas assim.

118
00:07:57,566 --> 00:08:03,036
Você pode olhar a API para esses.
Então, como você obtém um desses

119
00:08:03,036 --> 00:08:06,376
objetos CLLocations, certo?
Esses objetos CLLocation que

120
00:08:06,376 --> 00:08:09,014
encapsulam uma location, como você
obtém um?

121
00:08:09,014 --> 00:08:12,940
E a resposta é: você obtém de um
CLLocationManager, certo?

122
00:08:12,940 --> 00:08:15,920
E eu vou falar sobre isso
em um segundo.

123
00:08:15,920 --> 00:08:20,790
Primeiro eu quero que vocês saibam
que vocês podem simular sua localização

124
00:08:20,790 --> 00:08:23,699
no Xcode, ok? Enquanto você
está rodando o seu app no Xcode.

125
00:08:23,699 --> 00:08:28,663
Se você for lá embaixo onde tem
a barra de debug, vocês reconhecem

126
00:08:28,663 --> 00:08:31,515
o que é isso?
Existe um negocinho que se parece

127
00:08:31,515 --> 00:08:34,675
com uma seta, se você clicar nisso,
você pode escolher

128
00:08:34,675 --> 00:08:38,318
um lugar e ele vai se comportar
como se você estivesse lá quando você fizer

129
00:08:38,318 --> 00:08:42,320
todas essas chamadas, essas CLLocation,
CLLocationManager. Basicamente o CLLocationManager

130
00:08:42,320 --> 00:08:46,021
pensa que você está lá.
E enquanto você está rodando você pode

131
00:08:46,021 --> 00:08:49,738
mudar essa lista e você vai se mover,
e você pode até fazer upload da sua própria

132
00:08:49,738 --> 00:08:53,807
GPS location, ok? Se você tiver algum
dado de teste ou algo que você quiser fazer.

133
00:08:53,807 --> 00:08:56,498
Então, você pode simular sua location
no debugger.

134
00:08:56,499 --> 00:09:00,341
Certo, CLLocationManager.
Como essa coisa funciona?

135
00:09:00,341 --> 00:09:04,025
Bom, ela funciona assim.
É um processo de 4 passos para fazer

136
00:09:04,025 --> 00:09:09,234
um LocationManager te dar a location.
1) você tem que checar seu hardware para

137
00:09:09,234 --> 00:09:12,031
ter certeza que ele vai te dar
o que você quer.

138
00:09:12,031 --> 00:09:16,551
Nós vamos falar sobre isso. Daí
você vai criar uma instância de CLLocationManager

139
00:09:16,551 --> 00:09:19,812
Você pode ter múltiplas dessas instâncias

140
00:09:19,812 --> 00:09:23,425
na sua aplicação.
Mas você não vai querer que elas

141
00:09:23,425 --> 00:09:26,253
estejam competindo pelo
hardware de localização.

142
00:09:26,253 --> 00:09:30,782
Então eu recomento que vocês tenham
um CLLocationManager global no seu app.

143
00:09:30,782 --> 00:09:35,277
Ter uma classe que compartilha seu
LocationManager porque você não quer

144
00:09:35,277 --> 00:09:39,766
uma instância dizendo que quer updates
precisos e daí outra dizendo

145
00:09:39,766 --> 00:09:43,494
que quer updates de baixa precisão.
E elas estão ambas competindo pela

146
00:09:43,494 --> 00:09:47,983
informação e em frequências diferentes
e você quer que a location que

147
00:09:47,983 --> 00:09:50,572
está vindo pro seu app
que venha por um "cano".

148
00:09:50,573 --> 00:09:53,953
Ok? É minha opinião.
Acho que esse é o modo de projetar isso.

149
00:09:53,953 --> 00:09:58,783
Então você tem uma instância com alloc + init,
e daí você configura. Que tipo de

150
00:09:58,783 --> 00:10:03,247
accuracy você quer e que tipo de
location update você quer e daí

151
00:10:03,247 --> 00:10:06,927
você inicia ele.
Envia uma mensagem para começar e daí ele

152
00:10:06,927 --> 00:10:11,871
vai começar a enviar os updates
para o seu delegate. Ok? O CLLocation

153
00:10:11,871 --> 00:10:15,005
tem um delegate.
Que tipo de monitoração de location

154
00:10:15,005 --> 00:10:18,428
você pode ter com isso?
Você tem monitoração básica que são

155
00:10:18,428 --> 00:10:22,839
updated contínuos baseada em update.
Você pode especificar a precisão que você quiser

156
00:10:22,839 --> 00:10:27,596
e ele vai continuar alimentando seus
objetos CLLocation de onde o telefone está

157
00:10:27,596 --> 00:10:28,501
ou de onde o device está.
Ok?

158
00:10:28,501 --> 00:10:32,388
Faz sentido?
Então esse é o básico.

159
00:10:32,389 --> 00:10:35,651
Você também pode receber updates
quando mudanças significantes ocorrerem.

160
00:10:35,651 --> 00:10:40,211
A pessoa moveu uma distância significativa,
talvez uma distância de uma torre

161
00:10:40,211 --> 00:10:43,637
de celular para outra.
Novamente, por baixo dos panos, você não sabe

162
00:10:43,637 --> 00:10:47,167
o que está acontecendo, mas, sabe
uma distância signficativa.

163
00:10:47,167 --> 00:10:51,268
Então esse vai ser um monitoramento
de baixa energia da sua location e você

164
00:10:51,268 --> 00:10:54,624
vai receber um CLLocation toda vez
que mudar o suficiente, ok?

165
00:10:54,624 --> 00:10:59,085
Você também pode setar regiões,
como as lavanderias. E sempre que a pessoa

166
00:10:59,085 --> 00:11:02,141
for para essa região, você recebe
um update de CLLocation.

167
00:11:02,141 --> 00:11:06,231
Que é bem legal.
E você pode também monitorar a direção.

168
00:11:06,231 --> 00:11:10,263
Você pode monitorar para onde a pessa
está apontando e quando elas mudarem

169
00:11:10,263 --> 00:11:14,487
a direção ou mover o telefone,
daí você pode receber

170
00:11:14,487 --> 00:11:16,248
um updade de direção também.
Ok?

171
00:11:16,249 --> 00:11:20,314
Então, esse primeiro passo aqui é
checar o que o seu hardware pode fazer.

172
00:11:20,314 --> 00:11:24,546
Existem duas peças para isso.
A primeira-- todos esses são

173
00:11:24,546 --> 00:11:28,464
métodos de classe no CLLocationManager.
A primeira é location services enabled.

174
00:11:28,464 --> 00:11:31,691
Vocês provavelmente já viram isso
onde quando você roda um app

175
00:11:31,691 --> 00:11:35,065
e ele pergunta: esse app gostaria
de usar a sua localização.

176
00:11:35,065 --> 00:11:36,384
Quer permitir?
Certo?

177
00:11:36,384 --> 00:11:41,748
E também se você for no Settings você pode
desligar o Location Services para o seu

178
00:11:41,748 --> 00:11:46,536
telefone como um todo se você não quiser nenhum app
usando, ou você pode ligar e desligar

179
00:11:46,536 --> 00:11:48,817
app por app no seu telefone.

180
00:11:48,817 --> 00:11:53,774
Esse BOOL vai dizer se o seu app
está autorizado a receber Location Services.

181
00:11:53,774 --> 00:11:56,152
Ok? Então você deve sempre
checar esse aqui, porque

182
00:11:56,152 --> 00:11:59,914
o user pode não querer seu app use isso.
E se o seu app for baseado fundamentalmente

183
00:11:59,914 --> 00:12:03,391
em location, bom daí você não pode fazer
o que você quer. Mas uma vez que você

184
00:12:03,391 --> 00:12:07,267
tenha determinado que o Location Services
está ligado, daí você pode também descobrir

185
00:12:07,267 --> 00:12:11,029
o que o hardware pode fazer, tipo
nós podemos usar a direção nesse hardware?

186
00:12:11,029 --> 00:12:13,676
O heading está disponível?
Você pode fazer esse negócio de monitoramento

187
00:12:13,676 --> 00:12:17,580
de região onde você seta uma região ao redor
das lavanderias e recebe um update, porque 

188
00:12:17,580 --> 00:12:21,384
nem todos os hardwares podem fazer isso, ok?
Então como nós obtemos essa informação

189
00:12:21,384 --> 00:12:23,149
do Location Manager?
Certo?

190
00:12:23,149 --> 00:12:26,438
Como nos obtemos os CLLocation que chegam?
É bem fácil.

191
00:12:26,438 --> 00:12:29,429
Você apenas seta um delegate.
Você pode na verdade perguntar.

192
00:12:29,429 --> 00:12:33,276
Você pode perguntar ao CLLocationManager:
onde essa pessoa está agora?

193
00:12:33,276 --> 00:12:36,205
Certo? Onde está esse device agora?
E ele te dirá.

194
00:12:36,205 --> 00:12:40,236
Mas você não quer perguntar.
Essa não é uma API muito boa,

195
00:12:40,236 --> 00:12:43,644
perguntar assim.
Ao invés, você seta esse delegate e daí

196
00:12:43,644 --> 00:12:47,609
você seta a accuracy.
Você quer updates bons ou

197
00:12:47,609 --> 00:12:52,868
tipo dentro de um quilômetro ou três?
Você pode também setar um filtro de distância

198
00:12:52,868 --> 00:12:58,228
que diz: não me dê outro update até
que o device tenha viajado pelo menos

199
00:12:58,228 --> 00:13:00,303
esse tanto.
Ok?

200
00:13:00,303 --> 00:13:03,771
É tipo uma distância mínima para
receber o próximo update.

201
00:13:03,771 --> 00:13:06,922
Sim?
>> [Estudante perguntando]

202
00:13:06,922 --> 00:13:12,261
[estudante perguntando]

203
00:13:12,261 --> 00:13:16,221
>> A pergunta é: coisas assim

204
00:13:16,221 --> 00:13:21,518
como monitoramento de região ou o exemplo
das lavanderias, o iOS vai ficar "pingando"?

205
00:13:21,518 --> 00:13:26,572
Não é polling de fato. Ok?
Ele tem um dispositivo de rede

206
00:13:26,572 --> 00:13:31,160
que se liga a torres de celular, por exemplo,
e ele recebe interrupções no nível

207
00:13:31,160 --> 00:13:35,874
do OS quando dados ficam disponíveis.
Ok? Não é um lance de polling,

208
00:13:35,874 --> 00:13:38,914
é algo de baixo nível do OS,
certo?

209
00:13:38,914 --> 00:13:44,296
Quero dizer, se você não entende como os OS's
obtem dados dos devices de um modo

210
00:13:44,296 --> 00:13:48,284
não-polling, nós podemos falar sobre isso depois.
>> [Estudante perguntando]

211
00:13:48,284 --> 00:13:50,716
[estudante perguntando]

212
00:13:50,716 --> 00:13:55,390
>> Ok, a pergunta é: os dados são crus?
E nós vamos falar sobre isso e a resposta

213
00:13:55,390 --> 00:13:59,230
é que eles tem sido suavizados.
Dependendo de quantos dados você tem,

214
00:13:59,230 --> 00:14:02,350
você pode suavizá-los mais e mais, certo?
E nós vamos ver isso.

215
00:14:02,351 --> 00:14:05,893
Uma vez que você setou a accuracy
e o filtro de distância, daí você começa

216
00:14:05,893 --> 00:14:09,562
a updatear a location.
Você envia isso para o Location Manager e

217
00:14:09,562 --> 00:14:13,810
ele vai começar a enviar para seu delegate
a seguinte mensagem: didUpdateToLocation:

218
00:14:13,810 --> 00:14:16,467
fromLocation:
Ele vai te dar a última location

219
00:14:16,467 --> 00:14:18,856
que já te deu novamente e daí
vai te dar uma ToLocation.

220
00:14:18,856 --> 00:14:21,728
Ok? É isso.
Você continua recebendo essas mensagens

221
00:14:21,728 --> 00:14:25,092
de delegate te dizendo
aonde está o device.

222
00:14:25,093 --> 00:14:29,048
Uma coisa antes de eu falar sobre heading:

223
00:14:29,048 --> 00:14:32,600
Você não quer isso ligado
mais do que o necessário.

224
00:14:32,600 --> 00:14:35,037
Ok?
Porque isso usa bateria.

225
00:14:35,037 --> 00:14:39,594
Mesmo os de pouca energia
ainda usam bateria. Então você deveria

226
00:14:39,595 --> 00:14:45,241
dizer stopUpdatingLocation
sempre que, por exemplo, o ViewController

227
00:14:45,241 --> 00:14:50,440
que vai mostrar isso, viewWillDisappear
ou viewDidDisappear,

228
00:14:50,440 --> 00:14:53,814
pare, ok?
Não o deixe rodando lá em background

229
00:14:53,814 --> 00:14:57,996
fazendo nada com os dados.
Isso faz sentido?

230
00:14:57,996 --> 00:15:01,095
Sim.
A pergunta é: como você testa

231
00:15:01,095 --> 00:15:02,665
quanta bateria é?
Você não testa.

232
00:15:02,665 --> 00:15:07,322
Não é algo que tenha
uma API para medir ou algo assim,

233
00:15:07,322 --> 00:15:12,497
mas, sabe, você tem que tunar sua aplicação
para usar o mínimo disso possível

234
00:15:12,497 --> 00:15:16,635
o tempo todo.
E se você não fizer, as pessoas não vão

235
00:15:16,635 --> 00:15:21,735
usar seus apps, porque na app store
vão escrever review e dizer: esse negócio

236
00:15:21,735 --> 00:15:23,466
chupa a bateria, esqueça!
Ok? É isso.

237
00:15:23,466 --> 00:15:26,141
Você tem que ser cuidadoso.
Você tem que saber o que sua aplicação

238
00:15:26,141 --> 00:15:29,172
está fazendo.
Então, heading. Eu não vou falar sobre

239
00:15:29,172 --> 00:15:30,976
heading, mas é o mesmo
tipo de coisa.
240
00:15:30,976 --> 00:15:32,391
Right.
Certo?
Você seta um filtro de heading.

241
00:15:32,391 --> 00:15:35,997
Você começa o heading e então você
obtém esse delegate de location diferente,

242
00:15:35,997 --> 00:15:38,666
que é o didUpdateHeading.
E então você fica recebendo os headings

243
00:15:38,666 --> 00:15:42,046
cada vez que o heading mudar.
Ok? E você vai ter um CLHeading que é

244
00:15:42,046 --> 00:15:46,228
assim, tem o magnetic e o true.
Você não recebe o "true" a não ser que você

245
00:15:46,228 --> 00:15:50,852
tenha GPS ou.. não GPS mas qualquer tipo
de serviço de monitoração de localização tem

246
00:15:50,852 --> 00:15:55,000
que estar ligado, porque ele precisa saber
onde no planeta você está para saber

247
00:15:55,000 --> 00:15:59,762
a diferença entre magnetic e true, porque
é diferente em cada lugar do planeta, certo?

248
00:15:59,762 --> 00:16:04,763
Se você já viu o negócio da bússola
de heading em devices, você sabe que

249
00:16:04,763 --> 00:16:09,277
as vezes ele vai aparecer e dizer: oh,
tem muita interferência magnética local,

250
00:16:09,277 --> 00:16:14,133
eu não consigo fazer a bússola funcionar.
E você tem que tipo movê-lo na forma

251
00:16:14,133 --> 00:16:18,036
de um 8. Quantas pessoas já viram isso?
Ok, então +/- metade de vocês.

252
00:16:18,036 --> 00:16:21,736
Essa coisa, essa coisa que aparece
e te diz para mover em forma de 8,

253
00:16:21,736 --> 00:16:24,636
você pode suprimir isso, se você não quiser
que seu device faça isso.

254
00:16:24,636 --> 00:16:28,114
Sse você prefere não receber essa
informação extra de heading, porque você

255
00:16:28,114 --> 00:16:31,137
não quer incomodar seu usuário,
então você pode suprimir isso retornando

256
00:16:31,137 --> 00:16:34,682
NO desse método de delegate
locationManagerShouldDisplayHeadingCalibration.

257
00:16:34,682 --> 00:16:38,396
Ok? Esse é um método de delegate
do CLLocationManager.

258
00:16:38,396 --> 00:16:41,053
Certo. O seu delegate
também vai receber erros.

259
00:16:41,053 --> 00:16:44,425
Existem três tipos de erros
que você pode receber aqui.

260
00:16:44,425 --> 00:16:47,936
O primeiro é denied (proibido).
Denied significa - o que você estava dizendo antes -

261
00:16:47,936 --> 00:16:51,361
eles desligaram o location services
enquanto ele estava rodando.

262
00:16:51,361 --> 00:16:55,982
Eles viram o que seu app estava fazendo
com a localização deles e disseram NHÁ,

263
00:16:55,982 --> 00:16:59,169
eu não quero que faça isso.
E eles foram lá e desligaram.

264
00:16:59,170 --> 00:17:02,912
Então começa a receber Denied, ok?
No seu delegate.

265
00:17:02,912 --> 00:17:07,604
Outro é LocationUnknown. Isso é que
ele tentou o melhor para conseguir por algum tempo

266
00:17:07,604 --> 00:17:12,077
mas ele não consegue achar onde você está.
Ele vai enviar isso para você para que você saiba

267
00:17:12,077 --> 00:17:16,514
"eu estou tentando, mas eu não consigo".
Esse erro, você provavelmente vai querer

268
00:17:16,514 --> 00:17:21,441
esperar. Você pode reportar isso para
o usuário que não conseguiu encontrar a localização

269
00:17:21,441 --> 00:17:26,171
mas continua procurando. É isso que isso significa.
E o HeadingFailure, é o que você recebe

270
00:17:26,171 --> 00:17:30,606
se você suprimir o negócio da forma de 8
ou se eles fazem o negócio da forma de 8 e

271
00:17:30,606 --> 00:17:33,802
mesmo assim eles não conseguem se livrar
da interferência magnética local, ok?

272
00:17:33,802 --> 00:17:38,224
Então isso é enviado para o seu delegate
também. Esse

273
00:17:38,224 --> 00:17:38,959
DidFailWithError:.
Ok.

274
00:17:38,959 --> 00:17:43,453
Agora vamos falar sobre o negócio de
monitoração de mudanças significantes, ok?

275
00:17:43,453 --> 00:17:47,743
Onde ele vai te dizer se você moveu uma
distância significante e você faz isso dizendo

276
00:17:47,743 --> 00:17:50,559
startMonitoringSignificantLocationChanges. 

277
00:17:50,559 --> 00:17:54,645
E novamente, não é todo device que pode fazer isso, 
então você precisa chamar essas

278
00:17:54,645 --> 00:17:57,884
outras mensagens para descobrir se você está
em um device que consegue fazer isso.

279
00:17:57,884 --> 00:18:00,883
Mas se você estiver, então quando
ele mover uma quantidade significante,

280
00:18:00,883 --> 00:18:02,868
você vai receber um método de delegate.
Ok?

281
00:18:02,869 --> 00:18:06,883
O que é incrível sobre esse aqui
é que sua aplicação nem precisa

282
00:18:06,883 --> 00:18:10,110
estar rodando, ok?
Se sua aplicação nem foi iniciada,

283
00:18:10,110 --> 00:18:13,565
deixada lá, em background.
Ela nem foi iniciada.

284
00:18:13,565 --> 00:18:15,838
Se ela foi iniciada pelo
menos uma vez.

285
00:18:15,839 --> 00:18:20,199
E você expressou um desejo para essas coisas,
então sua aplicação vai ser lançanda

286
00:18:20,199 --> 00:18:23,297
assim que o device mover
uma distância significativa.

287
00:18:23,297 --> 00:18:24,954
Ok?
O que é bem da hora.

288
00:18:24,954 --> 00:18:28,866
E quanto ela for lançada, seu appDelegate,
que, novamente, nós não falamos

289
00:18:28,866 --> 00:18:31,651
muito sobre ele,
mas você vai vê-lo ali, quando você cria

290
00:18:31,651 --> 00:18:35,002
um app, tem esse appDelegate.m.
Lá tem um método chamado

291
00:18:35,002 --> 00:18:39,562
application:didFinishLaunchingWithOptions:
e as options são um dictionary e uma das

292
00:18:39,562 --> 00:18:43,706
chaves nesse dictionary vai ser
UIApplicationLaunchOptionsLocationKey. 

293
00:18:43,706 --> 00:18:47,616
Isso significa que você foi lançado
porque uma mudança significativa

294
00:18:47,616 --> 00:18:49,571
de localização aconteceu.
E daí você pode pegar um

295
00:18:49,571 --> 00:18:54,024
CLLocationManager, perguntar onde você está.
E agora você sabe onde o user está.

296
00:18:54,025 --> 00:18:57,948
Ok? Agora se você foi lançado no background,
você vai poder fazer isso em uma

297
00:18:57,948 --> 00:19:02,115
quantidade pequena de tempo, poucos segundos,
o que é uma eternidade dentro do seu programa.

298
00:19:02,115 --> 00:19:06,452
Mas, alguns segundos e você pode updatear
sua location. Se você precisa envolver o user,

299
00:19:06,452 --> 00:19:10,661
então você vai ter que enviar uma notificação
para o user e existe uma API diferente

300
00:19:10,661 --> 00:19:14,565
para notificar o usuário de coisas.
Eu não vou falar sobre isso,

301
00:19:14,565 --> 00:19:18,529
É NSNotification, LocalNotification e isso
pode colocar um alert para o user.

302
00:19:18,529 --> 00:19:22,755
E o user pode então clicar para lançar
o seu app e daí é com você.

303
00:19:22,755 --> 00:19:25,117
Ok?
Similarmente, o lance de região.

304
00:19:25,117 --> 00:19:28,698
Você especifica a região.
EU acho que a única região que existe

305
00:19:28,698 --> 00:19:32,937
é uma região circular por enquanto.
Mas você pode especificar outras regiões

306
00:19:32,937 --> 00:19:38,149
de algum jeito. E então você recebe esse método
de delegate, locationManager:DidEnterRegion:

307
00:19:38,150 --> 00:19:41,733
e didExitRegion. Ele vai te dizer
quando entra e sai.

308
00:19:41,733 --> 00:19:46,116
E isso também vai lançar seu app.
Então se seu app não está rodando e você

309
00:19:46,116 --> 00:19:49,037
está perto das lavanderias, seu app
vai ser lançado, ok?

310
00:19:49,037 --> 00:19:51,825
(...)

311
00:19:51,825 --> 00:19:56,358
Ok, essa é a antiga-- essa é a versão
do CoreLocation sem UI.

312
00:19:56,359 --> 00:20:00,045
E daí existe outra coisa chamada
MapKit.

313
00:20:00,045 --> 00:20:05,479
E MapKit tem essa view, subclasse
de UIView chamada MKMapView e é

314
00:20:05,479 --> 00:20:11,377
essa coisa circulada em amarelo aí
que mostra um mapa. E dentro do mapa existem

315
00:20:11,377 --> 00:20:17,763
esses pequenos pins, vocês vêem esses pins vermelhos?
Esses pins são MKAnnotationViews.

316
00:20:17,763 --> 00:20:22,473
Então eles também são UIViews.
Eles desenham esse pin.

317
00:20:22,473 --> 00:20:27,951
E esses pins, se você tocá-los,
então essa pequena barra preta

318
00:20:27,951 --> 00:20:30,923
vai aparecer,
isso é chamado de callout.

319
00:20:30,923 --> 00:20:34,065
Ok? E nesse callout
vai ter um título e

320
00:20:34,065 --> 00:20:37,211
um subtítulo daquela location
onde o pin está.

321
00:20:37,211 --> 00:20:41,660
E também uma accessory view na esquerda
e na direita. A da esquerda

322
00:20:41,660 --> 00:20:45,554
é uma UIImageView que está mostrando
uma pequena imagem da

323
00:20:45,554 --> 00:20:48,112
Memorial Church.
E a da direita é, nesse caso, um UIButton.

324
00:20:48,112 --> 00:20:52,192
Mas você pode setar essas views da esquerda
e da direita para ser quaisquer UIViews

325
00:20:52,192 --> 00:20:53,036
que você quiser.
Ok?

326
00:20:53,036 --> 00:20:55,992
Essa é a infra-estrutura básica
do MapView.

327
00:20:55,992 --> 00:20:59,312
Vamos falar sobre como nós fazemos
para essas coisas aparecerem.

328
00:20:59,312 --> 00:21:03,854
Tipo, como especificamos onde esses pins
estão e como nós especificamos os accessory

329
00:21:03,854 --> 00:21:08,322
views da esquerda e da direita
e todas essas coisas.

330
00:21:08,322 --> 00:21:13,720
A parte principal para entender isso...
Criar um mapa é fácil, apenas arraste-o,

331
00:21:13,720 --> 00:21:19,460
mas daí uma vez que você tem esse MapView
no seu Controller, ele precisa saber onde

332
00:21:19,460 --> 00:21:24,790
estão os pins. E o modo que ele faz isso,
ele tem uma property chamada annotations,

333
00:21:24,790 --> 00:21:30,038
é read-only, porque você tem que chamar
métodos de add e remove para adicionar e

334
00:21:30,038 --> 00:21:35,450
remover dele, mas você tem esse array de
anotações. Os objetos dentro desse array

335
00:21:35,450 --> 00:21:38,557
são ids.
Então eles podem ser qualquer tipo de objetos

336
00:21:38,557 --> 00:21:42,369
no universo inteiro.
Mas eles implementam um certo protocol.

337
00:21:42,369 --> 00:21:47,133
Essa é a primeira vez que nós vemos
protocols sendo usados para algo além

338
00:21:47,133 --> 00:21:49,147
de delegate e data source.
Ok?

339
00:21:49,147 --> 00:21:53,981
Aqui estamos usando um protocol para que
as coisas no array de pontos do MapView

340
00:21:53,982 --> 00:21:59,059
implementam esse certo protocol.
E é isso que tem no protocol.

341
00:21:59,059 --> 00:22:03,229
Apenas essas três coisas.
Tem coordinate, que é uma CLLocationCoordinate2D

342
00:22:03,229 --> 00:22:08,409
read-only, que vocês se lembram
dos slides anteriores, é latitude

343
00:22:08,409 --> 00:22:11,328
e longitute e daí
title e subtitle.

344
00:22:11,329 --> 00:22:13,760
Ok? Claramente,
o coordinate é required,

345
00:22:13,760 --> 00:22:17,441
caso contrário não há como o MapView
saber onde os pins vão.

346
00:22:17,441 --> 00:22:20,780
E o title e subtitle são opcionais.
Porque você pode--

347
00:22:20,780 --> 00:22:24,572
se você não especificá-los, então
quando você tocar no pin,

348
00:22:24,572 --> 00:22:26,660
ele não vai mostrar o callout.
Certo?

349
00:22:26,660 --> 00:22:29,525
Não vai haver nenhum callout
sem título ou subtítulo.

350
00:22:29,525 --> 00:22:32,910
Não seria bom, ok?
Então é isso. Simples assim.

351
00:22:32,910 --> 00:22:37,076
Você apenas adiciona esses objetos para o MapView
e eles tem que implementar

352
00:22:37,076 --> 00:22:40,135
esses três métodos.
O getter para coordinate e title

353
00:22:40,135 --> 00:22:42,931
e subtitle.
E apenas o getter de coordinate

354
00:22:42,931 --> 00:22:46,550
é a única coisa que você tem que implementar.
Ok? Isso faz sentido?

355
00:22:46,550 --> 00:22:51,100
Então você adiciona e remove essas coisas
com addAnotation e removeAnotation ou

356
00:22:51,100 --> 00:22:55,420
addAnotations e removeAnotations.
Geralmente é uma boa idéia se você conhece

357
00:22:55,420 --> 00:22:58,728
todas suas anotações, se adiantar
e adicioná-las logo.

358
00:22:58,728 --> 00:23:01,836
Assim o MapView pode
se planejar um pouco.

359
00:23:01,836 --> 00:23:06,881
Também, o MapView reusa esses pins.
Então na medida que os pins saem da tela

360
00:23:06,881 --> 00:23:11,639
e voltam pra tela, conforme o user scrolla
pelo mundo, eles podem ser reusados.

361
00:23:11,639 --> 00:23:14,816
Assim como TableView E CollectionView.

362
00:23:14,816 --> 00:23:19,282
Certo? Lembram-se do dequeueReusable...
aqui temos a mesma coisa.

363
00:23:19,282 --> 00:23:24,741
Ok? Vamos ver isso em um segundo.
Então, como que é a cara das annotations em um mapa?

364
00:23:24,741 --> 00:23:30,072
Bom, se você usar a annotation default,
MKAnnotationView que vem com o iOS,

365
00:23:30,072 --> 00:23:33,661
é chamada MKPinAnnotationView, então ela
se parece com um alfinete.

366
00:23:33,661 --> 00:23:35,656
Eu acho que tem três cores,
roxo,

367
00:23:35,656 --> 00:23:39,066
azul e vermelho.
Você pode escolhê-las em uma property.

368
00:23:39,066 --> 00:23:42,637
É isso que você tem.
Mas você pode escrever sua própria

369
00:23:42,637 --> 00:23:45,041
subclasse de MKAnnotaionView.
E especificar sua própria imagem.

370
00:23:45,041 --> 00:23:49,337
Ou você poderia até usar MKAnnotation
e ele tem uma property chamada image onde

371
00:23:49,337 --> 00:23:53,161
você poderia setar sua própria imagem
ao invés de um pin se você quiser algo diferente.

372
00:23:53,161 --> 00:23:55,808
Ok? Então o que acontece
quando você toca em um pin?

373
00:23:55,808 --> 00:23:59,526
Bom, quando você toca em um pin
essa mensagem vai ser enviada para

374
00:23:59,526 --> 00:24:02,666
o delegate do MapView.
Então aqui temos um delegate normal que você

375
00:24:02,666 --> 00:24:06,967
vai setar-- seus controllers provavelmente
vão setar o self para ser o delegate do MapView.

376
00:24:06,967 --> 00:24:11,079
E ele vai receber esse método
mapViewDidSelectAnnotationView, certo?

377
00:24:11,079 --> 00:24:14,503
Isso vai te dizer quando uma
dessas coisas foi clicada.

378
00:24:14,503 --> 00:24:18,162
Ele também vai mostrar o callout
depois de chamar isso.

379
00:24:18,162 --> 00:24:22,987
Ele chama você primeiro e depois ele vai
mostrar o callout com os accessory views

380
00:24:22,987 --> 00:24:28,506
na esquerda e direita e o título e subtítulo.
Como você associa uma annotation, uma essas

381
00:24:28,506 --> 00:24:33,205
coisas no array que implementam
esse MKAnnotation protocol,

382
00:24:33,205 --> 00:24:37,838
como você o associa com um PinView?
E a resposta é: você temque implementar

383
00:24:37,838 --> 00:24:41,945
esse método de delegate bem aqui,
chamado mapView:viewForAnnotation, ok?

384
00:24:41,945 --> 00:24:45,950
Na verdade, provavelmente é
opcional implementá-lo.

385
00:24:45,950 --> 00:24:49,988
Se você não implementá-lo, você provavelmente
vai apenas ter um pin com apenas título e subtítulo

386
00:24:49,988 --> 00:24:52,643
no callout.
Mas se você quiser algo mais além disso

387
00:24:52,643 --> 00:24:56,363
no callout, accessory view esquerda e direita
ou qualquer coisa, você tem que

388
00:24:56,363 --> 00:24:58,878
implementar esse método.
E vai ser algo assim:

389
00:24:58,878 --> 00:25:02,790
Você diz mapView, que é o mapView envolvido,
dequeueReusableAnnotationViewWIthIdentifier.

390
00:25:02,790 --> 00:25:05,733
você passa uma string.
É bem pareciso com uma

391
00:25:05,733 --> 00:25:08,356
TableView ou CollectionView.

392
00:25:08,356 --> 00:25:12,346
A única diferença aqui é que
não há protótipo no Xcode para isso.

393
00:25:12,346 --> 00:25:16,231
Vocês sabem, como na TableView você faz
uma prototype cell dentro do Xcode?

394
00:25:16,231 --> 00:25:21,055
Então se você chamar dequeueReusableTableViewCell
e não há nenhuma para reusar, ele cria uma

395
00:25:21,055 --> 00:25:25,390
a partir do prototype, certo?
Bom, não há prototype para o MapView

396
00:25:25,390 --> 00:25:30,062
então, se você chamar o dequeueReusableCell
e ele voltar nil, você tem que criá-la

397
00:25:30,062 --> 00:25:31,499
com alloc init.
Ok?

398
00:25:31,499 --> 00:25:36,333
E o designated initializer para
MKAnnotationView é initWithAnnotation...

399
00:25:36,333 --> 00:25:37,873
reuseIdentifier.
Ok?

400
00:25:37,873 --> 00:25:40,788
E aqui eu estou criando um
MKPinAnnotationView.

401
00:25:40,788 --> 00:25:45,456
Você poderia criar sua própria subclasse
de MKAnnotationView se você

402
00:25:45,456 --> 00:25:48,206
quiser aqui. Agora, ou desenfileirando
ou criando,

403
00:25:48,206 --> 00:25:52,694
você tem essa annotationView, você seta
a annotation nela e sim, isso é

404
00:25:52,694 --> 00:25:56,887
feito duas vezes se você estiver criando,
mas não se preocupem com isso.

405
00:25:56,887 --> 00:26:01,447
E aqui também você poderia carregar as accessory
views do callout, mas

406
00:26:01,447 --> 00:26:04,054
você também pode não carregar.
Por que você não carregaria?

407
00:26:04,054 --> 00:26:08,080
E se for caro para obtê-los? Tipo e se
essa imagem você vai buscar

408
00:26:08,080 --> 00:26:10,835
do Flickr?
Ok? Você pode não querer fazer isso

409
00:26:10,835 --> 00:26:14,508
até que alguém toque no pin.
E daí o callout aparece, certo?

410
00:26:14,508 --> 00:26:17,818
Você poderia fazer aqui, mas isso
provavelmente seria um desperdício de recursos.

411
00:26:17,818 --> 00:26:21,682
Espere até que seja tocado e daí você implementa
o didSelecAnnotationView que eu vou mostrar

412
00:26:21,682 --> 00:26:25,658
em um segundo. Mas você certamente
vai querer resetar essa coisa aqui porque

413
00:26:25,658 --> 00:26:29,298
essas coisas podem estar sendo reusadas
e você não quer que a Memorial Church apareça

414
00:26:29,298 --> 00:26:33,486
quando você clicar na livraria.
Ok? E então você apenas retorna a view.

415
00:26:33,486 --> 00:26:36,774
Ok, é isso.
É assim que você associa uma annotation

416
00:26:36,774 --> 00:26:41,394
particular que é uma dessas coisas no array,
com uma annotationView,

417
00:26:41,394 --> 00:26:44,207
como um pin.
Existem várias propriedades interessantes

418
00:26:44,207 --> 00:26:47,669
em um AnnotationView.
A image aqui não é a image

419
00:26:47,669 --> 00:26:50,207
no callout. Essa é a
image do pin,

420
00:26:50,207 --> 00:26:52,960
por exemplo. E existem as
accessory views da esquerda e direita

421
00:26:52,960 --> 00:26:57,614
do callout que eu estava falando,
a imageView e o button, por exemplo.

422
00:26:57,614 --> 00:27:00,856
Se eles estão ou não ativos.
Você pode setar o offset do centro.

423
00:27:00,856 --> 00:27:05,086
Porque como um pin, você realmente quer
que a pontinha do alfinete aponte onde

424
00:27:05,086 --> 00:27:07,616
a location é, não o meio
da sua imagem do alfinete.

425
00:27:07,616 --> 00:27:11,457
Você pode até ter essas views,
essas pin views

426
00:27:11,457 --> 00:27:15,617
ou qualquer coisa, serem arrastáveis, mas se
você fizer isso, então as annotations,

427
00:27:15,617 --> 00:27:18,272
a lista de annotations, elas tem
que implementar outro método além

428
00:27:18,272 --> 00:27:21,444
de apenas MKAnnotationProtocol,
que é setCoordinate.

429
00:27:21,444 --> 00:27:23,659
Elas já implementam o getter
de coordinate.

430
00:27:23,659 --> 00:27:27,502
Agora elas tem que implementar
o setter de coordinate se elas vão ser arrastáveis.

431
00:27:27,502 --> 00:27:30,734
Se você setar isso para ser arrastável
e você não implementar isso,

432
00:27:30,735 --> 00:27:36,164
ele não vai arrastar, ok?
Um caso meio que especial aqui, se você

433
00:27:36,164 --> 00:27:41,533
setar uma das accessory views do callout,
a da esquerda ou da direita, para ser

434
00:27:41,533 --> 00:27:47,903
um UIControl, como UIButton é um UIControl,
é uma subclasse de UIControl, então você poderia

435
00:27:47,903 --> 00:27:52,383
setar o target-action desse botão,
e obter o target-action.

436
00:27:52,383 --> 00:27:56,484
Mas na verdade existe um método de delegate
que é chamado se o usuário toca

437
00:27:56,484 --> 00:28:00,579
qualquer uma das accessory views, da esquerda
ou da direita, que seja um

438
00:28:00,579 --> 00:28:03,144
UIControl, para que você não precise
fazer um target-action.

439
00:28:03,144 --> 00:28:07,434
você pode apenas implementar esse método
mapViewAnnotationViewCalloutAccessoryControlTapped.

440
00:28:07,434 --> 00:28:10,241
Ok? E nós vamos fazer isso
na nossa demo também.

441
00:28:10,241 --> 00:28:13,073
Vocês verão.
E aqui temos um exemplo

442
00:28:13,073 --> 00:28:18,167
do didSelectAnnotationView.
então vamos dizer que eu estou fazendo

443
00:28:18,167 --> 00:28:21,162
o exemplo da Memorial Church.
E eu vou buscar aquela foto,

444
00:28:21,162 --> 00:28:25,059
aquela pequena imagem de thumbnail
da Memorial Church do Flickr.

445
00:28:25,059 --> 00:28:28,862
Eu vou esperar para fazer isso
até que alguém toque o pin.

446
00:28:28,863 --> 00:28:30,988
E então eu vou receber essa mensagem,
certo?

447
00:28:30,988 --> 00:28:34,107
didSelectAnnotationView.
Então eu vou no Flickr,

448
00:28:34,107 --> 00:28:37,719
FlickrFetcher aqui, provavelmente em outra thread,
ok? Eu não vou bloquear

449
00:28:37,719 --> 00:28:40,138
a main thread aqui.
Na verdade, na demo, eu vou bloquear

450
00:28:40,138 --> 00:28:42,324
a main thread.
Mas não por isso.

451
00:28:42,324 --> 00:28:45,694
E vocês deveriam saber como colocar isso
em outra thread porque vocês estão

452
00:28:45,694 --> 00:28:48,741
fazendo isso para o homework.
Mas de qualquer modo, vocês provavelmente

453
00:28:48,741 --> 00:28:51,695
querem disparar uma thread aqui
para carregar essa coisa

454
00:28:51,695 --> 00:28:54,035
em outra thread.
Então seria algo assim.

455
00:28:54,035 --> 00:28:56,632
Vocês apenas olhariam
para a accessory view da esquerda,

456
00:28:56,632 --> 00:29:00,668
se for uma imageView talvez, daí você
iria e buscaria a imagem de algum modo

457
00:29:00,668 --> 00:29:01,548
e setaria aqui.
Ok? 

458
00:29:01,548 --> 00:29:05,212
Aqui é tipo setando o seu thumbnail
nas suas TableViewCells.

459
00:29:05,212 --> 00:29:07,091
Mas nos estamos fazendo sob demanda.

460
00:29:07,091 --> 00:29:12,210
Apenas quando o pin for tocado.
Vocês podem mostrar-- configurar como

461
00:29:12,210 --> 00:29:18,011
o mapa mostra, você pode mostrar views
de satélite ou street view ou uma híbrida das duas.

462
00:29:18,011 --> 00:29:21,347
Você pode mostrar também
a location atual do user.

463
00:29:21,348 --> 00:29:24,048
Location atual do GPS.
Vai ser um pin de uma cor diferente.

464
00:29:24,048 --> 00:29:26,365
Não tenho certeza, azul eu acho.
Ou roxo ou algo assim.

465
00:29:26,365 --> 00:29:28,884
E você pode também pegar
a location atual do user dessa maneira.

466
00:29:28,884 --> 00:29:31,356
Se você quer apenas mostrar
a current location

467
00:29:31,356 --> 00:29:33,694
do user e não quer mexer
com Core Location,

468
00:29:33,694 --> 00:29:35,875
você pode fazer diretamente
através do MapView aqui.

469
00:29:35,875 --> 00:29:37,920
Você pode também controlar
se o negócio

470
00:29:37,920 --> 00:29:41,067
vai dar zoom e scroll e coisas assim.
Vocês podem ver tudo isso

471
00:29:41,068 --> 00:29:46,070
na API do MapView para essas coisas.
Você pode também mostrar-- controlar

472
00:29:46,070 --> 00:29:49,414
a região do mundo que
ser visualizado, ok

473
00:29:49,414 --> 00:29:53,591
Você faz isso setando a property
region em um MKMapView.

474
00:29:53,591 --> 00:29:57,241
É uma C struct chamada
MKCoordinateRegion.

475
00:29:57,241 --> 00:30:03,210
Ele tem latitude e longitude
e também tem um delta de latitude e longitude,

476
00:30:03,210 --> 00:30:05,760
ok?
E claro que você pode especificar

477
00:30:05,760 --> 00:30:10,764
algo que seja retangular e que está
dentro de um quadrado, e então obviamente

478
00:30:10,764 --> 00:30:15,556
vai mostrar a menor delas ou ambas.
Ok? Então a região é tipo para consulta,

479
00:30:15,556 --> 00:30:19,710
porque a forma da sua view é determinada
pelo frame do MapView,

480
00:30:19,710 --> 00:30:24,342
não por esse delta da latitude e longitude.
Mas você está dizendo quanto que

481
00:30:24,342 --> 00:30:26,981
você quer mostrar.
E essa região pode ser animada, o que

482
00:30:26,981 --> 00:30:30,641
você geralmente quer fazer, mudanças
de região animadas, para que o user possa ver

483
00:30:30,641 --> 00:30:33,179
para onde eles estão indo.
Na nossa vamos fazer isso também.

484
00:30:33,179 --> 00:30:36,774
Nós começaremos mostrando uma grande view
do mundo e nós vamos zoomar para onde estamos.

485
00:30:36,774 --> 00:30:39,702
Então eles podem saber onde eles estão
quando der o zoom.

486
00:30:39,703 --> 00:30:41,744
Você também pode setar
o centerPoint também.

487
00:30:41,744 --> 00:30:45,314
Se você não se importa com o zoom
ou se você quer que o user controle isso

488
00:30:45,314 --> 00:30:49,184
completamente, você pode apenas setar o
center point. Ele vai mover a view ao redor do mundo.

489
00:30:49,185 --> 00:30:54,148
Lembrem-se que todos os mapas que vocês
estão vendo estão sendo baixados

490
00:30:54,148 --> 00:30:58,312
da internet, certo?
Constantemente baixados conforme você se move.

491
00:30:58,312 --> 00:31:02,868
Você não tem um mapa do mundo inteiro
e imagens de satélite nos seus devices,

492
00:31:02,868 --> 00:31:06,534
ele está constantemente baixando-os.
Aqui diz do Gugou Earth,

493
00:31:06,534 --> 00:31:09,613
não tenho certeza. Acho que agora
é do lance de mapas da Apple.

494
00:31:09,613 --> 00:31:13,279
Eu não tenho certeza de onde vem, mas você
não se importa também, mas você é

495
00:31:13,279 --> 00:31:15,825
notificado. Ok? quando
ele começa a baixar coisas,

496
00:31:15,825 --> 00:31:18,551
você recebe um delegate do MapView, 
você recebe uma mensagem.

497
00:31:18,551 --> 00:31:22,841
Eu não tenho certeza do que você faria aqui,
mas você também pode verificar erros onde

498
00:31:22,841 --> 00:31:26,211
a rede foi desconectada e agora
está mostrando apenas grandes quadrados cinzas.

499
00:31:26,212 --> 00:31:30,459
Você é notificado por isso também.
E existem um monte de funções em C ali

500
00:31:30,459 --> 00:31:35,106
para converter de coordenadas de mapa
para latitude, longitude, coordenadas, etc.

501
00:31:35,106 --> 00:31:37,516
Vocês podem olhar a documentação.

502
00:31:37,516 --> 00:31:41,310
Devem existir algumas dezenas
de funções em C que convertem.

503
00:31:41,310 --> 00:31:44,356
Overlays, eu não vou falar sobre isso
por questão de tempo.

504
00:31:44,356 --> 00:31:49,048
Mas overlays são tipo annotations,
mas ao invés de ser apenas um ponto,

505
00:31:49,048 --> 00:31:51,725
um overlay é basicamente uma UIView
que você desenha.

506
00:31:51,725 --> 00:31:56,176
Então você poderia usar isso para tipo,
mostrar direções de um lugar para outro.

507
00:31:56,176 --> 00:31:59,330
Ou destacar uma região em que
aconteceu alguma coisa.

508
00:31:59,330 --> 00:32:03,138
E é geo-localizada. Então conforme
o usuário faz pan e zoom, seu overlay

509
00:32:03,138 --> 00:32:06,960
vai estar pannando e zoomando,
seguindo-o. Vêem?

510
00:32:06,960 --> 00:32:09,957
É comos e seu overlay
estivesse mesmo no seu mapa.

511
00:32:09,958 --> 00:32:13,774
A API par isso é muito similar
com a de annotations.

512
00:32:13,774 --> 00:32:18,512
Você associa essas overlay views
com lugares no mapa e todas essas coisas.

513
00:32:18,512 --> 00:32:23,169
Vocês podem olhar isso se vocês quiserem.
Eu realmente não tenho tempo para

514
00:32:23,169 --> 00:32:24,831
cobrir isso tudo.
Então, a demo.

515
00:32:24,831 --> 00:32:29,346
O que eu vou fazer nessa demo é,
nós temos o Photomania, certo?

516
00:32:29,346 --> 00:32:33,191
É nosso negócio que mostra
os fotógrafos e as fotos.

517
00:32:33,191 --> 00:32:38,917
E o que eu vou fazer... nós não fizemos
uma versão de iPad disso, então eu vou fazer

518
00:32:38,917 --> 00:32:42,889
a versão de iPad.
E na versão de iPad,

519
00:32:42,889 --> 00:32:44,631
não há TableViews.
Serão mapas.

520
00:32:44,631 --> 00:32:47,714
Ok? Ele vai mostrar
um mapa com um ponto

521
00:32:47,715 --> 00:32:50,925
para todos os fotógrafos
que tiraram fotos.

522
00:32:50,925 --> 00:32:55,593
Daí você clica em um desses pontos
e ele vai mostrar outro mapa

523
00:32:55,593 --> 00:32:58,944
com os lugares onde todas as fotos
tiradas por aquele fotógrafo.

524
00:32:58,944 --> 00:33:02,583
Daí você clica nisso e ele
vai te mostrar a foto, ok?

525
00:33:02,583 --> 00:33:09,106
Faz sentido o que vamos fazer?
Certo, vamos ver aqui...

526
00:33:09,106 --> 00:33:13,372
Aqui está Photomania, como vimos
pela última vez

527
00:33:13,372 --> 00:33:18,647
para iPhone. Eu vou fazer
isso ser um

528
00:33:18,647 --> 00:33:22,170
app Universal.
Aqui está uma pequena revisão disso.

529
00:33:22,170 --> 00:33:25,841
Eu vou aqui em cima
no meu Photomania.

530
00:33:25,841 --> 00:33:32,668
E uma coisa sobre mudar de iPhone
para Universal é que eu gosto de mudar

531
00:33:32,668 --> 00:33:37,330
o nome do storyboard aqui.
Eu vou mudar isso para

532
00:33:37,330 --> 00:33:41,125
universal.
Mas daí eu vou renomear isso para ser

533
00:33:41,125 --> 00:33:46,477
iPhone, já que esse é o do iPhone.
E daí eu vou criar um

534
00:33:46,477 --> 00:33:49,896
novo Storyboard.
Certo? User Interfce, Storyboard

535
00:33:49,896 --> 00:33:52,520
para iPad.
Agora, nós percebemos que um bom número

536
00:33:52,520 --> 00:33:57,008
de vocês no homework cinco não fizeram isso,
e eu não tenho certeza se é porque vocês

537
00:33:57,008 --> 00:34:01,768
apenas não tiveram tempo, eu não entendi,
mas espero que vocês estejam vendo

538
00:34:01,768 --> 00:34:05,419
novamente aqui. Estou criando
esse novo Storyboard. Agora eu tenho

539
00:34:05,419 --> 00:34:10,831
dois storyboards, certo? iPhone
e iPad. E aqui eu seto para cada um,

540
00:34:10,831 --> 00:34:16,219
iPhone e daí aqui embaixo, iPad.
Eu seto qual é o storyboard

541
00:34:16,219 --> 00:34:22,168
para cada idiom. Então digo iPhone para esse
e vamos dizer iPad para esse outro, ok?

542
00:34:22,168 --> 00:34:28,114
Agora meu storyboard do iPad está em branco
e normalmente eu faço essas demos

543
00:34:28,114 --> 00:34:33,778
de baixo para cima, mas eu vou fazer essa
de cima para baixo. Para que vocês possam ter

544
00:34:33,778 --> 00:34:39,574
uma idéia de como essa UI vai ser desde
o começo e daí nós aprofundamos e

545
00:34:39,574 --> 00:34:43,975
implementmos todas as nossas classes.
Essa coisa vai ter três

546
00:34:43,975 --> 00:34:48,317
View Controllers, certo?
Então eu vou arrastar três View Controllers

547
00:34:48,317 --> 00:34:53,561
aqui. Um, dois e três. E eles
estarão em um

548
00:34:53,561 --> 00:34:56,792
Navigation Controller.
Então vamos sguir e colocar essa coisa

549
00:34:56,792 --> 00:34:59,608
embed in Navigation Controller.
Então temos isso.

550
00:34:59,609 --> 00:35:03,546
Os três View Controllers aqui são.
Esse vai ser o de fotógrafos.

551
00:35:03,546 --> 00:35:06,196
Basicamente eu vou fazer a mesma coisa
que antes.

552
00:35:06,196 --> 00:35:10,362
Eu vou ter um DemoPhotographersViewController
que vai carregar

553
00:35:10,362 --> 00:35:13,690
o mesmo documento.
E esse vão ser as fotos para 

554
00:35:13,690 --> 00:35:17,373
um dado fotógrafo e esse vai ser
um ImageViewController.

555
00:35:17,374 --> 00:35:21,150
Certo? Ele apenas mostra a imagem.
Nós vamos trasicionar aqui

556
00:35:21,150 --> 00:35:25,056
e quando nós fizermos os segues
daqui pra cá, vai ser um novo tipo

557
00:35:25,056 --> 00:35:27,969
de segue que vocês não estão acostumados,
que é um segue manual.

558
00:35:27,969 --> 00:35:31,695
Nós vamos fazer o segue por código, ok?
Ao invés de apenas arrastar de um botão

559
00:35:31,695 --> 00:35:35,815
ou TableViewCell, nós vamos na verdade
fazer que nosso código faça o segue acontecer.

560
00:35:35,815 --> 00:35:38,358
E o que vai fazer isso são esses
pequenos callouts.

561
00:35:38,358 --> 00:35:41,333
Nós vamos ter um pequeno
accessory detail button ali.

562
00:35:41,333 --> 00:35:45,119
E quando você clicar, ele vai chamar
aquele método de delegate no

563
00:35:45,119 --> 00:35:47,408
MapView e então nós vamos
fazer o segue manualmente.

564
00:35:47,408 --> 00:35:50,921
Então isso vai ser algo novo.
Então deixe-me criar as classes.

565
00:35:50,921 --> 00:35:53,794
Nós já temos o ImageViewController
para esse.

566
00:35:53,794 --> 00:35:58,061
Deixe-me criar a classe para esse.
Agora, esses dois ViewController serão

567
00:35:58,061 --> 00:36:00,763
muito similares.
um mostrando fotógrafos

568
00:36:00,763 --> 00:36:03,747
e outro mostrando fotos.
Então eu vou criar uma classe base

569
00:36:03,747 --> 00:36:07,244
que vai ser um MapViewController
que eles vão compartilhar.

570
00:36:07,244 --> 00:36:09,272
Então deixe-me começar com esse.
File

571
00:36:09,272 --> 00:36:15,810
É uma nova classe,
vai ser um UIViewController

572
00:36:15,810 --> 00:36:19,938
e nós vamos chamar de MapViewController.
Sim?

573
00:36:19,938 --> 00:36:26,255
>> [Estudante perguntando]

574
00:36:26,255 --> 00:36:28,640
[estudante perguntando]

575
00:36:28,640 --> 00:36:33,498
(...)

576
00:36:33,498 --> 00:36:37,355
(...)

577
00:36:37,355 --> 00:36:41,371
>> Ah, isso...
a gente conversa sobre isso depois da aula.

578
00:36:41,371 --> 00:36:44,280
Apenas ignore por enquanto.

579
00:36:44,280 --> 00:36:48,379
Certo, então aqui está o MapViewController.

580
00:36:48,380 --> 00:36:53,149
Vamos limpar aqui.
Como que a API pública do MapViewController

581
00:36:53,149 --> 00:36:56,587
vai ser?
Basicamente o MapViewController não vai ter

582
00:36:56,587 --> 00:37:00,666
o seu próprio model.
Ele vai deixar outra pessoa especificar

583
00:37:00,666 --> 00:37:05,099
os annotations.
E para fazer ele genérico e simples,

584
00:37:05,099 --> 00:37:08,996
eu vou na verdade fazer uma
property aqui.

585
00:37:08,996 --> 00:37:15,783
Pública. Que é... vai ser um IBOutlet tabmém.
Um MKMapView.

586
00:37:15,783 --> 00:37:20,372
Ok? Então todos
esses MapViewControllers vão ter

587
00:37:20,372 --> 00:37:25,729
um MKMapView e então tenho
que importar MapKit.

588
00:37:25,729 --> 00:37:29,411
E nós vamos deixar as subclasses
acessá-lo diretamente, ok?

589
00:37:29,411 --> 00:37:33,496
Agora, normalmente nós não gostamos
de deixar os outlets públicos, claro.

590
00:37:33,496 --> 00:37:38,661
Mas como esse MapViewController, é meio que
sua natureza essencial gerenciar

591
00:37:38,661 --> 00:37:41,988
esse MapView, nós vamos seguir
e permitir que as pessoas

592
00:37:41,988 --> 00:37:46,328
o acessem diretamente e setem
para uma view de satélite e setem

593
00:37:46,328 --> 00:37:50,770
as annotations e todas essas coisas.
E o que o MapViewController faz é que

594
00:37:50,770 --> 00:37:53,004
ele implementa o delegate.
Ok?

595
00:37:53,004 --> 00:37:56,478
Então ele pode fazer as annotation views
e todas essas coisas.

596
00:37:56,478 --> 00:37:58,914
Essa vai ser a coisa básica aqui.

597
00:37:58,914 --> 00:38:00,764
Então esse cara...
Sim, pergunta.

598
00:38:00,764 --> 00:38:05,151
>> [Estudante perguntando]
>> Sim, nós vamos fazer isso em breve.

599
00:38:05,151 --> 00:38:09,872
Aqui... esse vai ser o Photographer,
então eu vou criar uma nova

600
00:38:09,872 --> 00:38:14,152
classe aqui que vai ser
uma subclasse de MapViewController.

601
00:38:14,152 --> 00:38:18,379
Eu vou chamá-la de
PhotographerMapViewController,

602
00:38:18,379 --> 00:38:24,418
digamos. Ok?
Então esse vai ser um

603
00:38:24,418 --> 00:38:30,921
MapViewController.
E sua API pública é similar ao

604
00:38:30,921 --> 00:38:36,947
que nós fizemos com as TableViews.
Eu vou fazer essa coisa ter o seu

605
00:38:36,947 --> 00:38:43,774
managedObjectContext especificado.
Então você especifica o managedObjectContext

606
00:38:43,774 --> 00:38:49,417
e ele vai mostrar todos os 
fotógrafos nesse context.

607
00:38:49,417 --> 00:38:52,625
Ok? Similar com o nosso
PhotographerCoreData.

608
00:38:52,625 --> 00:38:55,618
Similar com esse aqui.
Certo?

609
00:38:55,618 --> 00:38:59,572
Na verdade, isso vai ser
bem similar...

610
00:38:59,572 --> 00:39:03,838
as TableViews e esse do Mapa.
E eu também vou ter outro aqui

611
00:39:03,838 --> 00:39:07,424
que vai mostrar as fotos
para um dado fotógrafo.

612
00:39:07,424 --> 00:39:13,940
Ok? Então esse também vai ser um
MapViewController. E vamos chamar

613
00:39:13,940 --> 00:39:18,251
esse aqui de
PhotosByPhotographerMapViewController.

614
00:39:18,251 --> 00:39:21,111
Ok? Belo pequeno nome.
Colocamos aqui.

615
00:39:21,111 --> 00:39:25,593
Esse cara, sua API pública é...
o seu model vai ser...

616
00:39:25,594 --> 00:39:29,193
um Photographer, ok?
Então você vai especifica esse

617
00:39:29,193 --> 00:39:32,753
photographer, temos que importar
Photographer, ok?

618
00:39:32,753 --> 00:39:38,253
E você especifica esse photographer e ele vai
mostrar todas as fotos por esse

619
00:39:38,253 --> 00:39:42,741
fotógrafo no mapa.
Todo mundo entende esse

620
00:39:42,741 --> 00:39:47,880
top-down que estamos fazendo aqui?
Nós também vamos precisar da mesma coisa

621
00:39:47,880 --> 00:39:52,718
que tínhamos no outro que é: eu preciso de
uma versão de demo do

622
00:39:52,718 --> 00:39:56,207
PhotographerMapViewController.
Vamos chamá-lo de

623
00:39:56,207 --> 00:39:59,966
DemoPhotographerMapViewController.
E isso vai apenas abrir aquele

624
00:39:59,966 --> 00:40:03,238
demo document e setar o
managedObjectContext.

625
00:40:03,238 --> 00:40:09,078
Ok? Então vamos ter isso também.
E no nosso storyboard, vamos lá setar

626
00:40:09,078 --> 00:40:15,000
as classes para essas coisas. Então
esse aqui vai ser um

627
00:40:15,000 --> 00:40:19,561
DemoPhotographerMapViewController.

628
00:40:19,561 --> 00:40:25,153
E esse bem aqui vai ser o
PhotosByPhotographer...

629
00:40:25,153 --> 00:40:27,527
...MapViewController.

630
00:40:27,527 --> 00:40:30,741
E esse aqui vai ser nosso
ImageViewController.

631
00:40:30,741 --> 00:40:33,965
Ok?
Todo mundo bem até agora?

632
00:40:33,965 --> 00:40:36,722
Nós estamos tipo fazendo
um top-down.

633
00:40:36,722 --> 00:40:40,232
Primeiro dissemos como vai ser a UI
e agora vamos implementar

634
00:40:40,232 --> 00:40:41,344
todas essas classes.
Ok?

635
00:40:41,344 --> 00:40:45,774
Agora, a primeira que vamos
implementar é MapViewController,

636
00:40:45,775 --> 00:40:49,087
bem aqui.
E uma coisa que nós vamos fazer agora

637
00:40:49,087 --> 00:40:53,122
com esse MapViewController é: nós podemos
colocar um MapView em cada um deles.

638
00:40:53,122 --> 00:40:57,362
Vamos fazer isso. Vamos aqui embaixo,
arrastmos um MapView.

639
00:40:57,362 --> 00:41:00,475
É igual qualquer outra view.
nós arrastamos aqui.

640
00:41:00,475 --> 00:41:04,089
Temos que fazer a dança do scroll
aqui para colocá-lo.

641
00:41:04,089 --> 00:41:07,324
E então vamos também
linká-lo.

642
00:41:07,324 --> 00:41:12,725
Vou no manual aqui...
Vou até o MapViewController...

643
00:41:12,725 --> 00:41:17,671
oops, .h porque é público.
E eu vou apenas CTRL + arrastar, ok?

644
00:41:17,671 --> 00:41:20,581
para linká-lo.
Oops...

645
00:41:20,581 --> 00:41:24,650
As vezes é mais fácil fazer
essas coisas assim.

646
00:41:24,651 --> 00:41:33,412
Então vamos fazer isso. Parece que
não funcionou. Ok, por que não funcionou?

647
00:41:34,488 --> 00:41:41,368
Alguma idéia do porquê não funcionou?
Não...

648
00:41:41,368 --> 00:41:47,969
isso é interessante. Ok, bom,
não estou certo.

649
00:41:47,970 --> 00:41:51,248
Talvez tenha funcionado,
mas não está mostrando.

650
00:41:51,248 --> 00:41:55,846
Oh, é. Funcionou, ok?
Ele está conectado. Não sei porque

651
00:41:55,846 --> 00:42:00,556
esse carinha não está mostrando.
Mas, de qualquer modo, vamos fazer a mesma coisa

652
00:42:00,556 --> 00:42:04,045
nesse aqui... vamos aqui,
pego um MapView... coloco aqui...

653
00:42:04,045 --> 00:42:09,862
(reclamando do espaço de novo)

654
00:42:09,862 --> 00:42:12,797
Ok.
Vamos aqui em cima....

655
00:42:12,797 --> 00:42:17,910
Certo, agora eu volto,
coloco isso aqui de novo.

656
00:42:17,910 --> 00:42:24,131
Vamos CTRL... conectou.
E esse apareceu aqui.

657
00:42:24,132 --> 00:42:26,641
Hm, interessante.
Certo, bom. ÊNIRRÚ.

658
00:42:26,641 --> 00:42:29,387
Agora nós temos
essas duas subclasses de MapViewController.

659
00:42:29,387 --> 00:42:33,232
O DemoPhotographer e o
PhotsByPhotographer.

660
00:42:33,232 --> 00:42:37,152
E eles estão todos conectados.
Então eles estão prontos de um certo modo.

661
00:42:37,152 --> 00:42:40,354
Agora, nós ainda não fizemos
um segue entre eles dois.

662
00:42:40,355 --> 00:42:44,492
Ou segue entre esses.
Nós vamos fazer isso mais pro fim.

663
00:42:44,492 --> 00:42:47,650
Ok.
Como nós vamos fazer esse

664
00:42:47,650 --> 00:42:51,788
MapViewController funcionar?
E o que nós precisamos para qualqer MapView

665
00:42:51,788 --> 00:42:53,934
é essa lista de annotations.
Certo?

666
00:42:53,934 --> 00:42:59,301
E o que vão ser essas annotations?
Bom, em um dos nossos ViewController,

667
00:42:59,301 --> 00:43:04,410
vai ser um monte de fotógrafos.
E no outro vai ser um monte

668
00:43:04,410 --> 00:43:07,407
de fotos. Então eu vou
transformar os objetos de

669
00:43:07,407 --> 00:43:10,976
Photo e Photographer aqui,
nossos objetos do Core Data,

670
00:43:10,976 --> 00:43:13,726
eu vou transformá-los
em MKAnnotations.

671
00:43:13,726 --> 00:43:17,396
O que eu tenho que fazer
para fazer isso? Alguém sabe?

672
00:43:17,396 --> 00:43:19,926
Algum voluntário?

673
00:43:19,926 --> 00:43:23,206
>> EIN?

674
00:43:23,206 --> 00:43:27,921
Eu tenho que implementar
esses métodos no MKAnnotation protocol.

675
00:43:27,921 --> 00:43:30,786
E eu vou fazer isso usando
uma category, ok?

676
00:43:30,786 --> 00:43:35,316
Assim como usamos categorias para fazer
essa coisa do Flickr e essas coisas.

677
00:43:35,316 --> 00:43:37,986
Ok? Então eu vou aqui em cima,
File, New File.

678
00:43:37,986 --> 00:43:41,166
E eu vou criar
uma categoria.

679
00:43:41,166 --> 00:43:46,837
E vamos criar uma para Photographer.
Vou chamar essa categoria de

680
00:43:46,837 --> 00:43:48,800
MKAnnotationCategory.
Ok?

681
00:43:48,800 --> 00:43:53,246
Porque é isso que ela faz.
Ela vai adicionar os métodos

682
00:43:53,246 --> 00:43:58,425
do MKAnnotation protocol no Photographer.
E eu vou fazer a mesma coisa aqui

683
00:43:58,425 --> 00:44:01,357
para Photo.
Ok?

684
00:44:01,358 --> 00:44:09,359
Então aqui nós temos essas 2 categorias.
Agora a coisa principal que ambas

685
00:44:09,359 --> 00:44:15,460
essas categorias querem fazer é:
elas querem implementar MKAnnotation.

686
00:44:15,460 --> 00:44:21,398
Então nós vamos dizer logo de cara
para ambas, que elas implementam

687
00:44:21,398 --> 00:44:25,474
MKAnnotation.
Certo?

688
00:44:25,474 --> 00:44:32,902
Fazemos a mesma coisa com essa aqui.
Certo. Agora nós temos essas categorias.

689
00:44:32,902 --> 00:44:37,860
Mas agora nós temos que
fazer a implementação dessas coisas.

690
00:44:37,860 --> 00:44:42,154
Agora, Photos são um pouco mais fácil
de implementar do que Photographer, porque

691
00:44:42,154 --> 00:44:46,801
Photo na verdade já implementa algo do
MKAnnotation, certo? Title e subtitle.

692
00:44:46,801 --> 00:44:51,085
Photo tem um título e um subtítulo se
vocês lembrarem no nosso data model aqui

693
00:44:51,085 --> 00:44:54,485
para Photo. Olhem,
ela já tem um title e subtitle.

694
00:44:54,485 --> 00:45:00,455
Excelente. Mas ele vai precisar
de algumas outras coisas aqui para implementar

695
00:45:00,455 --> 00:45:04,326
o MKAnnotation.
O mais importante, aquele coordinate. Ele precisa

696
00:45:04,326 --> 00:45:08,857
saber a latitude e longitude.
Então vamos adicionar alguns atributos aqui

697
00:45:08,857 --> 00:45:13,708
para latitude e longitude.
E como estou aqui, vou adicionar

698
00:45:13,708 --> 00:45:19,101
mais um que é thumbnail...
vou chamá-lo de

699
00:45:19,101 --> 00:45:20,930
thumbnailURLString.
Ok?

700
00:45:20,930 --> 00:45:24,990
E vamos setar os tipos aqui.
É uma string, esse thumbnailURL.

701
00:45:24,990 --> 00:45:29,569
Porque eu quero mostrar um thumbnail
da foto naquele callout no mapa.

702
00:45:29,569 --> 00:45:33,679
Então vou guardar isso no database
também, apenas a URL.

703
00:45:33,679 --> 00:45:38,177
Não a imagem, como vocês terão que fazer.
E então a latitude e longitude

704
00:45:38,177 --> 00:45:41,341
são doubles.
Então eu vou setá-los para doubles.

705
00:45:41,341 --> 00:45:44,496
Ok?
Todo mundo entende isso que eu fiz aqui?

706
00:45:44,496 --> 00:45:47,313
Então agora eu vou regerar isso,
ok?

707
00:45:47,313 --> 00:45:49,648
Create ManagedObject Subclass.
Aqui.

708
00:45:49,648 --> 00:45:52,612
Me pergunta se eu quero substituir.
Digo que sim.

709
00:45:52,612 --> 00:45:56,279
Substituo. Regerou.
Agora, minha Photo

710
00:45:56,279 --> 00:46:00,545
tem latitude e longitude
e a URLString.

711
00:46:00,545 --> 00:46:07,409
Eu preciso ir para o meu photoLoader
aqui. Esse método que cria uma Photo

712
00:46:07,409 --> 00:46:12,253
do Flicker e adiciona
as configurações dessa coisa aqui.

713
00:46:12,253 --> 00:46:18,729
[ditando código]

714
00:46:18,730 --> 00:46:27,056
[ditando código]

715
00:46:27,056 --> 00:46:36,854
[ditando código]

716
00:46:36,854 --> 00:46:44,285
[ditando código]

717
00:46:44,285 --> 00:46:50,052
Espero que isso tudo seja familiar para vocês.
E vou pegar a absoluteString da URL.

718
00:46:50,052 --> 00:46:53,628
Ok? Porque não posso armazenar URLs
no database

719
00:46:53,628 --> 00:46:57,922
então vou armazenar como uma string.
Eu converto de volta depois.

720
00:46:57,922 --> 00:47:03,063
Então agora minhas fotos sabem
como pegar a latitude e longitude

721
00:47:03,063 --> 00:47:06,331
a partir da informação do Flickr
e também a thumbnail URL.

722
00:47:06,332 --> 00:47:11,704
Todo mundo bem com isso?
Agora que isso é verdade, eu posso voltar

723
00:47:11,704 --> 00:47:18,744
aqui para o meu negócio do MKAnnotation
e implementar a coisa que eu não implementei

724
00:47:18,744 --> 00:47:25,402
que é CLLocationCoordinate2D coordinate.
E esse é bem fácil de implementar.

725
00:47:25,402 --> 00:47:33,542
Nós vamos dizer apenas...
[ditando código]

726
00:47:33,542 --> 00:47:40,252
[ditando código]

727
00:47:40,252 --> 00:47:47,292
[ditando código]
Lembrem-se que no database eles são

728
00:47:47,292 --> 00:47:53,740
armazenados como NSNumber então eu preciso
convertê-los, voltar para coordenadas.

729
00:47:53,740 --> 00:47:57,881
Ok?
Agora Photo. O objeto Photo é agora

730
00:47:57,881 --> 00:48:01,588
uma MKAnnotation.
Ele implementa o MKAnnotation.

731
00:48:01,588 --> 00:48:05,614
Eu posso agora colocá-lo na lista
de anotações do MapView.

732
00:48:05,614 --> 00:48:09,293
E pins vão aparecer onde cada foto estiver.
Entendem?

733
00:48:09,293 --> 00:48:12,935
É simples assim. Agora,
vamos fazer a mesma coisa para

734
00:48:12,935 --> 00:48:14,405
Photographer.
Ok?

735
00:48:14,405 --> 00:48:17,774
Photographers... um pouco mais
de implementação aqui.

736
00:48:17,774 --> 00:48:21,929
Nós temos que fazer o title.
Então eu vou retornar o nome

737
00:48:21,929 --> 00:48:27,828
do fotógrafo como title.
Parece um título razoável para

738
00:48:27,828 --> 00:48:32,448
uma anotação.
E então o subtitle, vamos retornar

739
00:48:32,448 --> 00:48:36,083
[ditando código]

740
00:48:36,083 --> 00:48:40,480
[ditando código]

741
00:48:40,480 --> 00:48:43,870
E vamos arrumar isso aqui...

742
00:48:43,870 --> 00:48:47,883
e aqui...
(...)

743
00:48:47,883 --> 00:48:51,134
Aqui vamos nós.

744
00:48:51,134 --> 00:48:56,023
Esse é um bom subtitle,
apenas quantas fotos tem lá.

745
00:48:56,023 --> 00:49:00,687
E também temos coordinate.
[ditando código]

746
00:49:00,688 --> 00:49:04,738
Qual é a coordenada de um fotógrafo?

747
00:49:04,738 --> 00:49:08,671
Bom, vamos simplesmente pegar
uma das fotos dele e usar isso.

748
00:49:08,671 --> 00:49:14,462
Não importa qual e, na verdade,
nós podemos apenas dizer

749
00:49:14,462 --> 00:49:19,216
return [self.photos anyObject]. Esse é
um método em NSSet. -coordinate.

750
00:49:19,217 --> 00:49:22,606
Ok?
E eu vou provavelmente quero importar

751
00:49:22,606 --> 00:49:27,907
apenas para ter certeza Photo+MKAnnotation,
ok? Porque estamos chamando

752
00:49:27,907 --> 00:49:31,107
esse método aqui, ok?
Faz sentido?

753
00:49:31,107 --> 00:49:35,616
Any Object?
É. Para ter o propósito de aleatório.

754
00:49:35,616 --> 00:49:40,368
E o NSSet não é incomum na verdade
de queremos pegar "anyObject" como um

755
00:49:40,368 --> 00:49:44,256
objeto representativo.
É por isso que esse método

756
00:49:44,256 --> 00:49:47,486
está lá.
Certo, então agora o Photographer também

757
00:49:47,486 --> 00:49:51,603
é um MKAnnotation. Ele pode ser jogado
na lista de coisas de um MKMapView.

758
00:49:51,603 --> 00:49:53,824
Ok? Agora que temos photos
e Photographers

759
00:49:53,824 --> 00:49:58,861
sendo MKAnnotations, é na verdade
bem fácil implementarmos nosso

760
00:49:58,861 --> 00:50:04,074
MapViewController.
Deixa eu ver se não esqueci nada no caminho...

761
00:50:04,074 --> 00:50:10,061
Acho que não... não, ok.
A primeira coisa que nosso MapViewController

762
00:50:10,061 --> 00:50:17,137
vai fazer é: no seu viewDidLoad
ele vai setar ele mesmo como

763
00:50:17,137 --> 00:50:21,645
o delegate do Map View.
E aqui temos um warning.

764
00:50:21,645 --> 00:50:26,684
Por que temos um warning?
Porque nós precisamos dizer que

765
00:50:26,684 --> 00:50:31,231
nosso MapViewController implementa o
MKMapViewDelegate protocol.

766
00:50:31,231 --> 00:50:34,501
Ok?
E eu vou anunciar isso publicamente.

767
00:50:34,501 --> 00:50:36,590
Certo?
É isso.

768
00:50:36,590 --> 00:50:41,947
Agora esse warning vai embora.
Próximo, nós precisamos fazer essa coisa

769
00:50:41,947 --> 00:50:46,367
onde nós damos a AnnotationView
para uma dada Annotation.

770
00:50:46,367 --> 00:50:52,726
Esse é esse método de delegate aqui,
mapView:viewForAnnotation e eu vou

771
00:50:52,726 --> 00:50:58,789
ter uma estática aqui. NSString *reuseID...
e eu vou chamá-la, hm,

772
00:50:58,789 --> 00:51:04,724
MapViewController.
E então eu vou dizer

773
00:51:04,724 --> 00:51:07,331
[ditando código]

774
00:51:07,331 --> 00:51:11,986
Aqui está aquele dequeue,
onde usamos o reuseId.

775
00:51:11,986 --> 00:51:17,352
Se nós não pudermos reusar uma

776
00:51:17,352 --> 00:51:21,392
Então vou criar uma. Então vou fizer
[ditando código]

777
00:51:21,392 --> 00:51:25,463
[ditando código]
E nós vamos usar essa annotation bem aqui,

778
00:51:25,463 --> 00:51:29,870
o argumento.
E claro o mesmo reuseIdentifier para que

779
00:51:29,870 --> 00:51:34,159
da próxima vez, se ela for reusada,
nós vamos usar a certa.

780
00:51:34,159 --> 00:51:36,766
Então agora temos que configurar
essa view, ok?

781
00:51:36,766 --> 00:51:39,509
Então temos essa view
e nós precisamos configurá-la.

782
00:51:39,509 --> 00:51:42,314
Uma coisa que eu quero que
essa view mostre um callout.

783
00:51:42,314 --> 00:51:44,950
Certo?
Aquela barrinha preta que aparece

784
00:51:44,950 --> 00:51:49,297
quando você toca nela. Eu quero que isso seja
verdade. Então eu vou dizer canShowCallout = YES.

785
00:51:49,297 --> 00:51:53,716
Então aquela coisinha vai aparecer.
Eu também quero ter o accessoryView

786
00:51:53,716 --> 00:51:58,828
da direita do callout ser um UIButton.
[ditando código]

787
00:51:58,828 --> 00:52:03,333
Esse é o botãozinho redondo
com a setinha.

788
00:52:03,333 --> 00:52:06,866
Sabem do que estou falando?
Um botãozinho azul.

789
00:52:06,867 --> 00:52:10,005
Mas aqui temos uma coisa interessante.

790
00:52:10,005 --> 00:52:15,681
Eu só vou ter esse accessory na direita do
callout se o delegate implementar aquele

791
00:52:15,681 --> 00:52:21,140
lance do tap que eu estava falando.
Certo? Lembram-se que eu falei que se você

792
00:52:21,140 --> 00:52:25,937
colocar um UIControl aqui ele faria isso?
Eu vou dizer, se self.mapView...

793
00:52:25,937 --> 00:52:31,498
eu não preciso disso, vamos dizer apenas
mapView, porque esse é o argumento bem aqui,

794
00:52:31,498 --> 00:52:35,194
certo?
[ditando código]

795
00:52:35,194 --> 00:52:39,557
[ditando código]

796
00:52:39,558 --> 00:52:42,412
Ok?
Se ele implementar aquele método mágico

797
00:52:42,412 --> 00:52:45,880
então vou colocá-lo lá.
Caso contrário eu nem vou colocar

798
00:52:45,880 --> 00:52:50,339
aquele coisinha porque se o delegate
não pode tratá-lo, então por que eu colocaria?

799
00:52:50,339 --> 00:52:54,620
E a outra coisa que vou fazer, vou colocar
uma ImageView do outro lado.

800
00:52:54,621 --> 00:53:02,008
Então vou dizer
[ditando código]

801
00:53:02,008 --> 00:53:06,767
[ditando código]
E infelizmente eu vou ter que colocar

802
00:53:06,767 --> 00:53:12,134
magic numbers aqui.
E isso... eu nunca tive uma boa resposta

803
00:53:12,134 --> 00:53:16,315
de qual o modo certo de fazer isso.

804
00:53:16,316 --> 00:53:22,007
Mas qualquer que seja o tamanho
que você colocar aqui, ele vai fazer

805
00:53:22,007 --> 00:53:27,485
aquela coisa preta alta o suficiente
para caber. E 30x30 fica melhor,

806
00:53:27,485 --> 00:53:30,450
ok? Ele não sabe
como se organizar com tamanhos

807
00:53:30,450 --> 00:53:35,435
arbitrários disso aqui. Então você tem
meio que escolher um tamanho. Eu acho que

808
00:53:35,435 --> 00:53:40,755
isso é ruim, porque se eles algum dia
redesenharem essa barra preta para algo diferente,

809
00:53:40,755 --> 00:53:43,346
então 30x30 pode não ficar bom.
Mas obviamente

810
00:53:43,346 --> 00:53:47,537
eles provavelmente não vão fazer isso
em breve por causa disso, mas

811
00:53:47,537 --> 00:53:52,124
existe um número mágico que vocês
provavelmente vão ter que ter nas suas

812
00:53:52,124 --> 00:53:52,826
aplicações se vocês usarem mapas.
Ok?

813
00:53:52,826 --> 00:53:55,176
E então nós vamos
retornar a view.

814
00:53:55,176 --> 00:53:59,208
Agora, uma das coisas que está acontecendo
aqui, se isso for desenfileirado e nós

815
00:53:59,208 --> 00:54:03,630
reusarmos, então é melhor nós setarmos
essa imageView, esse accessory da esquerda,

816
00:54:03,630 --> 00:54:09,031
é melhor setarmos ele para nil.
Caso contrário ele vai ter a última

817
00:54:09,031 --> 00:54:16,082
imagem quando ele for desenfileirado.
Então eu vou me assegurara aqui

818
00:54:16,082 --> 00:54:23,100
e dizer
[ditando código]

819
00:54:23,100 --> 00:54:28,052
[ditando código]
Daí eu vou dizer...

820
00:54:28,052 --> 00:54:32,670
[ditando código]

821
00:54:32,670 --> 00:54:39,156
E eu tenho a imagem aqui e vou dizer
[ditando código]

822
00:54:39,156 --> 00:54:42,813
[ditando código]

823
00:54:42,813 --> 00:54:49,309
Então aqui eu estou resentando isso para nil.
O que eu fiz errado aqui? UIImage.

824
00:54:49,309 --> 00:54:54,500
Eu estou setando isso para nil...
se eu acabei de criá-lo eu não preciso fazer isso,

825
00:54:54,500 --> 00:54:58,950
mas se eu estou reusando, então eu preciso.
Ok? E por que eu estou fazendo o

826
00:54:58,950 --> 00:55:02,621
isKindOfClass aqui?
Bom, eu posso ter um MapView onde eu tenho

827
00:55:02,621 --> 00:55:08,249
diferentes tipos de callouts para diferentes
tipos de coisas e então eu só quero fazer

828
00:55:08,249 --> 00:55:12,834
esse resetting para isso.
Isso me dá flexibilidade de mudar

829
00:55:12,834 --> 00:55:16,292
isso aqui e ainda assim
ter isso aqui em baixo funcionando.

830
00:55:16,292 --> 00:55:20,235
Isso é meio que opcional,
vocês não precisariam necessariamente fazer isso.

831
00:55:20,235 --> 00:55:24,299
Certo, então é isso.
Agora, a outra coisa que eu quero fazer

832
00:55:24,299 --> 00:55:25,140
é a imagem.
Ok?

833
00:55:25,140 --> 00:55:29,734
Eu quero ter esse thumbanil na esquerda.
Bom, o modo que eu vou fazer isso

834
00:55:29,734 --> 00:55:33,176
é: eu vou documentar meu 
MapViewController.

835
00:55:33,176 --> 00:55:42,974
Eu vou dizer: vai mostrar um thumbnail
no accessory esquerdo

836
00:55:42,974 --> 00:55:52,307
do callour se a annotation
implementar o método "thumbnail"

837
00:55:52,307 --> 00:55:57,950
retornando uma UIImage.
Aqui eu vou usar introspecção.

838
00:55:57,950 --> 00:56:03,746
Ele vai adicionar uma feature desse modo
e eu estou documentando. As pessoas geralmente

839
00:56:03,746 --> 00:56:08,806
não fazem isso, sem problemas. E eu vou
fazer minhas Photos fazerem isso, então

840
00:56:08,806 --> 00:56:14,786
eu vou colocar aqui no
Photo+Flickr.

841
00:56:14,786 --> 00:56:18,526
- (UIImage *)thumbnail.
Ok?

842
00:56:18,526 --> 00:56:24,533
Porque é algo do Flickr da onde vem esse thumbnail.
[ditando código]

843
00:56:24,533 --> 00:56:30,236
E eu vou retornar um UIImage...
Quer saber? Mudei de idéia.

844
00:56:30,236 --> 00:56:35,299
Eu não vou colocar isso no Flickr.
E a razão que eu não vou colocar

845
00:56:35,299 --> 00:56:39,973
no Flickr é: eu gosto dessa categoria
do Flickr estando no meu model.

846
00:56:39,974 --> 00:56:43,457
Eu não quero colocar um UIImage ali.

847
00:56:43,457 --> 00:56:48,845
Mas esse aqui já está no meu controller.
Ele já não está no meu model.

848
00:56:48,845 --> 00:56:53,420
Porque esse negócio inteiro de
annotation é sobre UI.

849
00:56:53,420 --> 00:56:57,074
Ok?
Então na verdade mudei de idéia aqui

850
00:56:57,074 --> 00:57:02,690
e vou colocá-lo bem aqui.
Esse aqui. E vou dizer

851
00:57:02,690 --> 00:57:10,914
[ditando código]

852
00:57:10,914 --> 00:57:23,704
[ditando código]
Ok?

853
00:57:23,704 --> 00:57:28,416
Ficou em uma linha só.
(claro! que código feio!)

854
00:57:28,416 --> 00:57:33,437
Agora, isso bloqueia a main thread.
Isso bloqueia. Então é melhor eu colocar

855
00:57:33,437 --> 00:57:37,671
um comentário aqui dizendo: bloqueia.
Ok? Dessa forma, qualquer um chamando isso

856
00:57:37,671 --> 00:57:42,664
sabe que deve colocar em outra thread.
Ok? Agora e sobre o Photographer?

857
00:57:42,664 --> 00:57:46,029
Nós queremos fazer a mesma coisa ali.
Por que não lá?

858
00:57:46,029 --> 00:57:50,763
Vamos colocar a mesma coisa aqui.
Vamos colocar o thumbnail aqui.

859
00:57:50,763 --> 00:57:58,014
E nós vamos fazer a mesma coisa.
Vamos dizer... [ditando código]

860
00:57:58,014 --> 00:57:59,619
Okay? 
Faz sentido?

861
00:57:59,619 --> 00:58:03,394
Ele pode retornar nil,
mas isso é ok.

862
00:58:03,394 --> 00:58:08,644
Nós vamos tratar isso.
Certo, então de volta ao

863
00:58:08,644 --> 00:58:11,635
MapViewController.
Agora que eu tenho uma maneira de

864
00:58:11,635 --> 00:58:16,612
obter o thumbnail, se a annotation
responder pra esse negócio, então

865
00:58:16,612 --> 00:58:19,023
eu posso mostrá-lo.
E eu vou fazer isso nesse método,

866
00:58:19,023 --> 00:58:23,468
mapViewDidSelectAnnotationView.
Podem ver que tem um monte de

867
00:58:23,468 --> 00:58:27,027
métodos de delegate de MapView aqui.
Eu vou escolher esse bem aqui

868
00:58:27,027 --> 00:58:30,693
selectAnnotationView.
Esse acontece quando o pin

869
00:58:30,694 --> 00:58:32,206
é tocado.
Ok?

870
00:58:32,206 --> 00:58:37,824
Então, quando aquele pin for tocado, o que
eu vou fazer é: eu vou ver se meu

871
00:58:37,824 --> 00:58:43,237
accessoryView da esquerda do callout.
Na verdade eu vou copy and paste

872
00:58:43,237 --> 00:58:44,656
esse código aqui.
Ok?

873
00:58:44,656 --> 00:58:53,842
Se caccessoryView da esquerda do callout
for uma UIImage, daí eu vou dizer

874
00:58:53,842 --> 00:59:03,157
[ditando código]
Ok? Daí eu vou setar a imagem para ser

875
00:59:03,157 --> 00:59:13,257
esse thumbnail que vai ser...
[ditando código]

876
00:59:13,258 --> 00:59:16,417
Ok?
E performSelector é como nós nos livramos

877
00:59:16,417 --> 00:59:21,391
do compilador checando isso.
Porque nós estamos fazendo introspecção.

878
00:59:21,391 --> 00:59:23,604
Então nós sabemos o que nós
estamos fazendo (gamb...). Ok?

879
00:59:23,604 --> 00:59:25,579
Faz sentido o que fizemos aqui?

880
00:59:25,579 --> 00:59:28,790
Então isso só acontece quando
nós tocamos o pin.

881
00:59:28,790 --> 00:59:32,072
E isso está bloqueando
a main thread, o que é ruim.

882
00:59:32,072 --> 00:59:34,904
Então vocês provavelmente
querem usar o GCD aqui.

883
00:59:34,904 --> 00:59:37,912
Certo?
Todo mundo entende isso?

884
00:59:37,912 --> 00:59:41,508
Similar com o que fizemos
com TableViewCells. Ok?

885
00:59:41,508 --> 00:59:44,593
Agora, nós temos esse
MapViewController básico.

886
00:59:44,593 --> 00:59:47,753
É bem genérico e bem simples.

887
00:59:47,753 --> 00:59:53,273
Agora vamos subir um nível e implementar,
por exemplo, o do Photographer.

888
00:59:53,273 --> 00:59:58,357
Vamos achar ele...
ele meio que ficou separado do seu .m.

889
00:59:58,357 --> 01:00:01,756
Aqui.
Esse aqui-- nós setamos um managedObjectContext

890
01:00:01,756 --> 01:00:07,300
e nós queremos carregar com
todos os photographers nesse

891
01:00:07,300 --> 01:00:11,113
managedObjectContext.
Isso é bem fácil de fazer.

892
01:00:11,113 --> 01:00:16,460
Nós sabemos como fazer isso.
Vamos sobrescrever nosso setter do

893
01:00:16,460 --> 01:00:22,069
managedObjectContext, e quando for setado,
esses managedObjectContext,

894
01:00:22,069 --> 01:00:24,993
eu vou chamar um método
[self reload], ok?

895
01:00:24,993 --> 01:00:29,484
E esse reload... talvez seja até um método
que eu queira torná-lo público, porque

896
01:00:29,484 --> 01:00:34,176
nós não estamos falando sobre TableViews aqui
que tem um NSFetchedResultsController,

897
01:00:34,176 --> 01:00:38,370
toda vez que o database é alterado,
eles estão updateando automaticamente.

898
01:00:38,370 --> 01:00:42,876
Agora, nós talvez queremos adicionar
essa funcionalidade para essa classe,

899
01:00:42,876 --> 01:00:46,669
mas não temos isso agora.
Então se algo mudar no database

900
01:00:46,669 --> 01:00:50,254
alguém vai ter que nos dizer para
olharmos no database.

901
01:00:50,254 --> 01:00:54,330
Então é isso que é esse reload.
Por enquanto vamos deixar esse

902
01:00:54,330 --> 01:00:57,432
método público e deixar as pessoas
fazerem isso.

903
01:00:57,432 --> 01:01:02,388
A outra coisa é: eu não vou fazer um reload
toda vez que isso for setado. Eu vou fazer isso

904
01:01:02,388 --> 01:01:05,983
apenas se eu tiver na tela.
Caso contrário eu vou

905
01:01:05,983 --> 01:01:11,948
esperar pra reload no meu viewDidLoad.
Ok? Porque-- eu poderia talvez esperar

906
01:01:11,948 --> 01:01:18,512
até o meu viewWillAppear.
E a razão para isso é relacionada

907
01:01:18,512 --> 01:01:26,218
a eficiência, mas também quando nós
estivermos aqui, meu mapView pode nem estar setado.

908
01:01:26,218 --> 01:01:29,956
Então eu nem posso fazer nada ainda.
Porque isso pode ser chamado em um

909
01:01:29,956 --> 01:01:33,730
prepareForSegue ou algo assim.
Geralmente é bem mais seguro

910
01:01:33,730 --> 01:01:36,124
esperar até o viewDidLoad para
carregar sua UI a partir do seu model.

911
01:01:36,124 --> 01:01:39,070
Ok? E novamente,
poderia ser o viewWillAppear.

912
01:01:39,070 --> 01:01:42,856
Porque daí esperaríamos até termos
certeza que iríamos aparecer na tela

913
01:01:42,856 --> 01:01:45,602
para fazer isso.
Então, o que vai acontecer nesse reload?

914
01:01:45,602 --> 01:01:51,463
Esse é realmente o coração dessa classe.
E vai ser assim:

915
01:01:51,464 --> 01:01:57,812
Vamos ter um fetch request.


916
01:01:57,812 --> 01:02:03,434
Eu tenho um fetch request
igual a (...)

917
01:02:03,434 --> 01:02:09,361
(...)

918
01:02:09,361 --> 01:02:12,531
Importar o Core Data... eu não acho que...
Pode ser...

919
01:02:12,531 --> 01:02:16,971
Talvez seja esse o problema,
por que não...

920
01:02:16,971 --> 01:02:18,451
Talvez seja isso...
É.

921
01:02:18,451 --> 01:02:19,651
Aqui vamos nós.
Ok.

922
01:02:19,651 --> 01:02:23,681
Estou surpreso que isso
não foi importado antes.

923
01:02:23,681 --> 01:02:25,161
Mas de qualuer forma...
Certo.

924
01:02:25,161 --> 01:02:27,131
De volta aqui.
Certo.

925
01:02:27,132 --> 01:02:32,522
Então o fetch request.
Vamos fazer um fetch request aqui por photographer

926
01:02:32,522 --> 01:02:37,167
e o predicado do request.
Eu vou mostrar um predicado interessante

927
01:02:37,167 --> 01:02:42,991
aqui, que nós não falamos antes.


928
01:02:42,991 --> 01:02:48,980
Esse é: eu vou pegar todos os fotógrafos
que tiraram mais que duas fotos.

929
01:02:48,980 --> 01:02:54,116
Ok? Alguém tem alguma idéia de
como faríamos isso?

930
01:02:54,116 --> 01:02:58,461
Na verdade, bem fácil.
Vocês podem fazer isso.

931
01:02:58,461 --> 01:03:04,853
Ok? Existe esse pequeno símbolo
@ especial aqui que vai te dizer

932
01:03:04,853 --> 01:03:08,880
o count desse set
e podemos (???)

933
01:03:08,880 --> 01:03:15,250
Isso só vai trazer os fotógrafos
cujo count de fotos seja maior que 2.

934
01:03:15,250 --> 01:03:16,711
Certo?
JUST FOR FUN!

935
01:03:16,711 --> 01:03:18,912
Certo.
Agora vamos pegar as fotos.

936
01:03:18,912 --> 01:03:24,871
[ditando código]
Nós vamos executar esse fetch request.

937
01:03:24,871 --> 01:03:29,373
Por questões de demo
nós não vamos tratar o erro

938
01:03:29,373 --> 01:03:35,812
embora vocês deveriam no seu código, daí
vou falar pro MapView

939
01:03:35,812 --> 01:03:39,163
remover todas as annotations existentes.
Ok?

940
01:03:39,163 --> 01:03:43,041
E daí adicionei todas essas fotos
como as novas annotations.

941
01:03:43,041 --> 01:03:47,547
Ok? E lembrem-se, esse array de fotos,
são Photos, mas são também

942
01:03:47,547 --> 01:03:50,127
MKAnnotations.
Então podemos fazer isso também.

943
01:03:50,127 --> 01:03:53,223
Certo?
Vamos seguir e também centralizar

944
01:03:53,223 --> 01:03:56,954
o mapa aqui.
Na verdade, tá bom aqui.

945
01:03:56,954 --> 01:04:00,641
Nós não vamos ver isso
para os fotógrafos.

946
01:04:00,641 --> 01:04:07,342
(...)

947
01:04:07,342 --> 01:04:09,954
(...)
Ok?

948
01:04:09,954 --> 01:04:15,501
Todo mundo bem com isso?
Entenderam essas 5 linhas de código?

949
01:04:15,501 --> 01:04:19,216
É isso. Nós temos
uma implementação incompleta aqui.

950
01:04:19,216 --> 01:04:20,867
Por que isso?
Reload...

951
01:04:20,867 --> 01:04:25,353
ManagedObjectContext...
Na verdade, não acho que isso seja verdade.

952
01:04:25,353 --> 01:04:26,402
Certo.
Ok.

953
01:04:26,402 --> 01:04:30,863
Então isso foi o Photographers,
e vamos então fazer o DemoPhotographers

954
01:04:30,863 --> 01:04:34,403
e daí nós conseguiremos
carregar essas coisas.

955
01:04:34,404 --> 01:04:40,178
O DemoPhotographer é na verdade
tão similar com esse carinha do

956
01:04:40,178 --> 01:04:43,622
DemoPhotographerCoreData que eu vou
copy e paste o código.

957
01:04:43,622 --> 01:04:49,153
E sempre que você fizer copy and paste
de código você sabe que provavalmente você vai

958
01:04:49,153 --> 01:04:55,273
arrumar encrenca. Então eu provavelmente
deveria refatorar isso em alguma outra classe.

959
01:04:55,273 --> 01:05:00,570
Mas ao invés, eu vou apenas copy and paste.
Porque é quase

960
01:05:00,570 --> 01:05:04,496
exatamente idêntico.
A única diferença é que nós não temos

961
01:05:04,496 --> 01:05:10,281
um Refresh Controller no nosso mapa então
podemos nos livrar disso e também quando nós

962
01:05:10,281 --> 01:05:15,799
acabarmos de carregar o databse, nós precisamos
chamar o reload, certo? Essa é a

963
01:05:15,799 --> 01:05:22,118
única diferença. Precisamos importar
algumas coisas como FlickrFetcher e também

964
01:05:22,118 --> 01:05:26,462
Photo+Flicker.
Ok? Todo mundo entende esse código?

965
01:05:26,462 --> 01:05:29,397
Isso está apenas abrindo o documento.

966
01:05:29,397 --> 01:05:34,143
E quando está aberto, ele vai
carregar as fotos e daí

967
01:05:34,143 --> 01:05:35,153
ele vai dar reload.
Ok?

968
01:05:35,153 --> 01:05:38,398
Faz sentido?
Acho que podemos rodar aqui.

969
01:05:38,398 --> 01:05:43,570
Eu não sei se eu esqueci alguma coisa.
Agora, nós ainda não fiemos o segue.

970
01:05:43,571 --> 01:05:49,086
Mas espero que podemos rodar. 
Vamos ver se funciona... (não funcionou...)

971
01:05:49,086 --> 01:05:55,560
Certo, acho que acabou nosso tempo.
Bom, vamos ter que continuar

972
01:05:55,560 --> 01:05:58,179
na próxima aula.
Se tiverem perguntas, estarei aqui.

973
01:05:58,179 --> 01:06:03,879
Visite nosso site:
www.centraldosapps.com
