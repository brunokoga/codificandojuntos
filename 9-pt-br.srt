1
00:00:00,459 --> 00:00:08,439
Legendas em português por:
Bruno Koga - koga@centraldosapps.com


2
00:00:08,459 --> 00:00:11,029
Bem-vindos à aula


3
00:00:11,049 --> 00:00:18,089
número 9... eu acho que é a 9...
da aula CS193P do inverno de 2013.


4
00:00:18,109 --> 00:00:21,719
Hoje nós vamos falar sobre dois assuntos,
mas primeiro eu vou


5
00:00:21,739 --> 00:00:24,219
dar um update sobre o ciclo de vida
do ViewController.


6
00:00:24,239 --> 00:00:27,300
É apenas algo
que não ficou muito claro


7
00:00:27,320 --> 00:00:30,089
nos slides passados
e eu queria elucidar isso


8
00:00:30,109 --> 00:00:33,339
para vocês e eu vou colocar
no homework, para que vocês


9
00:00:33,359 --> 00:00:35,839
realmente entendam isso. Daí
nós vamos falar sobre


10
00:00:35,859 --> 00:00:38,339
ScrollView e TableView, ok?
Esses são os dois tópicos


11
00:00:38,359 --> 00:00:41,339
para hoje e então eu vou fazer
uma demo que tem tanto uma ScrollView


12
00:00:41,359 --> 00:00:43,839
como uma TableView nela, certo?
E o homework será


13
00:00:43,859 --> 00:00:49,339
ScrollViews e TableViews.
Então esse é o update.


14
00:00:49,359 --> 00:00:53,800
E o update é sobre quando que você pode,
no ciclo de vida do ViewController


15
00:00:53,820 --> 00:00:59,529
fazer updates relacionados
à geometria. Ok? Nos slides,


16
00:00:59,549 --> 00:01:03,449
o que eu disse é que vocês não
poderiam fazer updates relacionados


17
00:01:03,469 --> 00:01:08,019
à geometria no viewDidLoad, ok?
E eu espero que vocês entendam


18
00:01:08,039 --> 00:01:10,269
porque vocês não podem fazer
updates geométricos no viewDidLoad,


19
00:01:10,289 --> 00:01:13,900
porque embora no viewDidLoad todos
os seus outlets estejam configurados,


20
00:01:13,920 --> 00:01:17,480
os bounds do self.view ainda não foram
configurados, ok? Lembrem-se,


21
00:01:17,500 --> 00:01:20,760
que o self.view.bounds serão ajustados
baseados em se você está


22
00:01:20,780 --> 00:01:24,169
em portrait no iPhone 4, landscape
no iPhone 5, coisas assim, ele vai ser


23
00:01:24,189 --> 00:01:27,449
ajustado a isso. E isso ainda
não aconteceu. E o que


24
00:01:27,469 --> 00:01:30,199
eu disse nos slides foi que,
bom o viewWillAppear é onde


25
00:01:30,219 --> 00:01:32,599
vocês querem esperar para fazer
qualquer coisa relacionada à geometria,


26
00:01:32,619 --> 00:01:35,480
porque os seus bounds serão setados
no viewWillAppear. Isso não é verdade


27
00:01:35,500 --> 00:01:39,069
se você tiver o autolayout ligado. Ok?
E vocês vão ter,


28
00:01:39,089 --> 00:01:42,129
porque no iOS 6... nós vamos
usar o autolayout.


29
00:01:42,149 --> 00:01:45,379
Esse é o modo que nós
vamos fazer nosso layout,


30
00:01:45,399 --> 00:01:50,359
nosso layout automático.
No autolayout, o lugar que as coisas relacionadas


31
00:01:50,379 --> 00:01:53,439
ao self.view e todas as contraints
são aplicadas é no


32
00:01:53,459 --> 00:01:55,519
viewDidLayoutSubviews.


33
00:01:55,539 --> 00:01:57,650
Ok? Agora, isso foi mostrado
nos slides. Existem esses


34
00:01:57,670 --> 00:01:58,650
viewWillLayoutSubviews, viewDidLayoutSubviews.


35
00:01:58,670 --> 00:02:03,789
viewWillLayoutSubviews é enviado
ao seu controller antes de todas


36
00:02:03,809 --> 00:02:07,230
essas constraints serem aplicadas.
viewDidLayoutSubviews é enviado


37
00:02:07,250 --> 00:02:11,199
logo após. Ok? Então você
tem as oportunidades no ciclo de vida


38
00:02:11,219 --> 00:02:14,169
do ViewController para se envolver.
Agora, no seu homework,


39
00:02:14,189 --> 00:02:17,190
eu vou pedir para vocês fazerem
certas coisas com o


40
00:02:17,210 --> 00:02:21,769
ScrollView, dependendo de qual for
os bounds do ScrollView.


41
00:02:21,789 --> 00:02:24,929
Então, vocês vão ter que esperar
até o viewDidLayoutSubviews para


42
00:02:24,949 --> 00:02:27,820
fazer essas coisas, porque o
bounds do ScrollView não será setado


43
00:02:27,840 --> 00:02:32,100
até então. Ok? Era esse o update.
Alguma pergunta sobre isso?


44
00:02:32,120 --> 00:02:37,510
Ok, ótimo. Então, ScrollView.
Eu tenho uma pequena demo


45
00:02:37,530 --> 00:02:38,760
rodando aqui sobre o que é
ScrollView.


46
00:02:38,780 --> 00:02:43,609
ScrollView é apenas algo que
permite temos tipo


47
00:02:43,629 --> 00:02:46,329
uma janela sobre uma coisa bem grande,
que não caberia na tela,


48
00:02:46,349 --> 00:02:49,559
ou uma quantidade muito grande
de dados. Aqui estamos olhando


49
00:02:49,579 --> 00:02:55,499
algumas ações, algumas notícias
sobre ações, coisas assim. Sabe,


50
00:02:55,519 --> 00:02:58,749
não conseguiríamos fazer acber todos esses
dados, então colocamos em ScrollViews


51
00:02:58,769 --> 00:03:01,749
e nós podemos scrollar. O que essa demo,
que eu vou rodar


52
00:03:01,769 --> 00:03:05,109
novamente, está tentando mostrar a vocês
é que a ScrollView não é


53
00:03:05,129 --> 00:03:08,879
tão simples assim. Uma janela
em uma grande coisa. Você pode


54
00:03:08,899 --> 00:03:12,149
na verdade, ter ScrollViews dentro
de ScrollViews, certo? Então


55
00:03:12,169 --> 00:03:14,249
aqui vocês pode ver que estamos
scrollando para frente e para trás, na


56
00:03:14,269 --> 00:03:17,469
página principal, e então nós scrollamos
para cima e para baixo. Mesma coisa aqui.


57
00:03:17,489 --> 00:03:20,219
Nós temos uma ScrollView lá embaixo
que scrolla pros lados


58
00:03:20,239 --> 00:03:22,969
para ver diferentes notícias.
E então para cima e para baixo


59
00:03:22,989 --> 00:03:25,219
para podermos ler. Para
passar pelas notícias.


60
00:03:25,239 --> 00:03:27,719
Vocês vêem o que estou dizendo?
Então ScrollView é um objeto


61
00:03:27,739 --> 00:03:30,719
realmente poderoso que pode ser
aninhado dentro dele mesmo.


62
00:03:30,739 --> 00:03:33,469
Agora, dito isso. Tudo que eu vou
ensinar a vocês hoje


63
00:03:33,489 --> 00:03:36,219
é o uso básico do ScrollView.
E eu não vou


64
00:03:36,239 --> 00:03:39,219
pedir no homework de vocês
nada além do


65
00:03:39,239 --> 00:03:42,469
uso básico. Mas esse é um caso
onde eu preciso apenas


66
00:03:42,489 --> 00:03:44,969
fazer com que vocês saibam que algo
pode acontecer. Que alguma coisa


67
00:03:44,989 --> 00:03:47,719
é capaz de fazer algo, para que no futuro
vocês saibam que vocês podem


68
00:03:47,739 --> 00:03:50,469
ir investigar como fazer tudo isso.
Mas hoje nós vamos ver


69
00:03:50,489 --> 00:03:52,469
apenas o básico de ScrollView.
Então,


70
00:03:52,489 --> 00:03:54,629
para entender ScrollView,
precisamos entender


71
00:03:54,649 --> 00:03:59,529
addSubview:, ok? Quando você adiciona
uma subview em uma


72
00:03:59,549 --> 00:04:03,029
view normal, essa view branca.
Eu vou adicionar essa pequena view


73
00:04:03,049 --> 00:04:06,999
com o logo da Stanford. Provavelmente
é uma UIImageView. É muito simples


74
00:04:07,019 --> 00:04:10,249
para adicionar uma subview. Vocês apenas
seta o frame que diz aonde


75
00:04:10,269 --> 00:04:13,249
vocês quere que essa coisa apareça
na sua superview e então vocês


76
00:04:13,269 --> 00:04:14,249
a adicionam na sua superview.


77
00:04:14,269 --> 00:04:16,769
Ok? Espero que todos entendam isso.
Quando vocês estão arrastndo coisas pra dentro


78
00:04:16,789 --> 00:04:19,519
pelo Xcode, é isso
o que vocês estão fazendo.


79
00:04:19,539 --> 00:04:22,519
Vocês estão arrastando pra dentro,
adicionando a subview na view que vocês


80
00:04:22,539 --> 00:04:25,269
estão soltando. E então vocês setam o frame
redimensionando os marcadores.


81
00:04:25,289 --> 00:04:27,769
Ok? E então vocês setam
as constraints para que esse frame


82
00:04:27,789 --> 00:04:32,609
seja ajustado quando as coisa smudarem.
Então, uma ScrollView


83
00:04:32,629 --> 00:04:36,230
é similar, mas ela gerencia o caso
em que você tem uma


84
00:04:36,250 --> 00:04:39,809
view grande? Então eu tenho essa
imensa foto da Stanford. Se eu apenas


85
00:04:39,829 --> 00:04:43,309
fizer um addsubview normal, eu não vou
conseguir ver muito dela.


86
00:04:43,329 --> 00:04:46,309
Agora, é, eu poderia espremê-la,
mas daí eu mal iria conseguir


87
00:04:46,329 --> 00:04:49,309
dizer que existem construções lá, ok?
Entõa eu não quero isso,


88
00:04:49,329 --> 00:04:52,809
eu quero meio que poder scrollar
por ela. Então,


89
00:04:52,829 --> 00:04:57,129
na ScrollView, quando nós adicionamos subviews,
primeiro nós criamos essa grande área


90
00:04:57,149 --> 00:05:01,139
chamada de ContentArea, ok?
Esse é apenas um grande


91
00:05:01,159 --> 00:05:04,179
espaço que nós criamos
setando a property contentSize


92
00:05:04,199 --> 00:05:07,639
da ScrollView. Ok? Então aqui
eu setei contentSize para


93
00:05:07,659 --> 00:05:11,590
3000x2000. 3000 de largura,
2000 de altura. Criei esse


94
00:05:11,610 --> 00:05:16,340
grande espaço aberto. Agora, quando eu
adiciono subviews, eu estou adicionando-as


95
00:05:16,360 --> 00:05:21,290
para esse espaço aberto. Então aqui
eu coloquei o logo da Stanford em (2700,100).


96
00:05:21,310 --> 00:05:25,100
E o logo é 120 x 180, ok?
Então essa é a posição dele


97
00:05:25,120 --> 00:05:28,499
nesse grande espaço.
E eu poderia colocar


98
00:05:28,519 --> 00:05:30,799
outra view. Mesmo aquela view
gigantesta eu conseguiria colocar aí.


99
00:05:30,819 --> 00:05:35,449
Eu coloquei ela em (50,100)
e ela tem 2500 de largura


100
00:05:35,469 --> 00:05:38,709
e 1600 de altura, ok? Então eu coloquei
tdas essas coisas


101
00:05:38,729 --> 00:05:42,600
no espaço aberto. E é isso.
Isso é tudo que você precisa


102
00:05:42,620 --> 00:05:45,350
fazer para fazer a ScrollView funcionar.
Porque agora a ScrollView vai


103
00:05:45,370 --> 00:05:48,350
conseguir se mover e olhar para--
como uma pequena


104
00:05:48,370 --> 00:05:52,780
janela que está se movendo
nesse espaço com conteúdo. Isso


105
00:05:52,800 --> 00:05:56,379
faz sentido? É realmente muito simples.
Mas, incrivelmente, as pessoas


106
00:05:56,399 --> 00:05:59,049
não entendem esse primeiro passo,
que nós setamos esse contentSize,


107
00:05:59,069 --> 00:06:02,249
fazemos esse grande espaço
e então nós estamos apenas


108
00:06:02,269 --> 00:06:06,149
movendo uma janela por ele, ok?
E, claro, vocês podem colocar


109
00:06:06,169 --> 00:06:09,249
as subviews em qualquer lugar
que vocês queiram


110
00:06:09,269 --> 00:06:12,949
setando o frame delas. Então, aqui,
eu estou setando o frame do


111
00:06:12,969 --> 00:06:15,859
logo da Stanford um pouco mais
para cima e eu estou setando


112
00:06:15,879 --> 00:06:19,859
o frame da grande coisa para mover
para a origem da área de conteúdo.


113
00:06:19,879 --> 00:06:23,379
Vêem que eu movi para (0,0)?
Vocês conseguem ver que


114
00:06:23,399 --> 00:06:27,189
o frame dessa view é (0, 0, 2500, 1600)?
Eu movi ela


115
00:06:27,209 --> 00:06:30,059
para lá. E então eu não preciso
desse espaço em branco extra,


116
00:06:30,079 --> 00:06:33,699
então talvez eu mude o contentSize
dizendo: contentSize =...


117
00:06:33,719 --> 00:06:37,379
ao mesmo tamanho da maior view.
Então eu o encolhi.


118
00:06:37,399 --> 00:06:40,129
Certo? Então agora
a scrollview vai olhar apenas


119
00:06:40,149 --> 00:06:44,199
para esse espaço menor.
Pergunta?
looking around in that smaller space. Question?


120
00:06:44,219 --> 00:06:45,339
>> [Estudante perguntando]


121
00:06:45,359 --> 00:06:48,589
>> Ok, a pergunta é: é uma boa idéia
"hard code" o tamanho


122
00:06:48,609 --> 00:06:51,589
dos retângulos? E a pergunta é:
depende do que


123
00:06:51,609 --> 00:06:54,839
está lá. Ok? Se for uma foto
que você sabe que


124
00:06:54,859 --> 00:06:57,839
vai ter um certo tamanho, então você poderia,
mas geralmente não.


125
00:06:57,859 --> 00:07:00,839
Não é uma boa idéia "hard code" nada.
E vocês verão na nossa demo


126
00:07:00,859 --> 00:07:03,589
que nós vamos ter um negócio
que mostra uma view e


127
00:07:03,609 --> 00:07:06,589
scrolla nela. E essa imagem
poderá ser de qualquer tamanho. Ok?


128
00:07:06,609 --> 00:07:09,089
E vocês verão como nós
vamos determinar isso. Mas, de qualquer forma,


129
00:07:09,109 --> 00:07:12,279
uma vez que eu encolhi a área de conteúdo,
eu continuo apenas


130
00:07:12,299 --> 00:07:16,230
olhando ao redor. Então vocês podem ver
o "S" ali. Eu ainda tenho


131
00:07:16,250 --> 00:07:20,089
apenas uma janela que está se movendo, ok?
Agora, uma coisa que


132
00:07:20,109 --> 00:07:25,079
vocês podem querer saber é:
onde está minha windows atual


133
00:07:25,099 --> 00:07:29,579
na minha área de conteúdo? Ok? Onde ela está?
E vocês podem descobrir onde


134
00:07:29,599 --> 00:07:33,999
ela está no sistema de coordenadas
da sua área de conteúdo. Não no


135
00:07:34,019 --> 00:07:37,439
sistema de coordenadas das views--
das subviews da


136
00:07:37,459 --> 00:07:40,779
ScrollView, mas da área de conteúdo,
usando essa property


137
00:07:40,799 --> 00:07:44,980
contentOffset. Ela é um CGPoint
e ela vai retornar o offset


138
00:07:45,000 --> 00:07:50,600
do X e do Y disso. Ok?
E ainda mais detalhado, vocês podem,


139
00:07:50,620 --> 00:07:53,549
na verdade, descobrir qual é
a área visível.


140
00:07:53,569 --> 00:07:58,359
Ok? Tanto a localização
quando a largura e a altura. Isso é apenas--


141
00:07:58,379 --> 00:08:01,540
E as pessoas meio que não entendem isso também.
Então vamos


142
00:08:01,560 --> 00:08:04,819
aprofundar. Isso é apenas
o bounds da ScrollView.


143
00:08:04,839 --> 00:08:10,199
Lembram-se que o bounds
é um retângulo para essa view


144
00:08:10,219 --> 00:08:14,149
no seu próprio sistema de coordenadas?
E a ScrollView move a sua origem.


145
00:08:14,169 --> 00:08:17,439
Geralmente a origem é (0,0) na maioria
das views, mas a ScrollView


146
00:08:17,459 --> 00:08:21,319
move sua origem para onde quer que
ela esteja na sua


147
00:08:21,339 --> 00:08:24,679
área de conteúdo. Então se vocês
perguntarem para a ScrollView qual é seu bounds,


148
00:08:24,699 --> 00:08:28,230
vocês vão descobrir qual é
o retângulo no sistema de


149
00:08:28,250 --> 00:08:31,449
coordenadas da área de conteúdo
que está atualmente visível.


150
00:08:31,469 --> 00:08:36,090
Ok? Agora e se vocês quiserem
essa mesma coisa no sistema


151
00:08:36,110 --> 00:08:39,689
de coordenadas de uam view?
Tipo, eu quero saber, nesse retângulo que


152
00:08:39,709 --> 00:08:43,720
está visível, que parte da
imagem da Stanford está visível?


153
00:08:43,740 --> 00:08:46,939
Ok? Então eu ainda pego
o bounds da ScrollView mas eu chamo


154
00:08:46,959 --> 00:08:50,869
esse método convertRectToView:
e isso converte


155
00:08:50,889 --> 00:08:54,909
o bounds da ScrollView para o
sistema de coordenadas da subview.


156
00:08:54,929 --> 00:08:57,749
E esse convertRectToView
pode ser usado não só pela ScrollView,


157
00:08:57,769 --> 00:09:00,720
mas sempre que você quiser. Se você tem
um retângulo e duas views que


158
00:09:00,740 --> 00:09:04,119
estão na mesma hierarquia de views,
então ele pode converter


159
00:09:04,139 --> 00:09:07,950
de um systema de coordenadas
para outro. Ok? Pergunta.


160
00:09:07,970 --> 00:09:12,950
>> [Estudante pergutando]


161
00:09:12,970 --> 00:09:15,200
>> Então a pergunta é:
as dimensões do bounds não são


162
00:09:15,220 --> 00:09:17,619
sempre constantes? Depende.
Sua ScrollView pode mudar,


163
00:09:17,639 --> 00:09:20,590
porque você a autorotacionou.
Isso mudaria os seus bounds.


164
00:09:20,610 --> 00:09:24,539
Certo? Também, quando você faz a conversão
para outra view,


165
00:09:24,559 --> 00:09:28,230
essa outra view poderia ser escalada
ou rotacionada ou-- vê o que


166
00:09:28,250 --> 00:09:30,609
estou dizendo? Então o seu bounds
poderia-- convertendo do


167
00:09:30,629 --> 00:09:33,309
bounds da ScrollView para ele,
poderia causar translação, escalonamento,


168
00:09:33,329 --> 00:09:37,700
todos os tipos de atividade (não entendi nada...).
Então a resposta é "não" nos dois casos.


169
00:09:37,720 --> 00:09:40,509
O bounds poderia mudar conforme é
auto-rotacionado


170
00:09:40,529 --> 00:09:43,340
e coisas assim. E o bounds definitivamente
pode não ser o mesmo


171
00:09:43,360 --> 00:09:48,249
quando você o converte para
outra view. Então, como você


172
00:09:48,269 --> 00:09:52,309
cria uma ScrollView? Você arrasta
no Xcode. Esse é o caso


173
00:09:52,329 --> 00:09:55,309
99% das vezes. Apenas arrasta
do Xcode. Claro que vocês podem


174
00:09:55,329 --> 00:09:57,559
alloc initWithFrame,
como qualquer outra view,


175
00:09:57,579 --> 00:10:00,309
mas na maioria dos casos, você vai arrastar.
É possível arrastar outra view


176
00:10:00,329 --> 00:10:03,059
pro seu Storyboard e dizer,
no menu "Editor",


177
00:10:03,079 --> 00:10:06,409
"embed in ScrollView". Mas nós não
fazemos muito isso


178
00:10:06,429 --> 00:10:10,080
porque nós geralmente gerenciamos
as subviews da área de conteúdo


179
00:10:10,100 --> 00:10:14,739
de uma ScrollView em código,
chamando o addSubview. Vocês verão isso


180
00:10:14,759 --> 00:10:19,859
na demo. Então, uma vez que
vocês tem o "contentArea" configurado,


181
00:10:19,879 --> 00:10:23,239
então vocês apenas adicionam
sua grande view. Essa view que é


182
00:10:23,259 --> 00:10:25,350
muito grande, como uma imagem grande,
com o addSubview.


183
00:10:25,370 --> 00:10:28,409
Ok? Seta o frame, addSubview.
Ela será colocada


184
00:10:28,429 --> 00:10:32,980
no contentArea com esse frame.
Bem direto.


185
00:10:33,000 --> 00:10:36,029
Não esqueçam de setar o contentSize.
Se vocês não setarem


186
00:10:36,049 --> 00:10:39,029
o contentSize e ele for (0,0),
sua ScrollView não vai


187
00:10:39,049 --> 00:10:41,649
mostrar nada. Ela só vai scrollar
por essa contentArea,


188
00:10:41,669 --> 00:10:45,609
ok? O que vocês vão ver serão as subviews
que vocês adicionam


189
00:10:45,629 --> 00:10:49,119
na contentArea. Mas se a contentArea
não é grande, certo, se ela for


190
00:10:49,139 --> 00:10:51,619
(0,0), então vocês não
vão ver nada.


191
00:10:51,639 --> 00:10:53,869
Então não esqueçam de setar isso.
Isso é algo fundamental


192
00:10:53,889 --> 00:10:59,049
para ativá-la.
Vocês podem-- ok, na maior parte


193
00:10:59,069 --> 00:11:02,129
do tempo, scrollar - nós chamamos
isso de panning - é feito


194
00:11:02,149 --> 00:11:04,330
com o dedo. Alguém apenas
move o seu dedo,


195
00:11:04,350 --> 00:11:07,139
scrolla pela view obviamente.
Mas você pode fazer isso


196
00:11:07,159 --> 00:11:10,710
programaticamente dizendo
eu quero que esse retângulo no


197
00:11:10,730 --> 00:11:14,789
sistema de coordenadas da contentArea
fique visível. E se você


198
00:11:14,809 --> 00:11:17,539
fizer isso, a ScrollView vai fazer
com que o máximo desse retângulo


199
00:11:17,559 --> 00:11:20,289
fique visível. Ok? Ele pode ser
maior do que o bounds,


200
00:11:20,309 --> 00:11:23,289
então ela não vai poder
deixá-lo visível por completo, mas ela vai


201
00:11:23,309 --> 00:11:25,019
tentar deixar a maior parte visível possível.


202
00:11:25,039 --> 00:11:27,799
E tem várias outras coisas
que vocês podem fazer


203
00:11:27,819 --> 00:11:30,299
em uma ScrollView. Vocês podem
travar o scrolling, então ela apenas


204
00:11:30,319 --> 00:11:32,549
scrollaria verticalmente ou apenas
horizontalmente. É assim que vocês


205
00:11:32,569 --> 00:11:34,509
aninham ScrollViews e scrollam
dentro de ScrollViews.


206
00:11:34,529 --> 00:11:37,090
É assim que ela sabe o que está acontecendo
em termos de gestures


207
00:11:37,110 --> 00:11:40,090
e coisas assim. Existem estilos
diferentes. Vocês podem mostrar


208
00:11:40,110 --> 00:11:42,819
scrollbars, o que vocês supostamente
fazem quando a scrollview aparece


209
00:11:42,839 --> 00:11:45,819
pela primeira vez na tela, para que o usuário
saiba que eles podem scrollar


210
00:11:45,839 --> 00:11:49,069
para ver mais. Tem muita coisa,
eu não conseguo cobrir


211
00:11:49,089 --> 00:11:52,319
tudo hoje. Mas uma coisa que eu quero
falar sobre ScrollView é


212
00:11:52,339 --> 00:11:55,319
zooming. Vocês podem "pan" com o dedo,
mas vocês podem também


213
00:11:55,339 --> 00:11:58,019
fazer "pinch" em uma ScrollView. Certo?
Pinch to zoom. Vocês tem visto


214
00:11:58,039 --> 00:12:02,299
isso em apps por todos os lugares,
e o lance sobre zooming,


215
00:12:02,319 --> 00:12:04,699
algumas coisas para considerar:
1) isso vai afetar o seu


216
00:12:04,719 --> 00:12:07,659
contentSize. As pessoas também não
entendem isso muito bem.


217
00:12:07,679 --> 00:12:12,249
O contentSize, 3000 x 2000,
se você fizer um zoom, ele vai


218
00:12:12,269 --> 00:12:14,909
deixar o seu contentSize maior,
para que ele possa deixar


219
00:12:14,929 --> 00:12:18,929
a view maior, certo?
Porque você está fazendo um zoom.


220
00:12:18,949 --> 00:12:22,439
Entõa isso vai afetar o contentSize.
Então... vocês vão ver


221
00:12:22,459 --> 00:12:25,199
na demo, quando nós mudamos
a view que estamos mostrando,


222
00:12:25,219 --> 00:12:29,789
nós vamos setar o nosso zoom
de volta para 1.0.


223
00:12:29,809 --> 00:12:32,710
Para que quando nós setarmos
o contentSize, estaremos setando


224
00:12:32,730 --> 00:12:35,720
para a coisa certa. Ok?
Se nós não setarmos o zoom de volta pra 1.0,


225
00:12:35,740 --> 00:12:38,220
e começar setando o contentSize,
nós vamos, sabe,


226
00:12:38,240 --> 00:12:42,980
estar setando ele pra alguma coisa
quando o zoom estiver em 1.0.


227
00:12:43,000 --> 00:12:45,609
Existem duas cosias que vocês
tem que fazer para que o zoom funcione.


228
00:12:45,629 --> 00:12:48,879
Ok? Uma é: você tem que setar
a escala máxima e mínima


229
00:12:48,899 --> 00:12:51,720
do zoom. Se você não setar,
os defaults são 0, o que


230
00:12:51,740 --> 00:12:52,759
significa sem zoom.


231
00:12:52,779 --> 00:12:56,999
Ok? Então vocês tem que setar.
Então, minimumZoomScale igual a 0.5


232
00:12:57,019 --> 00:12:59,399
significa que vocês vão permitir
que essa coisa dê zoom out para metade


233
00:12:59,419 --> 00:13:03,970
do seu tamanho, ok? maximumZoomScale de 2.0
signficaria que você vai permitir


234
00:13:03,990 --> 00:13:07,470
que ela faça zoom up até o dobro
do seu tamanho.


235
00:13:07,490 --> 00:13:10,220
Ok? Mas você precisa setar
esses dois números.


236
00:13:10,240 --> 00:13:12,720
Obviamente o máximo precisa ser
maior do que


237
00:13:12,740 --> 00:13:15,720
o mínimo. E se você setar
o zoomingScale, o usuário não vai


238
00:13:15,740 --> 00:13:18,970
conseguir fazer o pinch, a propósito,
fora. Quero dizer, apenas se você setá-lo


239
00:13:18,990 --> 00:13:21,220
vai manter dentro dos bounds.
Dentro dos limites.


240
00:13:21,240 --> 00:13:24,470
A outra coisa que você precisa
fazer é que você precisa


241
00:13:24,490 --> 00:13:26,970
usar o delegate. Nós falamos sobre
o data source, que nós


242
00:13:26,990 --> 00:13:30,220
setamos na collection view, para que
nós pudéssemos pegar os nossos dados


243
00:13:30,240 --> 00:13:32,720
na nossa collection view.
E nós dissemos que a collection view


244
00:13:32,740 --> 00:13:35,720
também tem um delegate, mas nós não
falamos realmente sobre o que


245
00:13:35,740 --> 00:13:38,470
isso pode fazer. Bom, a ScrollView
também tem um delegate. E nós


246
00:13:38,490 --> 00:13:40,970
vamos falar mais sobre o que
o delegate da ScrollView pode fazer,


247
00:13:40,990 --> 00:13:43,720
do que nós falamos sobre o da collection view.
E uma das coisas


248
00:13:43,740 --> 00:13:46,470
que o delegate da ScrollView
tem que fazer se você quiser


249
00:13:46,490 --> 00:13:49,970
zoom é que ele tem que dizer
qual das views que estão


250
00:13:49,990 --> 00:13:52,720
na contentArea-- qual das coisas
que você fez addSubview são


251
00:13:52,740 --> 00:13:55,970
as que você quer escalar?
Quando vocÊ faz zoom, você não pode escalar todas.


252
00:13:55,990 --> 00:13:59,220
Se você quiser escalar todas,
você tem que colocá-las em uma


253
00:13:59,240 --> 00:14:02,220
outra view e fazer dela
a view que você quer escalar. Vocês vêem


254
00:14:02,240 --> 00:14:05,470
o que eu estou dizendo? Então
você tem que escolher uma view,


255
00:14:05,490 --> 00:14:07,970
uma das subviews na contentArea
vai ser escalada pelo


256
00:14:07,990 --> 00:14:11,119
pinching, e esse método
é enviado ao delegate


257
00:14:11,139 --> 00:14:14,419
pela ScrollView. E ele diz:
que view você quer que eu faça?


258
00:14:14,439 --> 00:14:17,169
E se você não implementar esse método,
ela não pode fazer zoom, porque


259
00:14:17,189 --> 00:14:20,419
ela não sabe qual das views,
mesmo que ela só tenha uma,


260
00:14:20,439 --> 00:14:23,669
você poderia argumentar que se ela
tiver apenas uma ela deveria usá-la.


261
00:14:23,689 --> 00:14:26,669
Mas ela não usa. Então você tem
que implementar isso. E nós vamos ver


262
00:14:26,689 --> 00:14:29,669
isso na demo também. Agora,
novamente, a maioria dos zooms acontecem


263
00:14:29,689 --> 00:14:32,169
por pinching, mas vocês podem
fazer programaticamente também.


264
00:14:32,189 --> 00:14:34,919
Existe uma property zoomScale,
que é a mesma-- que está


265
00:14:34,939 --> 00:14:38,480
no mesmo sistema de números
do minimum e maximumZoomScale,


266
00:14:38,500 --> 00:14:41,609
certo? Então se você quiser
fazer o zoom duas vezes maior,


267
00:14:41,629 --> 00:14:44,919
você setaria o zoomScale
para 20. E vocês também podem


268
00:14:44,939 --> 00:14:48,059
fazer o zoom setando retângulos
e isso é mais fácil de ver em


269
00:14:48,079 --> 00:14:51,429
uma imagem, então aqui eu estou
na zoomScale 1.2. Então eu estou


270
00:14:51,449 --> 00:14:54,939
um pouco maior do que o tamanho
normal da view. Aqui eu vou voltar


271
00:14:54,959 --> 00:14:57,689
para o tamanho normal. Vocês podem ver
que ela não cabe


272
00:14:57,709 --> 00:15:02,549
nos meus bounds. Voltando para 1.2, ok?
Agora eu vou pegar


273
00:15:02,569 --> 00:15:07,559
um retângulo-- o nariz desse
pequeno gárgula, e eu vou


274
00:15:07,579 --> 00:15:11,239
dizer para fazer o zoom para esse retângulo.
E ele vai tentar encaixar


275
00:15:11,259 --> 00:15:14,609
o máximo desse rect que ele puder.
Vêem como eu fiz isso? Então ele fez o zoom


276
00:15:14,629 --> 00:15:17,439
na ScrollView para encaixar.
Agora ele não vai além do que


277
00:15:17,459 --> 00:15:20,340
o minimum ou maximumZoomScale,
mas nesse caso, ele foi capaz de


278
00:15:20,360 --> 00:15:21,989
encaixar o retângulo inteiro.
E funciona ao contrário também.


279
00:15:22,009 --> 00:15:25,489
Se você tiver um retângulo grande
e você disser para fazer o zoom para esse rect,


280
00:15:25,509 --> 00:15:28,959
ele vai fazê-lo menor para caber, ok?
Então esses são os dois modos


281
00:15:28,979 --> 00:15:31,090
que vocês podem fazer zoom programaticamente.
Vocês podem fazer tanto o zoom para


282
00:15:31,110 --> 00:15:34,639
caber um retângulo ou setar
o zoomScale diretamente.


283
00:15:34,659 --> 00:15:36,639
Pergunta.


284
00:15:36,659 --> 00:15:38,389
>> [Estudante perguntando]


285
00:15:38,409 --> 00:15:40,639
[estudante perguntando]


286
00:15:40,659 --> 00:15:42,209
[estudante perguntando]


287
00:15:42,229 --> 00:15:45,919
>> Ótima pergunta.
A pergunta é: todos esses pinching


288
00:15:45,939 --> 00:15:49,029
e panning, você te que setar
gestures para fazer


289
00:15:49,049 --> 00:15:51,529
isso? E a resposta é: não,
você não precisa. A ScrollView


290
00:15:51,549 --> 00:15:55,279
adiciona esses gesture recognizers
nela mesma, então


291
00:15:55,299 --> 00:15:59,079
você não precisa fazer nada disso.
Na verdade, para desligar isso,


292
00:15:59,099 --> 00:16:01,579
você teria que ir e parar
os gesture handlers,


293
00:16:01,599 --> 00:16:04,309
de serem reconhecidos.
Os gestures regognizers dela de reconhecerem.


294
00:16:04,329 --> 00:16:06,369
Existem vários e vários métodos
de delegates. Oh, desculpe,


295
00:16:06,389 --> 00:16:09,109
pergunta.


296
00:16:09,129 --> 00:16:11,109
>> [Estudante perguntando]


297
00:16:11,129 --> 00:16:17,999
[estudante pergutando]


298
00:16:18,019 --> 00:16:20,249
[estudante pergutando]


299
00:16:20,269 --> 00:16:23,249
>> Certo, então a pergunta é:
no Google Maps, quando eu


300
00:16:23,269 --> 00:16:25,999
faço o pinch, o contentSize deve ser
grande. É a Terra inteira, certo?


301
00:16:26,019 --> 00:16:29,249
Mas, claro que não é.
Existem maneiras


302
00:16:29,269 --> 00:16:31,749
na ScrollView para fazer tiling,
ok? Então você tem


303
00:16:31,769 --> 00:16:34,749
uma contentArea que tem
um certo tamanho e quando você faz o zoom


304
00:16:34,769 --> 00:16:37,249
em uma certa quantidade, ele troca
o conteúdo que está sendo zoomado (?).


305
00:16:37,269 --> 00:16:40,589
Com mais, sabe, zoomado na Terra.
Isso está bem


306
00:16:40,609 --> 00:16:44,100
além desse curso.
Zooming e panning


307
00:16:44,120 --> 00:16:46,850
em cima de algo que seja
basicamente infinito


308
00:16:46,870 --> 00:16:50,789
É algo completamente diferente,
que nós não vamos


309
00:16:50,809 --> 00:16:54,480
falar sobre, ok? Certo,
então os métodos de delegate,


310
00:16:54,500 --> 00:16:55,809
existem vários outros métodos de delegate.


311
00:16:55,829 --> 00:16:59,230
E eles estão basicamente dizendo a vocês
o que está acontecendo, mas existe


312
00:16:59,250 --> 00:17:00,889
um método de delegate muito


313
00:17:00,909 --> 00:17:05,289
interessante chamado scrollViewDidEndZooming:
withView:atScale. Ele é enviado


314
00:17:05,309 --> 00:17:09,129
para o delegate da sua ScrollView
quando o user estava fazendo pinch


315
00:17:09,149 --> 00:17:13,999
e ele terminou. Ok?
Agora por que você vai querer isso? Por que


316
00:17:14,019 --> 00:17:18,059
quando a ScrollView faz pinch, quando ela
faz zoom, ela está escalando


317
00:17:18,079 --> 00:17:23,619
os bits, ok? Ela está pegando os
bits ali e, sabe,


318
00:17:23,639 --> 00:17:26,809
esticando-os ou compactando-os.
Então ele fica


319
00:17:26,829 --> 00:17:31,869
todo granulado se você fizer
o muito zoom, ok? Então, quando acabou,


320
00:17:31,889 --> 00:17:36,220
você pode querer redesenhar a sua view
em uma resolução maior. Isso faz


321
00:17:36,240 --> 00:17:38,680
sentido? Para deixá-lo mais
nítido. É por isso que,


322
00:17:38,700 --> 00:17:41,139
vocês verão, fazendo zoom in e out,
vai meio que deixar granulado conforme


323
00:17:41,159 --> 00:17:44,999
você faz o zzom. Mas quando você solta,
oh! Ele ficou mais nítido. Bom,


324
00:17:45,019 --> 00:17:47,499
isso é porque ele redesenhou, ok?
Algumas views, como imageView,


325
00:17:47,519 --> 00:17:50,879
fazem isso automaticamente para você.
Você faz zoom in e out e você tem,


326
00:17:50,899 --> 00:17:53,470
se tiverem mais bits disponíveis na imagem,
ela vai usá-los para


327
00:17:53,490 --> 00:17:56,470
mostrar mais detalhes. Se não tiver,
então vai ficar


328
00:17:56,490 --> 00:17:57,639
granulado, ok?


329
00:17:57,659 --> 00:18:00,519
Então, esse é um
método interessante. Vocês não precisam


330
00:18:00,539 --> 00:18:02,769
disso para o homework, mas esse é
um método de delegate


331
00:18:02,789 --> 00:18:06,819
interessante. Então, é isso
para ScrollView. Vocês podem olhar


332
00:18:06,839 --> 00:18:09,069
todos os métodos de delegates e coisas assim
por si próprios, mas esse é o básico,


333
00:18:09,089 --> 00:18:12,379
ok? ContentArea, adicione as subviews,
se você quiser zoom,


334
00:18:12,399 --> 00:18:14,849
você tem que implementar
esse método de delegate. Então


335
00:18:14,869 --> 00:18:20,210
isso é o básico, ok? A próxima coisa
que eu uqero falar sobre é


336
00:18:20,230 --> 00:18:23,489
TableView, talvez a classe
mais importante em todo iOS,


337
00:18:23,509 --> 00:18:26,399
de um certo modo, porque
muita informação que é apresentada


338
00:18:26,419 --> 00:18:28,359
no iPhone é apresentada em tabelas.


339
00:18:28,379 --> 00:18:32,159
Ok? Então, uma TableView é uma
tabela unidimensional. Eu vou


340
00:18:32,179 --> 00:18:34,909
mostrar a vocês algumas fotos dela.
É muito similar a


341
00:18:34,929 --> 00:18:37,629
UICollectionView. É por isso que eu digo:
essa semana o homework de vocês


342
00:18:37,649 --> 00:18:39,879
vai ser bem mais fácil,
porque vocês já entendem


343
00:18:39,899 --> 00:18:41,779
UICollectionView e UITableView
é quase exatamente


344
00:18:41,799 --> 00:18:44,879
a mesma coisa. Vocês podem pensar
na UITableView como se fosse


345
00:18:44,899 --> 00:18:47,339
uma UICollectionVeiew, exceto
pelo fato de que, ao invés das coisas


346
00:18:47,359 --> 00:18:50,829
serem dispostas em um flow layout,
elas são dispostas em uma


347
00:18:50,849 --> 00:18:56,109
tabela linerar, uma lista. Ok?
Essa é a diferença fundamental.


348
00:18:56,129 --> 00:18:59,619
As APIs são praticamente iguais.
Agora, uma


349
00:18:59,639 --> 00:19:02,019
TableView apresenta a sua informação,
assim como a CollectionView,


350
00:19:02,039 --> 00:19:04,460
muito eficientemente, porque,
vocês perceberam que a CollectionView


351
00:19:04,480 --> 00:19:08,970
só te pede as informações do model
para as células visíveis.


352
00:19:08,990 --> 00:19:13,059
Então, mesmo que você tenha 10,000 músicas
no seu banco de dados do iPod,


353
00:19:13,079 --> 00:19:16,809
você pde ver apenas 8 ou 9 delas
ao mesmo tempo. Ela só vai te pedir


354
00:19:16,829 --> 00:19:20,059
por essas 8 ou 9. Conforme você scrolla
para baixo, ela vai te pedir mais.


355
00:19:20,079 --> 00:19:22,559
E, assim como a collection view,
ela vai reusar as células.


356
00:19:22,579 --> 00:19:25,079
Reusar esses itens com aquele
negócio de "dequeue reusable".


357
00:19:25,099 --> 00:19:31,450
Então é muito eficente mostrar
mesmo conjunto de dados muito grandes. Então,


358
00:19:31,470 --> 00:19:33,849
vamos falar um pouco sobre--
oh, e tabelas multidimensionais.


359
00:19:33,869 --> 00:19:35,999
Obviamente-- às vezes vocês
tem tabelas,


360
00:19:36,019 --> 00:19:40,539
tabelas reais, como o seu iPod,
você pode estar olhando para uma lista


361
00:19:40,559 --> 00:19:44,670
de gêneros. Quando você clica
em um gênero, ele te mostra a lista


362
00:19:44,690 --> 00:19:47,420
de artistas que tem álbum
naquele gênero. Você clica


363
00:19:47,440 --> 00:19:50,420
em um artista e ele te mostra uma lista
de álbuns daquele artista. Você clica


364
00:19:50,440 --> 00:19:52,670
no álgum, ele te mostra as músicas.
Esse negócio


365
00:19:52,690 --> 00:19:54,670
multidimensional é feito com
múltiplos MVCs de


366
00:19:54,690 --> 00:19:56,930
TableViews que estão linkados
juntos por navegação de push em um


367
00:19:56,950 --> 00:19:59,749
navigation controller,
que nós falamos da última vez.


368
00:19:59,769 --> 00:20:02,749
É isso. Simples assim.
E nós vamos falar sobre isso hoje também.


369
00:20:02,769 --> 00:20:05,970
Existem alguns tipos diferentes
de TableView.


370
00:20:05,990 --> 00:20:08,019
E eu acho que isso é
mostrado melhor


371
00:20:08,039 --> 00:20:12,220
mostrando imagens deles.
Então aqui está uma TableView


372
00:20:12,240 --> 00:20:16,359
em Plain Style. São somente
as células, ok? Podem existir cabeçalho


373
00:20:16,379 --> 00:20:20,789
nas seções, mas são basicamente
as células. Agora, essa table


374
00:20:20,809 --> 00:20:24,450
também é dinâmica, o que significa que
todos os dados nas células


375
00:20:24,470 --> 00:20:28,839
vem do data source, ok?
Igual uma collection view.


376
00:20:28,859 --> 00:20:31,460
Mas existe outro tipo de TableView.
Esse outo é o estilo


377
00:20:31,480 --> 00:20:35,739
grouped ao invés de plain.
E essa aqui também é estática.


378
00:20:35,759 --> 00:20:39,069
O que significa que as células
não vem de um data source. Elas são


379
00:20:39,089 --> 00:20:41,129
editadas diretamente no Xcode.


380
00:20:41,149 --> 00:20:44,519
Agora, podem também existir
outlets para essas células que podem


381
00:20:44,539 --> 00:20:47,619
ser usadas para setar informação nelas,
mas ela não é carregada


382
00:20:47,639 --> 00:20:50,970
através do data source. Ok?
Isso é chamado TableView


383
00:20:50,990 --> 00:20:53,759
estática. A collection view
não tem isso. Não existe algo


384
00:20:53,779 --> 00:20:56,379
como collection view estática.
Elas são sempre dinâmicas.


385
00:20:56,399 --> 00:20:58,839
Você sempre recebe os dados
de um data source. A TableView


386
00:20:58,859 --> 00:21:02,069
tem tipos estáticos. E eu vou
mostrar um pouco mais da


387
00:21:02,089 --> 00:21:05,319
cara delas. Agora, se eu vou falar
sobre TableView eu preciso


388
00:21:05,339 --> 00:21:08,319
falar sobre suas partes. Ok?
Para que tenhamos uma linguagem em comum.


389
00:21:08,339 --> 00:21:12,180
Uma TableView pode ser
dividida em sections, exatamente como


390
00:21:12,200 --> 00:21:17,950
uma UICollectionView.
E ela também tem um header no topo


391
00:21:17,970 --> 00:21:21,309
e um "header" no final, ok?
E a Colletion Viewwwwwww


392
00:21:21,329 --> 00:21:24,059
Eu não acho que ela tem apenas
headers por sections se


393
00:21:24,079 --> 00:21:27,309
eu me lembro bem. Mas esse é um header
no topo da table, não importa


394
00:21:27,329 --> 00:21:30,309
quantas sections existem.
E também tem um


395
00:21:30,329 --> 00:21:31,309
footer no final.


396
00:21:31,329 --> 00:21:34,309
Eles são simplesmente UIViews.
Você pode apenas setá-los. Eles podem


397
00:21:34,329 --> 00:21:36,809
ser qualquer coisa que você quiser.
Eles podem ser UILabels, eles podem ser


398
00:21:36,829 --> 00:21:37,809
UIButtons,


399
00:21:37,829 --> 00:21:40,559
pode ser meio estranho...
eles podem ser aquele negocinho


400
00:21:40,579 --> 00:21:43,309
de search, campos de busca,
todos os tipos de coisas são usados


401
00:21:43,329 --> 00:21:46,129
nos headers e footers.
E então ela é dividida em sections


402
00:21:46,149 --> 00:21:48,989
assim como a UICollectionView.
E cada section tem um header


403
00:21:49,009 --> 00:21:52,249
e um footer. E esses headers
e footers são providos pelo


404
00:21:52,269 --> 00:21:56,339
data source porque eles são
parte dos dados da


405
00:21:56,359 --> 00:21:58,799
table view. E eles podem
ser também strings ou eles podem ser


406
00:21:58,819 --> 00:22:04,230
UIView se eles forem headers
sofisticados. E então,


407
00:22:04,250 --> 00:22:06,930
cada section tem um header.
Cada section tem um footer.


408
00:22:06,950 --> 00:22:10,749
E dentro de cada section existem as células.
Novamente, exatamente igual--


409
00:22:10,769 --> 00:22:12,999
eu vou dizer que é igual
a UICollectionView


410
00:22:13,019 --> 00:22:16,109
repetidamente, porque
é igual a ela.


411
00:22:16,129 --> 00:22:20,089
Então você pode ter células
e essas células podem ser ditadas pelo


412
00:22:20,109 --> 00:22:21,889
data source, dizendo
quantas delas existem


413
00:22:21,909 --> 00:22:24,389
e qual o conteúdo delas.
Ou elas podem ser estáticas. Editadas


414
00:22:24,409 --> 00:22:30,359
diretamente no Xcode. Ficas, ok?
Então essas são as partes.


415
00:22:30,379 --> 00:22:32,539
E aqui está como é a cara delas
no GroupedStyle. Essas são


416
00:22:32,559 --> 00:22:35,289
as mesmas partes, mas vocês podem ver,
elas estão agrupadas. Elas são


417
00:22:35,309 --> 00:22:38,369
agrupadas por seções, certo?
Tem essas coisas... esses retângulos


418
00:22:38,389 --> 00:22:41,119
ao redor delas. Vocês podem ver
porque vocês não querem


419
00:22:41,139 --> 00:22:43,619
algo dinâmico ditado por um
data source aqui. Porque


420
00:22:43,639 --> 00:22:47,470
se você tiver qualquer número
de rows, o grupo-- os rounded


421
00:22:47,490 --> 00:22:50,849
rects poderiam não estar
na tela ao mesmo tempo. Ela iria


422
00:22:50,869 --> 00:22:53,849
ter uma cara ruim, ok?
Então isso é mais para tables


423
00:22:53,869 --> 00:22:58,069
com uma aparência estática. Então
as sections são assim, ok?


424
00:22:58,089 --> 00:23:01,210
Esses são os mesmos dados. São
apenas cidades, daí


425
00:23:01,230 --> 00:23:04,499
os estados e países que elas estão.
Mas na direita, elas


426
00:23:04,519 --> 00:23:08,529
foram divididas em sections
por país. Ok? Entõa seu


427
00:23:08,549 --> 00:23:13,109
data source poderia dizer
que existem 28 sections que são


428
00:23:13,129 --> 00:23:16,779
os 28 países no model
e então perguntaríamos para ele


429
00:23:16,799 --> 00:23:20,739
repetidamente: ok, bom. Para a section
número 0, que no caso é


430
00:23:20,759 --> 00:23:24,549
os Estados Unidos, quantas células
tem nesse aí? 47. Ok.


431
00:23:24,569 --> 00:23:28,059
Bom, section número 1, que é,
eu não sei... algum que nõa seja


432
00:23:28,079 --> 00:23:31,460
um desses. Quantas existem nela?
E então


433
00:23:31,480 --> 00:23:34,210
você vai descendo para... parece
com o meio da


434
00:23:34,230 --> 00:23:36,700
tabela, talvez section 18.
Esse é o Canadá. Quantos tem ali?


435
00:23:36,720 --> 00:23:40,230
2. Section 19, é a França.
Quantas tem lá? 1. Ok?


436
00:23:40,250 --> 00:23:41,980
Então vocês vêem como é


437
00:23:42,000 --> 00:23:44,730
a mesma coisa que na Collection View
onde ele pergunta a você


438
00:23:44,750 --> 00:23:47,480
sobre as sections e então
ele vai perguntar quantas


439
00:23:47,500 --> 00:23:50,480
células tem naquela section
e então vai pedir pra você prover


440
00:23:50,500 --> 00:23:51,480
os dados, ok? Pergunta.


441
00:23:51,500 --> 00:23:53,230
>> [Estudante perguntando]


442
00:23:53,250 --> 00:23:56,480
>> A pergunta é se você
quiser apenas


443
00:23:56,500 --> 00:23:59,730
as sections que são "a, b, c, d, ..."
você poderia apenas fazer


444
00:23:59,750 --> 00:24:02,730
26 sections e faer o header
dessas sections serem as letras a, b, c.


445
00:24:02,750 --> 00:24:05,480
Isso é exatamente o que você
faria se você quisesse


446
00:24:05,500 --> 00:24:08,230
alfabetizá-la e agrupar
por letra, você poderia fazer isso. Isso


447
00:24:08,250 --> 00:24:12,099
é comum. É muito mais comum
termos sections em uma TableView


448
00:24:12,119 --> 00:24:14,980
do que em uma collection view.
Simplesmente pela natureza do modo


449
00:24:15,000 --> 00:24:18,440
que é apresentado. Faz mais sentido.
Esse tipo de células--


450
00:24:18,460 --> 00:24:21,190
ok, em uma collection view
existe apenas um tipo de


451
00:24:21,210 --> 00:24:24,879
cell que é custom. Você
arrasta views customizadas,


452
00:24:24,899 --> 00:24:27,879
sabe, como vocês arrastaram os seus
PlayingCardViews lá. Mas


453
00:24:27,899 --> 00:24:31,349
vocês poderiam ter arrastado botões
ou qualquer coisa ali. E eles tem


454
00:24:31,369 --> 00:24:34,529
isso nas TableViews também,
esse é o tipo customizado. Mas eles


455
00:24:34,549 --> 00:24:37,909
também tem esses quatro tipos
de cell para uso comum. O tipo


456
00:24:37,929 --> 00:24:41,009
subtitle, que tem um título
e um subtítulo. O tipo básico


457
00:24:41,029 --> 00:24:43,509
que é o mesmo que o subtitle,
mas sem subtítulo.


458
00:24:43,529 --> 00:24:46,509
E então o "right detail" e "left detail"
que tem essa disposição diferente


459
00:24:46,529 --> 00:24:49,409
de texto entre o
título e o subtítulo, ok?


460
00:24:49,429 --> 00:24:53,230
Então você pode escolher
um estilo pré-definido aqui se você não quiser


461
00:24:53,250 --> 00:25:00,710
construir um arrastando as views.
O modo como você usaria uma


462
00:25:00,730 --> 00:25:04,919
TableView é um pouco diferente de
uma UICollectionView.


463
00:25:04,939 --> 00:25:07,730
Lembram-se que eu disse a vocês
que na UICollectionView vocês poderiam


464
00:25:07,750 --> 00:25:11,909
arrastar uma view em uma scene
existente? É o que fizemos, lembram-se?


465
00:25:11,929 --> 00:25:14,049
E vocês poderiam também arrastar
um controller que teria


466
00:25:14,069 --> 00:25:15,049
uma UICollectionView


467
00:25:15,069 --> 00:25:17,679
dentro dele,
com o delegate e o datasource


468
00:25:17,699 --> 00:25:21,879
já linkados com ele.
TableView, a mesma coisa,


469
00:25:21,899 --> 00:25:24,220
mas é na outra direção.
Com TableView nós geralmente


470
00:25:24,240 --> 00:25:27,940
arrastamos o controller inteiro,
ok? Ele é chamado


471
00:25:27,960 --> 00:25:29,440
TableViewController. É uma
classe no iOS.


472
00:25:29,460 --> 00:25:31,499
UITableViewController.
Você arrasta o controller inteiro,


473
00:25:31,519 --> 00:25:35,690
ele vem pré-linkado com
o data source e o delegate,


474
00:25:35,710 --> 00:25:39,279
com uma prototype cell já ali,
pronto para rodar. Esse é o modo


475
00:25:39,299 --> 00:25:42,559
que nós fazemos 
90% do tempo com a TableView.


476
00:25:42,579 --> 00:25:45,489
Nós geralmente não colocamos
uma TableView com outras coisas. Simplesmente,


477
00:25:45,509 --> 00:25:48,319
de novo, por causa da natureza
do modo como ela é apresentada.


478
00:25:48,339 --> 00:25:50,069
É tipo uma list infinita de itens.


479
00:25:50,089 --> 00:25:53,369
Então você meio que quer
que ela ocupe o espaço inteiro

480
00:25:53,389 --> 00:25:55,669
E se você realmente tiver
um botão ou algo assim,

481
00:25:55,689 --> 00:25:58,839
você pode colocá-lo no header
da table. Então eles

482
00:25:58,859 --> 00:26:02,529
tem que scrollar para o topo
para vê-lo, mas vocês podem usar só a TableView,

483
00:26:02,549 --> 00:26:05,029
mas geralmente nós fazemos
o negócio inteiro, igual temos

484
00:26:05,049 --> 00:26:07,450
aqui. Mas se você arrastar,
você ainda precisa criar uma

485
00:26:07,470 --> 00:26:10,659
subclasse custom se você quiser
ter outlets em seu controller,

486
00:26:10,679 --> 00:26:11,909
o que nós sempre queremos.

487
00:26:11,929 --> 00:26:14,909
Nós temos que ter lógica ali também.
Vocês sabem que

488
00:26:14,929 --> 00:26:17,909
toda vez que vocês arrastarem
um ViewController, mesmo se ele for

489
00:26:17,929 --> 00:26:19,659
um TableViewController, vocês vão
criar uma subclasse custom

490
00:26:19,679 --> 00:26:22,909
com New File. Nesse caso,
vocês querem se certificar que

491
00:26:22,929 --> 00:26:26,039
a superclasse que você especificou
é UITableViewController.

492
00:26:26,059 --> 00:26:29,200
Ok? Se você não fizer isso,
então você vai meio que quebrar

493
00:26:29,220 --> 00:26:31,700
essa coisas que você arrastou.
Porque ela está esperando

494
00:26:31,720 --> 00:26:35,399
que ela vá ser um UITableViewController.
Então, uma vez que você arrasta,

495
00:26:35,419 --> 00:26:38,889
você tem que se certificar que você
setou isso no identity

496
00:26:38,909 --> 00:26:41,309
inspector. Novamente,
assim como em qualquer outro controller.

497
00:26:41,329 --> 00:26:44,059
Eu espero que seja isso que
vocês vem fazendo. Vocês já fizeram

498
00:26:44,079 --> 00:26:46,559
isso pelo menos oito ou nove vezes
nesse curso, espero. Aonde você

499
00:26:46,579 --> 00:26:49,309
tem um ViewController, você cria
uma classe, você seta

500
00:26:49,329 --> 00:26:54,139
essa classe para ser a classe
do controller, ok? Mesma coisa.

501
00:26:54,159 --> 00:26:58,049
Então você pode customizar
o negócio inteiro no nível

502
00:26:58,069 --> 00:27:01,149
da TableView. E no nível(?)
da TableViewCell. Então vamos

503
00:27:01,169 --> 00:27:03,649
falar sobre o nível da TableView.,
o que vocês podem customizar.

504
00:27:03,669 --> 00:27:06,700
O grande ponto é, vocês podem
customizar se ela é estática

505
00:27:06,720 --> 00:27:09,659
ou dinâmica, ok? Dinâmica significa
que ela é dirigida pelo

506
00:27:09,679 --> 00:27:12,359
seu data source, como uma
UICollectionView. Ou estática,

507
00:27:12,379 --> 00:27:15,609
que significa que você pode
editá-la aqui mesmo no Xcode. E ela não

508
00:27:15,629 --> 00:27:16,609
vai procurar por dados.

509
00:27:16,629 --> 00:27:19,359
Ela vai olhar pro data source,
mas geralmente você não vai querer

510
00:27:19,379 --> 00:27:22,109
o data source para dizer alguma coisa,
se você estiver fazendo

511
00:27:22,129 --> 00:27:24,859
estaticamente aqui. Vamos olhar
para a estática primeiro. Eu vou

512
00:27:24,879 --> 00:27:28,109
mudar isso para ser estático.
E quando eu faço isso, ele vai me dar

513
00:27:28,129 --> 00:27:32,619
algumas cells extras. E eu vou
mudar a cara dessa

514
00:27:32,639 --> 00:27:35,799
coisa para-- eu ainda estou inspecionando
a TableView, não as

515
00:27:35,819 --> 00:27:38,739
TableViewCells. Eu vou mudar
a cara dela para ser grouped.

516
00:27:38,759 --> 00:27:41,749
Na maioria das vezes, quando nós temos
essas cells estáticas, nós as agrupamos.

517
00:27:41,769 --> 00:27:44,999
Então vejam como eu a mudei
para ser grouped? Eu fiz isso, agora

518
00:27:45,019 --> 00:27:47,690
elas estão grouped. Eu estou
no estilo grouped da TableView. E então

519
00:27:47,710 --> 00:27:52,099
agora eu vou clicar em uma das cells
para mudar a aparência dela,

520
00:27:52,119 --> 00:27:55,159
ok? Então, por exemplo, eu poderia
mudá-la para ter o style de

521
00:27:55,179 --> 00:27:59,690
subtitle, ok? Então agora essa cell,
apenas essa cell, nesse caso,

522
00:27:59,710 --> 00:28:02,889
porque ela é estática, tem o style
de subtitle. E então eu posso fazer

523
00:28:02,909 --> 00:28:06,889
coisas como por exemplo
dar um double click nela para mudar

524
00:28:06,909 --> 00:28:10,119
o seu texto. Como não está sendo
dirigida pela data source aqui,

525
00:28:10,139 --> 00:28:13,619
ela está sendo editada, eu posso fazer isso,
então eu poderia mudar para

526
00:28:13,639 --> 00:28:14,869
"hello" ou algo assim.

527
00:28:14,889 --> 00:28:17,869
Eu posos mudar o texto do subtitle também.
Eu posso mudar as fontes,

528
00:28:17,889 --> 00:28:22,379
todas essas coisas. Vamos falar
sobre as outras coisas

529
00:28:22,399 --> 00:28:25,879
que vocês podem fazer em uma cell.
Elas, do lado direito de

530
00:28:25,899 --> 00:28:28,379
cada cell, existem 4 pequenos símbolos
que podem aparecer.

531
00:28:28,399 --> 00:28:30,629
Esse aqui é chamado disclosure accessory.
É parecido com um acento

532
00:28:30,649 --> 00:28:34,029
circunflexo. Isso deve estar sempre
em uma cell que, quando você

533
00:28:34,049 --> 00:28:39,059
clica nela, ela vai "seguear", ok?
Se essa cell-- clicando nela

534
00:28:39,079 --> 00:28:42,539
faz ela "seguear". Você faz um push--
então você vai querer ter

535
00:28:42,559 --> 00:28:45,289
essa coisa ali. De fato, o Xcode,
se você CTRL + arrastar para

536
00:28:45,309 --> 00:28:47,789
criar um segue, ele vai automaticamente
colcoar essa coisa ali.

537
00:28:47,809 --> 00:28:50,539
Então não tire essa coisa, ok?
Porque é isso que essa coisa

538
00:28:50,559 --> 00:28:53,609
significa. Outras coisas podem
aparecer ali. Você tem um 

539
00:28:53,629 --> 00:28:56,359
checkmark. Então você pode
usar uma pequena table estática

540
00:28:56,379 --> 00:28:59,109
como se fosse tipo um negócio
com radio buttons. Você terá

541
00:28:59,129 --> 00:29:03,129
que fazer no código algo onde
quando alguém clica na cell, você

542
00:29:03,149 --> 00:29:05,369
liga esse checkmark e desliga
os outros se você quiser.

543
00:29:05,389 --> 00:29:08,239
Ou você pode fazer multi-selection
onde você simplesmente permite

544
00:29:08,259 --> 00:29:11,210
que as checkmarks selecionem
alguns items. E se você for olhar

545
00:29:11,230 --> 00:29:14,589
nos settins do seu phone, você vai ver
várias

546
00:29:14,609 --> 00:29:15,589
coisas desse tipo.

547
00:29:15,609 --> 00:29:19,849
TableViews usadas como radio buttons,
e também para selecionar coisas.

548
00:29:19,869 --> 00:29:22,939
Vocês também podem ter uma coisa
bem interessante ali chamada

549
00:29:22,959 --> 00:29:26,099
disclosure indicator, que é
diferente de-- oh, desculpe,

550
00:29:26,119 --> 00:29:28,319
detailed disclosure indicator,
que é diferente do

551
00:29:28,339 --> 00:29:34,950
disclosure accessory normal.
Esse aqui é: se ele está ali,

552
00:29:34,970 --> 00:29:38,849
ele significa que se você clica na cell,
você vai "seguear". Mas ele tem

553
00:29:38,869 --> 00:29:42,529
esse pequeno botão azul tipo "olhem para ele",
porque ele é também

554
00:29:42,549 --> 00:29:47,589
um botão. Então, se você clicar nele
especificamente, você vai "seguear" para

555
00:29:47,609 --> 00:29:48,689
algo diferente.

556
00:29:48,709 --> 00:29:52,339
A melhor maneira de mostrar isso
a vocês é por exemplo.

557
00:29:52,359 --> 00:29:55,839
Ok, no iPhone, se você tem
um voicemail, e você vai

558
00:29:55,859 --> 00:29:58,839
no telefone na seção de voicemail,
você vai ver uma lista

559
00:29:58,859 --> 00:30:02,089
de todos os voicemails que você tem.
Se você clicar em um, ele vai

560
00:30:02,109 --> 00:30:04,839
dar play no voicemail. Se você clicar
no pequeno botão azul

561
00:30:04,859 --> 00:30:07,589
perto dele, ele vai te dizer
quando o voicemail foi recebido,

562
00:30:07,609 --> 00:30:11,089
qual a duração dele, você sabe,
de quem ele veio. Vocês vêem

563
00:30:11,109 --> 00:30:13,339
o que eu quero dizer? Ele provê
outras informações. Então esse pequeno

564
00:30:13,359 --> 00:30:15,839
negócio de detail disclosure é tipo
uma maneira de obter informação

565
00:30:15,859 --> 00:30:17,089
auxiliar da cell.


566
00:30:17,109 --> 00:30:22,499
Faz sentido? Agora, o modo que
você obtém o target-action desse

567
00:30:22,519 --> 00:30:25,899
botão, não é com CTRL + arrastando
ou nada assim. Ao invés disso,

568
00:30:25,919 --> 00:30:29,689
seu delegate recebe essa mensagem,
tableview:accessoryTappedFor...

569
00:30:29,709 --> 00:30:34,299
rowAtIndexPath:, ok?
Então sempre que alguém

570
00:30:34,319 --> 00:30:37,099
clicar em um desses botões azuis,
você vai receber

571
00:30:37,119 --> 00:30:39,599
essa mensagem no seu delegate
e você sabe qual índice foi passado,

572
00:30:39,619 --> 00:30:46,059
então você sabe o que fazer.
Certo? Alguns estilos como

573
00:30:46,079 --> 00:30:49,589
o subtitle e o estilo básico
podem ter uma imagem, então aqui

574
00:30:49,609 --> 00:30:54,210
eu estou selecionando
a imagem do logo da Stanford e ele adicona.

575
00:30:54,230 --> 00:30:57,210
Vocês vêem como aquela cell
tem a imagem da Stanford

576
00:30:57,230 --> 00:31:00,889
do lado? E, claro, esse estilo
custom é mais familiar

577
00:31:00,909 --> 00:31:03,389
a vocês porque é tipo
igual ao estilo de cell da

578
00:31:03,409 --> 00:31:07,269
collection view. Então eu vou mudá-lo
para custom. Em custom, você pode

579
00:31:07,289 --> 00:31:12,230
arrastar coisas. Como aqui,
eu vou arrastar um UIButton

580
00:31:12,250 --> 00:31:15,089
e vou colocá-lo na cell.
Você poderia colocar views

581
00:31:15,109 --> 00:31:17,839
customizadas lá também.
Você poderia colocar uma PlayingCardView

582
00:31:17,859 --> 00:31:21,129
ali se você quisesse e não apenas isso.
Você pode CTRL + arrastar

583
00:31:21,149 --> 00:31:25,099
para o controller. Agora, a razão
que eu parei para enfatizar isso é

584
00:31:25,119 --> 00:31:28,429
que vocês não podem fazer isso
em uma collection view. Por que vocês não podem

585
00:31:28,449 --> 00:31:30,929
fazer isso em uma collection view?
Porque na collection view todas

586
00:31:30,949 --> 00:31:33,829
as células são dinâmicas.
Eles são dirigidos pelo data source.

587
00:31:33,849 --> 00:31:36,710
Então se você pudesse CTRL + Arrastar,
não teria como o controller

588
00:31:36,730 --> 00:31:39,769
saber qual dos vários botões
que,

589
00:31:39,789 --> 00:31:40,819
na collection view,

590
00:31:40,839 --> 00:31:44,619
foi pressionado. É por isso
que nós temos essas subclasses de

591
00:31:44,639 --> 00:31:47,970
CollectionViewCell e nós conectamos
o outlet para elas,

592
00:31:47,990 --> 00:31:51,259
certo? E então, ela sabe que
foi o seu próprio botão que

593
00:31:51,279 --> 00:31:53,759
foi clicado e então pode coordenar
com o controller.

594
00:31:53,779 --> 00:31:57,069
Mas aqui, essas cells são estáticas.
Eu setei para ser estático,

595
00:31:57,089 --> 00:32:00,869
então só há 3 cells.
Se eu colocar um botão aqui,

596
00:32:00,889 --> 00:32:04,829
ele envia essa action e sabe
qual foi o botão. Vocês o que é

597
00:32:04,849 --> 00:32:07,829
diferente aqui? É meio sutil,
mas essa é--

598
00:32:07,849 --> 00:32:10,159
É diferente. Porque essas
são estáticas. Se elas fossem

599
00:32:10,179 --> 00:32:12,909
dinâmicas, nós não poderíamos
fazer isso. Mesmo em uma tableview dinâmica

600
00:32:12,929 --> 00:32:18,980
nós não poderíamos fazer isso. É só
no modo estático. Então vamos agora

601
00:32:19,000 --> 00:32:21,980
para o modo dinâmico, e esse vai ser
mais confortável

602
00:32:22,000 --> 00:32:24,480
para vocês porque é parecido
com a collection view. Então

603
00:32:24,500 --> 00:32:27,730
eu vou clicar na tableview,
eu vou no

604
00:32:27,750 --> 00:32:30,480
attributes inspector e digo:
faça-me dinâmica. Quando eu

605
00:32:30,500 --> 00:32:33,230
faço ela dinâmica, vocês vêem que
agora, ela diz prototype cells

606
00:32:33,250 --> 00:32:38,449
no topo. Ok? Agora, quando você
tiver uma view aqui. Novamente,

607
00:32:38,469 --> 00:32:42,089
você tem que linkar para uma
subclasse de UITableViewCell.

608
00:32:42,109 --> 00:32:44,589
Essas cells, a propósito,
são da classe UITableViewCell

609
00:32:44,609 --> 00:32:48,309
versus a collection view, onde são
UICollectionViewCell.

610
00:32:48,329 --> 00:32:53,549
Então você tem que linkar elas
aqui. Nós não precisamos de três

611
00:32:53,569 --> 00:32:56,449
prototypes aqui. Eu vou diminuir
para um prototype daqui pra frente.

612
00:32:56,469 --> 00:33:01,609
Você pode ainda editar
tudo a respeito da

613
00:33:01,629 --> 00:33:04,409
table. Eu vou mudá-la para
plain style ao invés de

614
00:33:04,429 --> 00:33:06,629
grouped porque normalmente
quando temos tables dinâmicas nós não

615
00:33:06,649 --> 00:33:10,359
a temos agrupadas, como eu falei.
E eu posso ainda clicar no

616
00:33:10,379 --> 00:33:13,839
prototype. Eu poderia mudá-la para
ser subtitle. Então agora todas minhas

617
00:33:13,859 --> 00:33:17,879
cells que meu data source vai
preencher, serão todas

618
00:33:17,899 --> 00:33:20,379
do cells com estilo subtitle, ok?

619
00:33:20,399 --> 00:33:24,449
E mais importante de tudo,
no modo dinâmico,

620
00:33:24,469 --> 00:33:28,359
reuseIdentifier, ok? Assim como
a collection view qu evimos, nós temos

621
00:33:28,379 --> 00:33:31,609
que colocar esse reuse identifier
aqui para que no nosso código nós

622
00:33:31,629 --> 00:33:36,119
podemos fazer aquele
dequeueReusableCellWithIndentifier. E esse código

623
00:33:36,139 --> 00:33:38,839
tem que ser iguais a essa coisa,
exatamente como a

624
00:33:38,859 --> 00:33:41,089
collection view que nós vimos.
Pergunta?


625
00:33:41,109 --> 00:33:42,089
>> [Estudante perguntando]


626
00:33:42,109 --> 00:33:44,839
[estudante perguntando]


627
00:33:44,859 --> 00:33:47,339
[estudante perguntando]


628
00:33:47,359 --> 00:33:49,589
[estudante perguntando]


629
00:33:49,609 --> 00:33:50,589
[estudante perguntando]


630
00:33:50,609 --> 00:33:53,869
>> Ok, se você tiver múltiplos prototypes,
então ele iria usar

631
00:33:53,889 --> 00:33:57,589
qualquer um que você tenha especificado
o reuse Identifier.

632
00:33:57,609 --> 00:34:00,409
Quando você faz aquele negócio
de dequeue, você especificaria

633
00:34:00,429 --> 00:34:03,069
palavras diferentes, dependendo
de qual cells você iria querer

634
00:34:03,089 --> 00:34:07,499
para aquele indexPath. Vê?
Ok, então como nós conectamos todas

635
00:34:07,519 --> 00:34:10,099
essas coisas no código? Super simples.
Vocês já sabem como fazer

636
00:34:10,119 --> 00:34:12,909
isso, é apenas o data source.
Vocês tem o data source

637
00:34:12,929 --> 00:34:16,639
setado. A propósito existe
uma property no no

638
00:34:16,659 --> 00:34:20,380
UITableViewController chamada tableView,
que vai retornar um ponteiro

639
00:34:20,400 --> 00:34:23,130
para a tableView. Então você
não tem que criar um

640
00:34:23,150 --> 00:34:25,130
outlet como nós fizemos no nosso
controller da 

641
00:34:25,150 --> 00:34:26,130
collection view.


642
00:34:26,150 --> 00:34:28,309
Ele já está lá para você,
se você usar o

643
00:34:28,329 --> 00:34:31,130
UITableViewController.
Isso é idêntico e eu digo

644
00:34:31,150 --> 00:34:35,929
idêntico ao self.view.
É exatamente a mesma view, ok?

645
00:34:35,949 --> 00:34:38,980
Somente no UITableViewController.
A coisa coisa que você arrasta

646
00:34:39,000 --> 00:34:41,730
o controller e obtém tudo,
o negócio pré-fabricado.

647
00:34:41,750 --> 00:34:44,730
Então, para ser dinâmico,
para usar os prototypes e todas essas coisas,

648
00:34:44,750 --> 00:34:47,480
nós precisamos fazer as mesmas
coisas que na collection view. Certo? Nós

649
00:34:47,500 --> 00:34:51,730
temos que dizer o número de sections.
Nós precisamos responder para o

650
00:34:51,750 --> 00:34:54,730
numberOfRowsInSection. A propósito,
em TableViews, nós chamamos todas

651
00:34:54,750 --> 00:34:57,519
as coisinhas de "rows".
Enquanto na collection view, vocês as chamariam

652
00:34:57,539 --> 00:34:59,889
de itens. Mas agem exatamente
do mesmo modo. É apenas uma

653
00:34:59,909 --> 00:35:00,889
palavra diferente.

654
00:35:00,909 --> 00:35:04,460
Ok? Vocês conseguem entender
porque nós não chamamos as coisinhas

655
00:35:04,480 --> 00:35:08,150
da collection view de rows, porque elas
são ordenadas em um flow layout,

656
00:35:08,170 --> 00:35:10,999
então elas não são realmente rows,
elas são itens. Vocês poderiam argumentar

657
00:35:11,019 --> 00:35:14,099
que nós poderíamos chamar as da TableView
de itens ao invés de rows, provavelmente

658
00:35:14,119 --> 00:35:15,539
seria certo, exceto pelo fato
de que tableview precederam

659
00:35:15,559 --> 00:35:16,539
a collection view.

660
00:35:16,559 --> 00:35:18,969
Então ela já era chamada row
antes mesmo da

661
00:35:18,989 --> 00:35:23,380
collection view existir. Então,
acontece que as da TableView são rows.

662
00:35:23,400 --> 00:35:26,880
Então aqui está o cellForRowAtIndexPath,
isso é como

663
00:35:26,900 --> 00:35:30,539
o itemForRow da collection view
...

664
00:35:30,559 --> 00:35:35,469
É a mesma coisa. Em uma
table estática, vocês não tem

665
00:35:35,489 --> 00:35:37,480
que implementar isso. Porque vocês
stõ editando todas

666
00:35:37,500 --> 00:35:41,049
essas coisas no Xcode ou você tem
outlets para as coisas e você está

667
00:35:41,069 --> 00:35:43,549
fazendo isso, então você não precisa
realmente implementar

668
00:35:43,569 --> 00:35:46,299
esse método. Na verdade você nao iria querer,
pode ficar um pouco

669
00:35:46,319 --> 00:35:48,549
confuso para alguém que estiver
olhando para o seu código. Embora

670
00:35:48,569 --> 00:35:51,299
funcionaria, ok? E então o
indexPath, vocês já sabem

671
00:35:51,319 --> 00:35:54,049
o que é isso. É uma rowInSection,
ao invés de itemInSection.

672
00:35:54,069 --> 00:35:55,549
É exatamente a mesma coisa.

673
00:35:55,569 --> 00:35:58,170
E a implementação,
é exatamente igual da

674
00:35:58,190 --> 00:36:01,529
collection view. Você obtém uma
cell para usar fazendo aquele

675
00:36:01,549 --> 00:36:06,239
negócio de dequeue, ok? Tem um par:
tem que ter a mesma string aqui

676
00:36:06,259 --> 00:36:09,480
da que você tem no seu
reuse identifier no Xcode.

677
00:36:09,500 --> 00:36:12,819
E então uma vez que você tem a cell,
vocês já sabem sobre isso.

678
00:36:12,839 --> 00:36:15,079
As cells vão sendo reusadas
na medida que vai scrollando pra cima

679
00:36:15,099 --> 00:36:17,329
e pra baixo, certo? Elas vão sendo
jogadas pra fora da dela, elas vão para

680
00:36:17,349 --> 00:36:19,579
uma fila de reúso, e elas vão
sendo reusadas. Umacoisa

681
00:36:19,599 --> 00:36:23,789
sobre o reúso que vocês tem
que entender é que a TableView

682
00:36:23,809 --> 00:36:27,110
não está mantendo seus próprios dados.
Elas está apenasusando essas cells

683
00:36:27,130 --> 00:36:31,730
para mostrar o que está visível.
Então nunca conte com uma cell

684
00:36:31,750 --> 00:36:34,249
como um mapeamento um-pra-um
com o seu model.

685
00:36:34,269 --> 00:36:36,239
Porque esse mapeamento vai estar
sempre mudando na medida que o user scrolla,

686
00:36:36,259 --> 00:36:37,239
porque as coisas

687
00:36:37,259 --> 00:36:39,829
estão sendo jogadas pra fora da tela,
reusadas, usadas em outro

688
00:36:39,849 --> 00:36:44,049
lugar, ok? Então nunca dependa disso.
Isso é, essas cells

689
00:36:44,069 --> 00:36:47,980
são apenas algo temporário
para mostrar uma cell visível e então

690
00:36:48,000 --> 00:36:52,029
elas são reusadas. Então nós
obtemos a cell fazendo o "dequeReuse"

691
00:36:52,049 --> 00:36:55,139
e então nós simplesmente setamos
as propriedades. Aqui talvez eu vá setar

692
00:36:55,159 --> 00:36:58,389
o texto para algo que eu
peguei do meu model, ok? Setar o

693
00:36:58,409 --> 00:37:00,679
texto na minha cell. Ok? E existem
várias outras coisas

694
00:37:00,699 --> 00:37:02,650
que vocês podem fazer aqui.
Você poderia setar aquelas accessory views,

695
00:37:02,670 --> 00:37:05,400
os checkmarks. Todas essas coisas,
dependendo de que tipo

696
00:37:05,420 --> 00:37:08,650
de cell ela é. Se você tiver uma
custom cell, você poderia

697
00:37:08,670 --> 00:37:11,210
setar vários outlets a partir...
... porque você teria uma

698
00:37:11,230 --> 00:37:13,909
subclasse customizada de UITableViewCell
que teria outlets para

699
00:37:13,929 --> 00:37:16,909
as coisas. Você pode setar todas essas
coisas aqui, ok? Isso é

700
00:37:16,929 --> 00:37:20,960
exatamente como a collection view.
Bom, claro que a

701
00:37:20,980 --> 00:37:23,960
versão dinâmica sabe quantas rows
tem ali por esses

702
00:37:23,980 --> 00:37:25,969
dois métodos de data source.

703
00:37:25,989 --> 00:37:29,579
Fácil. Você sabe que uma section
é o default, assim como

704
00:37:29,599 --> 00:37:31,829
na collection view. Então se você não
implementar o numberOfSections...

705
00:37:31,849 --> 00:37:34,630
InTableView, você tem uma section.
O outro é required.

706
00:37:34,650 --> 00:37:38,469
Novamente, tableview estática,
nós não usamos o

707
00:37:38,489 --> 00:37:42,319
data source. Existem vários outros
métodos nesse protocolo

708
00:37:42,339 --> 00:37:44,699
de data source, a maioria sobre
setar headers e footers

709
00:37:44,719 --> 00:37:47,400
das sections e coisas assim.
Nós não vamos

710
00:37:47,420 --> 00:37:50,150
cobrir tudo isso hoje. Vocês
não precisam deles para o seu

711
00:37:50,170 --> 00:37:53,449
homework, mas, está tudo aí.
Você pode olhar. O delegate

712
00:37:53,469 --> 00:37:56,569
da TableView é usado um pouco mais
do que o delegate da

713
00:37:56,589 --> 00:38:04,039
Collection View. Por exemplo,
a TableView tem mais tipos

714
00:38:04,059 --> 00:38:06,789
de ajustes para fazer
sobre como é sua aparência.

715
00:38:06,809 --> 00:38:10,489
E o delegate está envolvido
mais nisso. Vocês podem olhar

716
00:38:10,509 --> 00:38:13,029
isso também. Obviamente o data source
e o delegate são geralmente

717
00:38:13,049 --> 00:38:17,409
o mesmo objeto, o seu controller.
E o delegate tem

718
00:38:17,429 --> 00:38:21,989
um monte de disScroll, "isso está visível",
"isso fez isso", que te diz

719
00:38:22,009 --> 00:38:24,739
o que está acontecendo,
então você pode tipo assistir o que

720
00:38:24,759 --> 00:38:27,789
está acontecendo enquanto o usuário
a manipula. Ele também tem, um tipo de

721
00:38:27,809 --> 00:38:30,920
método de target-action de TableViews.
Então, normalmente, quando você clica

722
00:38:30,940 --> 00:38:33,670
em uma cell, você vai "seguear".
Então você vai apenas

723
00:38:33,690 --> 00:38:36,920
CTRL + arrastar. Mas se você clicar
em uma cell e ela fizer

724
00:38:36,940 --> 00:38:39,170
algo diferente, como dar o play
no seu vocemail, certo? Isso não é

725
00:38:39,190 --> 00:38:42,420
um segue. Quando eu toco meu
voicemail, ele apenas toca. Então

726
00:38:42,440 --> 00:38:45,670
você tipo precisa de um target-action
e a maneira que você faz isso

727
00:38:45,690 --> 00:38:48,049
é com esse método de delegate,
didSelectRowAtIndexPath. Então cada vez

728
00:38:48,069 --> 00:38:51,710
que o usuário tocar em uma row,
é enviada essa mensagem

729
00:38:51,730 --> 00:38:52,710
para o delegate.

730
00:38:52,730 --> 00:38:56,389
didSelectRowAtIndexPath. Ok?
Você tem o indexPath, você sabe

731
00:38:56,409 --> 00:38:59,389
qual que foi clicada,
você pode ir lá

732
00:38:59,409 --> 00:39:01,889
dar o play naquele voicemail.
Faz sentido? Certo, existem vários

733
00:39:01,909 --> 00:39:07,279
e vários outros meétodos. Nós
não conseguiremos cobrir todos eles, mas

734
00:39:07,299 --> 00:39:10,199
eles estão aí. Vocês podem estudá-los.
Certo. "Segueando" em

735
00:39:10,219 --> 00:39:14,630
uma tableview. Novamente,
na maior parte do tempo, quando você clica

736
00:39:14,650 --> 00:39:17,380
em uma cell, sua tableview vai estar
em um navigation controller.

737
00:39:17,400 --> 00:39:20,190
E você vai querer "seguear".
E a maneira que você faz isso é

738
00:39:20,210 --> 00:39:23,699
simplesmente CTRL + arrastando
de uma cell para o MVC que você quer

739
00:39:23,719 --> 00:39:27,079
seguear para. Exatamente como se
a cell fosse um botão,

740
00:39:27,099 --> 00:39:32,349
por exemplo. Certo? E quando
o prepareForSegue é chamado,

741
00:39:32,369 --> 00:39:35,769
um dos argumentos vai ser: que cell?
Então você sabe

742
00:39:35,789 --> 00:39:36,769
como fazer

743
00:39:36,789 --> 00:39:40,299
o segue, certo? Porque você
sabe que cell foi pressionada.

744
00:39:40,319 --> 00:39:45,630
Ok? Então nós vamos ver isso
na demo. Push é geralmente

745
00:39:45,650 --> 00:39:48,969
como você vai fazer o segue.
Eu sei que vocês nunca vão fazer

746
00:39:48,989 --> 00:39:52,630
o segue para modal presentation.
Mas quase sempre faz o push segue

747
00:39:52,650 --> 00:39:54,549
aqui, dentro do navigation controller.

748
00:39:54,569 --> 00:39:58,360
Então aqui está o prepareForSegue
que vai ser chamado

749
00:39:58,380 --> 00:40:01,139
no seu TableViewController quando alguém
clicar em uma row. E

750
00:40:01,159 --> 00:40:03,619
você pode ver que esse prepareForSegue
tem esse argumento extra

751
00:40:03,639 --> 00:40:06,079
que nós não falamos muito
da última vez porque nós

752
00:40:06,099 --> 00:40:08,829
não precisamos que é o sender.
O sender:(id)sender

753
00:40:08,849 --> 00:40:13,559
esse é a TableViewCell. 
UITableViewCell que está

754
00:40:13,579 --> 00:40:17,659
pedindo pra você prepareForSegue.
Então é assim que você sabe

755
00:40:17,679 --> 00:40:21,219
qual row foi clicada e então
você sabe como se preparar

756
00:40:21,239 --> 00:40:25,579
para aquele segue. Simples assim.
Percebam que é um id sender,

757
00:40:25,599 --> 00:40:28,519
então você quer usar introspection
aqui para ter certeza que é

758
00:40:28,539 --> 00:40:32,960
uma TableViewCell. E então
você quer

759
00:40:32,980 --> 00:40:35,409
se certificar que você vai chamar
esse self...

760
00:40:35,429 --> 00:40:39,110
tableview indexPathForCell:
e ele vai te dar um

761
00:40:39,130 --> 00:40:41,749
NSIndexPath para aquela TableViewCell.
Certo. Faz sentido?

762
00:40:41,769 --> 00:40:46,480
É bem direto. Nós vamos ver
isso na demo também.

763
00:40:46,500 --> 00:40:50,719
Ok, e se o seu model mudar?
Bom, você tem o

764
00:40:50,739 --> 00:40:52,420
"martelo do terror"


765
00:40:52,440 --> 00:40:56,349
GRXHRITS, reloadData, ok?
Que todos vocês provavelmente 

766
00:40:56,369 --> 00:40:59,019
já aprenderam do CollectionViewCell.
É um modo fácil e rápido,

767
00:40:59,039 --> 00:41:02,569
em termos de código,
para simplesmente dar reload em tudo, ok?

768
00:41:02,589 --> 00:41:05,749
Mas, você sabe, se você pode
usar alguma coisa mais leve

769
00:41:05,769 --> 00:41:08,190
como reloadRowsAtIndexPath, que é um

770
00:41:08,210 --> 00:41:09,190
bom método,

771
00:41:09,210 --> 00:41:12,659
isso é melhor, ok? Mas se você tiver
que dar essa martelada,

772
00:41:12,679 --> 00:41:15,369
faça. Mas entenda que quando você dá
essa martelada,

773
00:41:15,389 --> 00:41:17,869
reloadData, ele vai te perguntar
todas essas perguntas de data source

774
00:41:17,889 --> 00:41:20,369
novamente. Quantas sectins--
quantas rows e sections? Vai perguntar

775
00:41:20,389 --> 00:41:23,119
para todas as cells visíveis, ele vai perguntar.
Sabe? Para poder

776
00:41:23,139 --> 00:41:25,619
repreenchê-las. O que, as vezes,
é o que você quer, mas é

777
00:41:25,639 --> 00:41:28,869
um pouco pesado. Existe uma tonelada
de outras coisas

778
00:41:28,889 --> 00:41:33,049
no UItableView, mas esse é o básico
de como você faz ele funcionar

779
00:41:33,069 --> 00:41:36,529
e, é muito parecido com
UICollectionView. Vocês não devem

780
00:41:36,549 --> 00:41:39,210
ter nennhum problema transferindo
o seu conhecimendo

781
00:41:39,230 --> 00:41:41,249
conceitual da UICollectionView
para a

782
00:41:41,269 --> 00:41:42,249
UITableView.

783
00:41:42,269 --> 00:41:46,789
Ok? Alguma pergunta antes de
eu começar a demo disso aqui?

784
00:41:46,809 --> 00:41:50,940
Certo. Então minha demo.
Oh, e apenas olhando mais pra frente,

785
00:41:50,960 --> 00:41:53,679
próxima aula eu vou falar
sobre iPad finalmente, como nós

786
00:41:53,699 --> 00:41:57,179
fazemos coisas, construímos coisas
para o iPad e UIToolbar,

787
00:41:57,199 --> 00:42:00,869
e nós vamos começar a falar
sobre blocks. Talvez começaremos

788
00:42:00,889 --> 00:42:03,650
em multi-threading. Nós podemos
não conseguir chegar nisso na

789
00:42:03,670 --> 00:42:07,719
próxima aula que vai ser
a próxima depois da - é, não vai ter

790
00:42:07,739 --> 00:42:09,719
a seção de sexta-feira, nós vamos
falar sobre isso em um segundo.

791
00:42:09,739 --> 00:42:16,920
Ok, então a demo. Aqui vamos nós.
Então eu vou construir um novo app

792
00:42:16,940 --> 00:42:26,099
aqui. Novo app e o que ele
vai fazer, primeiro nós vamos

793
00:42:26,119 --> 00:42:29,099
construir esse app em duas partes.
Primeiro vamos construir apenas

794
00:42:29,119 --> 00:42:31,599
um app com uma simples ScrollView
e tudo que ele vai fazer é

795
00:42:31,619 --> 00:42:35,980
scrollar ao redor de uma imagem.
Vai ser uma imagem que eu peguei

796
00:42:36,000 --> 00:42:38,230
da internet na verdade, ok?
E eu a pego dinamicamente, espero que

797
00:42:38,250 --> 00:42:41,960
a internet esteja funcionando.
E ele vai scrollar ao redor

798
00:42:41,980 --> 00:42:44,460
dessa imagem, então vamos tentar
realmente entender

799
00:42:44,480 --> 00:42:47,210
a ScrollView começando com ela.
Então nós vamos aperfeiçoar o app

800
00:42:47,230 --> 00:42:50,460
para usarmos TableView. Então eu vou
criar um novo

801
00:42:50,480 --> 00:42:56,589
projeto aqui. Eu vou chamar
esse projeto de Shutterbug. E

802
00:42:56,609 --> 00:42:59,670
eu quero mostrar outra coisa também.
Eu não vou especificar nenhum

803
00:42:59,690 --> 00:43:02,420
prefixo de classe, então todos vocês
sabem o que vai acontecera qui

804
00:43:02,440 --> 00:43:05,269
quando eu criar esse app é que
meu Storyboard vai ter esse

805
00:43:05,289 --> 00:43:09,249
ViewController bem aqui. E ele vai ser
esse ViewController com

806
00:43:09,269 --> 00:43:13,599
nome genérico, ok? Que é um
nome ruim. Mas

807
00:43:13,619 --> 00:43:17,630
Não há nada que te impede de simplesmente
deletar isso, ok?

808
00:43:17,650 --> 00:43:19,630
Simplesmente coloque no lixo,
vai até seu

809
00:43:19,650 --> 00:43:20,630
storyboard,


810
00:43:20,650 --> 00:43:24,519
Pega essa coisa, deleta ela também.
E agora você meio que tem

811
00:43:24,539 --> 00:43:25,519
um app novo em folha.


812
00:43:25,539 --> 00:43:28,769
As vezes eu gosto de tirar essas coisas
do caminho. E agora eu tenho

813
00:43:28,789 --> 00:43:31,549
esse app super clean, com um
storyboard branco

814
00:43:31,569 --> 00:43:35,599
e sem MVCs, ok? As vezes,
é um bom modo de se começar.

815
00:43:35,619 --> 00:43:38,509
Certo. Qual é o primeiro
MVC que eu vou construir aqui?

816
00:43:38,529 --> 00:43:43,109
Certo. Eu vou ter um ViewController
no meu app. E eu

817
00:43:43,129 --> 00:43:47,619
vou chamar chamar a classe
desse negócio de

818
00:43:47,639 --> 00:43:50,029
ImageViewController. Certo?
Então vamos olhar para a

819
00:43:50,049 --> 00:43:52,529
ImageViewController. Eu vou fzer
uma ImageViewController aqui.

820
00:43:52,549 --> 00:43:56,389
Vamos em New File,
Objective-C class, ela vai ser um

821
00:43:56,409 --> 00:43:57,389
UIViewController.


822
00:43:57,409 --> 00:44:02,859
Eu vou chamá-la de ImageViewController.
E essa classe é

823
00:44:02,879 --> 00:44:07,130
melhor entendida olhando a
sua API pública, ok? Então vamos

824
00:44:07,150 --> 00:44:10,509
olhar a API pública dessa classe.
ImageViewController.

825
00:44:10,529 --> 00:44:13,819
E o que ela vai fazer, ela vai
ter uma property, uma 

826
00:44:13,839 --> 00:44:21,569
property pública, e vai ser
uma NSURL, imageURL. E o modo

827
00:44:21,589 --> 00:44:24,730
que essa classe vai funcionar é,
sempre que você setar essa

828
00:44:24,750 --> 00:44:28,599
imageURL, ela vai obter
essa imagem. Pode ser da internet,

829
00:44:28,619 --> 00:44:31,469
pode ser local. URLS podem
ser qualquer um dos dois. E ela

830
00:44:31,489 --> 00:44:34,409
vai mostrra essa imagem em uma
ScrollView, ok? É isso que

831
00:44:34,429 --> 00:44:37,980
essa classe faz. Isso é tudo
que essa classe faz, ok? É uma classe

832
00:44:38,000 --> 00:44:40,859
de visualização de imagem bem genérica.
Vocês vão achar essa código muito

833
00:44:40,879 --> 00:44:44,809
valioso para o seu homework, por exemplo.
Ok. Então o que nós precisamos

834
00:44:44,829 --> 00:44:49,569
fazer para implementar essa coisa.
Bom, vamos olhar o nosso

835
00:44:49,589 --> 00:44:53,069
Storyboard. Primeiro eu vou
pegar isso e setar a classe

836
00:44:53,089 --> 00:44:55,599
para ser ImageViewController.
Eu vou no Identity Inspector

837
00:44:55,619 --> 00:44:58,759
para fazê-la ser uma
ImageViewController.

838
00:44:58,779 --> 00:45:03,749
E vamos colocar uma ScrollView aqui,
porque nós vamos fazer com que ela

839
00:45:03,769 --> 00:45:06,069
possa scrollar.
Isso é bem fácil.

840
00:45:06,089 --> 00:45:10,139
Vamos aqui embaixo, nos nossos objetos,
aqui embaixo. Aqui está

841
00:45:10,159 --> 00:45:13,519
ScrollView. Então eu vou pegar
a ScrollView, colocá-la aqui.

842
00:45:13,539 --> 00:45:16,769
Eu vou deixar as coisinhas azuis
fazerem o trabalho delas, ok? Então se

843
00:45:16,789 --> 00:45:20,150
eu olhar para as minhas constraints,
vocês verão que elas são constraints

844
00:45:20,170 --> 00:45:24,039
bem legais. Tudo está amarrado
aos cantos. Certo?

845
00:45:24,059 --> 00:45:28,980
Então eu vou linkar essa scrollView
com um outlet no meu

846
00:45:29,000 --> 00:45:33,509
ImageViewController. Então
vamos CTRL + arrastar. Eu vou

847
00:45:33,529 --> 00:45:38,460
chamá-la de scrolView. Ok?
Então eu tenho esse outolet. Agora,

848
00:45:38,480 --> 00:45:43,960
eu posso conectar meu ScrollView
e agora eu vou construir

849
00:45:43,980 --> 00:45:47,079
a ImageView que vai estar
dentro da minha

850
00:45:47,099 --> 00:45:50,230
ScrollView. Eu vou construir
isso em código, ok? Eu poderia

851
00:45:50,250 --> 00:45:53,809
arrastar uma ImageView e colocá-la
aqui, mas como eu quero

852
00:45:53,829 --> 00:45:56,559
controlar o tamanho do contentArea
dependendo do tamanho da imagem

853
00:45:56,579 --> 00:46:00,059
então eu vou fazer isso em código.
Vamos fazer isso isso,

854
00:46:00,079 --> 00:46:03,059
no código, vamos criar mais espaço aqui
para que vocês possam ver

855
00:46:03,079 --> 00:46:07,319
o que está acontecendo. Então eu vou
usar o viewDidLoad, mas não

856
00:46:07,339 --> 00:46:12,109
isso. Certo Então eu vou 
criar uma property para a

857
00:46:12,129 --> 00:46:17,920
ImageView.
[ditando código]

858
00:46:17,940 --> 00:46:21,400
É assim que vou chamá-la.

859
00:46:21,420 --> 00:46:27,559
Eu vou instanciá-la "lazymente".
Ok? Eu vou apenas dizer

860
00:46:27,579 --> 00:46:33,230
[ditando código]

861
00:46:33,250 --> 00:46:38,359
[ditando código]

862
00:46:38,379 --> 00:46:39,359
Lembram-se?

863
00:46:39,379 --> 00:46:43,849
initWithFrame é o designated initializer
para qualquer view. E eu vou

864
00:46:43,869 --> 00:46:48,969
deixá-la com CGRectZero. Ok?
CGRectZero é

865
00:46:48,989 --> 00:46:51,880
origem zero e tamanho zero.
Por que eu estou deixando zero? Porque

866
00:46:51,900 --> 00:46:55,409
eu não conheço minha imagem ainda.
Ninguém chamou o setImageURL ainda.

867
00:46:55,429 --> 00:46:59,279
Então eu não sei que imagem vai ser,
então eu vou apenas criar

868
00:46:59,299 --> 00:47:01,999
um que é zero. Então
ela vai retornar isso. Ok, agora

869
00:47:02,019 --> 00:47:02,999
que eu tenho minha

870
00:47:03,019 --> 00:47:07,880
imageView no meu viewDidLoad,
eu vou apenas fazer

871
00:47:07,900 --> 00:47:14,409
[ditando código]
Agora, navamente,

872
00:47:14,429 --> 00:47:17,230
isso não vai mostrar nada
porque a) eu não setei minha imagem,

873
00:47:17,250 --> 00:47:20,139
e b) eu não setei o contentSize.
Então o contentSize 

874
00:47:20,159 --> 00:47:23,409
da ScrollView é zero
então ela vai ficar

875
00:47:23,429 --> 00:47:25,909
em branco, ok? Não vai haver
nada acontecendo

876
00:47:25,929 --> 00:47:33,179
lá. Agora, vamos seguir
e implementar o setter

877
00:47:33,199 --> 00:47:38,469
da nossa API pública, que é
esse setImageURL. Agora, quando

878
00:47:38,489 --> 00:47:43,190
alguém setar a imageURL,
eu preciso fazer algo como

879
00:47:43,210 --> 00:47:46,499
resetar a imagem ou algo assim, certo?
Porque eles mudaram

880
00:47:46,519 --> 00:47:49,579
a imagem. Eu preciso,
tipo, ajustar o contentArea

881
00:47:49,599 --> 00:47:50,719
dessa coisa.

882
00:47:50,739 --> 00:47:55,279
E setar essa imagem na ImageView.
Eu preciso fazer todas

883
00:47:55,299 --> 00:47:58,279
essas coisas. Então eu preciso
de algum método que vá fazer isso.

884
00:47:58,299 --> 00:48:02,599
Então vamos colocar um resetImage
aqui. Agora, eu preciso

885
00:48:02,619 --> 00:48:05,819
colocar esse resetImage em outro lugar,
a propósito. Que é aqui embaixo

886
00:48:05,839 --> 00:48:08,599
no viewDidLoad. Alguem consegue
pensar porque eu estou

887
00:48:08,619 --> 00:48:15,679
colocando no viewDidLoad também?
A resposta é que alguém pode chamar

888
00:48:15,699 --> 00:48:21,299
isso antes de eu estar carregado
e então no resetImage, onde eu 

889
00:48:21,319 --> 00:48:24,739
carrego a scrollView, o 
outlet da scrollview vai ser

890
00:48:24,759 --> 00:48:26,319
nil porque não estou carregado ainda.

891
00:48:26,339 --> 00:48:30,710
Ok, e, de fato, no resetImage
a primeira coisa que eu vou fazer

892
00:48:30,730 --> 00:48:32,960
é eu vou dizer: se self.scrollView,
então

893
00:48:32,980 --> 00:48:33,960
resete a imagem,

894
00:48:33,980 --> 00:48:36,960
caso contrário eu não posso fazer nada.
Então eu não vou fazer nada

895
00:48:36,980 --> 00:48:39,519
no resetImage, ok? Mas uma vez que
o viewDidLoad acontece,

896
00:48:39,539 --> 00:48:42,559
eu sei que eu tenho uma ScrollView agora,
e agora eu posso fazer a imagem.

897
00:48:42,579 --> 00:48:47,230
Ok? Faz sentido porque eu tneho
que fazer esse resetImage em ambos

898
00:48:47,250 --> 00:48:50,279
os lugares? Certo, então vamos
olhar para o resto de resetImage,

899
00:48:50,299 --> 00:48:54,859
e a primeira coisa que eu farei é:
eu sei que eu estou resetando

900
00:48:54,879 --> 00:49:01,329
minha imagem, então eu vou
setar o contentSize do meu scrollView

901
00:49:01,349 --> 00:49:04,940
para CGSizeZero, ok?

902
00:49:04,960 --> 00:49:09,139
Porque meu scrollView pode já ter
um contentArea e estar

903
00:49:09,159 --> 00:49:11,839
mostrando alguma outra imagem.
E agora se alguém chamar o

904
00:49:11,859 --> 00:49:14,789
setImageURL: eu vou colocar
algo novo ali. Então eu

905
00:49:14,809 --> 00:49:17,039
vou tirar a que já está lá
e eu também

906
00:49:17,059 --> 00:49:18,039
vou fazer isso

907
00:49:18,059 --> 00:49:21,539
na minha imageView, ok?
E setar a imagem dela pra nil.

908
00:49:21,559 --> 00:49:27,529
Vocês entendem? Agora, vamos pegar
os dados. Agora nós queremos

909
00:49:27,549 --> 00:49:30,749
ir na internet ou qualquer coisa assim
e obter os dados

910
00:49:30,769 --> 00:49:34,989
para aquela URL. E a maneira que 
fazemos isso é com um método de NSData.

911
00:49:35,009 --> 00:49:38,239
Agora, eu falei para vocês sobre o NSData,
é algo no Foundation que é

912
00:49:38,259 --> 00:49:41,059
apenas um saco de bits, certo?
Apenas contém bits.

913
00:49:41,079 --> 00:49:42,059
E nós podemos

914
00:49:42,079 --> 00:49:50,279
usar o NSData para initWithContentsOfURL.
Qualquer URL. E ele vai

915
00:49:50,299 --> 00:49:53,980
pegar essa URL e obter todo
o seu conteúdo em um

916
00:49:54,000 --> 00:50:00,109
saco de bits. Ok? E então,
nós vamos transformar esse saco de bits,

917
00:50:00,129 --> 00:50:09,150
UIImage... em uma imagem
se possível, usando 

918
00:50:09,170 --> 00:50:16,069
esse método. alloc initWithData:imageData,
ok? Agora, se esse

919
00:50:16,089 --> 00:50:18,849
saco de bits não for um arquivo
de imagem ou não puder ser

920
00:50:18,869 --> 00:50:22,529
interpretado como isso, então isso
vai retornar nil, ok? Então

921
00:50:22,549 --> 00:50:25,829
a imagem seria nil. Mesma coisa aqui.
Se isso for nil, ou se

922
00:50:25,849 --> 00:50:29,650
isso não for uma url real, então isso
vai retornar nil. E isso vai ser

923
00:50:29,670 --> 00:50:31,150
nil, e isso vai ser nil.

924
00:50:31,170 --> 00:50:34,690
Ok? Então se passarmos por ambos,
e a imagem não

925
00:50:34,710 --> 00:50:37,440
for nil, então nós carregamos
uma imagem com sucesso. Então vamos

926
00:50:37,460 --> 00:50:41,299
fazer algo nesse caso. Certo?
Então nós temos uma imagem, nós temos

927
00:50:41,319 --> 00:50:46,079
uma UIImage na nossa mão.
Todos vocês sabem o que é uma UIImage.

928
00:50:46,099 --> 00:50:49,940
Então, o que precisamos fazer?
Bom, precisamos fazer algumas coisas.

929
00:50:49,960 --> 00:50:53,529
Nós temos que setar o contentSize
do scrollView, ok? Nós vamos

930
00:50:53,549 --> 00:50:57,159
setá-lo para ser o tamanho da imagem.
Agora, esse é o grande espaço

931
00:50:57,179 --> 00:50:59,889
que eu vou poder scrollar.
Obviamente eu quero que

932
00:50:59,909 --> 00:51:03,139
ele seja o tamanho da imagem,
porque eu quero scrollar

933
00:51:03,159 --> 00:51:06,139
pela imagem inteira eu também
vou setar

934
00:51:06,159 --> 00:51:12,170
a imagem da imageView para ser
a imagem, ok? A ImageView tem

935
00:51:12,190 --> 00:51:14,749
uma property chamada image,
que é a UIImage que

936
00:51:14,769 --> 00:51:17,650
ela está mostrando. Mas somente
setando a image não reseta

937
00:51:17,670 --> 00:51:22,069
o frame da ImageView. Então eu tenho
que setar o frame

938
00:51:22,089 --> 00:51:25,199
da Image View que é onde
ela está no contentArea da

939
00:51:25,219 --> 00:51:28,359
scrollView, e eu vou setar
isso para CGRectMake... eu vou

940
00:51:28,379 --> 00:51:32,109
colocar no canto superior esquerdo
do contentArea e eu vou

941
00:51:32,129 --> 00:51:34,859
deixar ela ter o tamanho natural
da imagem,

942
00:51:34,879 --> 00:51:40,230
ok? Eu poderia setá-la para ser
um tamanho diferente e ela iria

943
00:51:40,250 --> 00:51:43,230
encolher ou esticar, mas eu quero
que seja o tamanho

944
00:51:43,250 --> 00:51:45,730
natural quando eu começar
a scrollar, ok?

945
00:51:45,750 --> 00:51:48,699
Alguma pergunta sobre isso?
É tudo bem direto. Agora,

946
00:51:48,719 --> 00:51:52,739
se eu rodar isso agora,
nada vai acontecer, ok? Eu vou mostrar

947
00:51:52,759 --> 00:51:55,739
e vocês verão, vai apenas ficar
em branco. Agora, por que isso está

948
00:51:55,759 --> 00:51:58,389
em branco? Bom, porque nós não
setamos nenhuma imagem. Certo? Nós não

949
00:51:58,409 --> 00:52:02,489
chamamos o setImageURL.
Agora, você poderia dizer:

950
00:52:02,509 --> 00:52:04,809
onde diabos eu vou
setar essa imagem?

951
00:52:04,829 --> 00:52:07,799
Eu não poso setar nessa classe.
Vocês entendem que essa é classe

952
00:52:07,819 --> 00:52:11,499
é uma classe genérica.
É uma classe que mostra imagens

953
00:52:11,519 --> 00:52:14,499
genéricas, então eu não poderia, tipo,
ter uma foto do Hawaii.

954
00:52:14,519 --> 00:52:17,999
Eu quero mostrar a vocês, mas eu não posso
colocar uma imagem do Hawaii aqui.

955
00:52:18,019 --> 00:52:20,690
Ok, essa classe não tem
nada a ver com o Hawaii. Entendem?

956
00:52:20,710 --> 00:52:25,739
Mas se eu olhar no meu Storyboard,
é tipo: bom, é... mas

957
00:52:25,759 --> 00:52:29,859
isso é tudo que eu tenho. Como eu
vou fazer essa coisa? Como eu

958
00:52:29,879 --> 00:52:33,249
seto essa UIImageURL?
E a resposta é: vocês podem

959
00:52:33,269 --> 00:52:41,829
usar herança (!). Nós vamos criar
outro controller, ok? Eu vou

960
00:52:41,849 --> 00:52:48,029
chamá-lo de HawaiiImageViewController
e ele vai

961
00:52:48,049 --> 00:52:49,779
ser uma subclasse de ImageViewController.

962
00:52:49,799 --> 00:52:55,929
Ok? E esse HawaiiImageViewController
vai ter apenas

963
00:52:55,949 --> 00:53:00,599
uma coisa nele. No seu viewDidLoad
eu vou dizer

964
00:53:00,619 --> 00:53:11,079
self.imageURL =
[[NSURL alloc] initWithString:]. E eu vou

965
00:53:11,099 --> 00:53:12,079
passar a string

966
00:53:12,099 --> 00:53:15,329
da URL que é o bem-conhecido
[ditando url]

967
00:53:15,349 --> 00:53:19,269
[ditando url]

968
00:53:19,289 --> 00:53:25,529
[ditando url]

969
00:53:25,549 --> 00:53:31,710
Espero que tenha digitado isso certo.
Ok, então eu estou apenas

970
00:53:31,730 --> 00:53:34,710
pegando uma URL internet, que
é uma imagem. Eu nem tenho certeza

971
00:53:34,730 --> 00:53:37,710
que é o Hawaii. Parece que poderia
ser o Hawaii, nós vamos ver.

972
00:53:37,730 --> 00:53:41,210
E eu estou apenas setando ela, ok?
E agora tudo que eu preciso fazer

973
00:53:41,230 --> 00:53:44,389
é voltar ao meu Storyboard
e setar essa coisa para ser,

974
00:53:44,409 --> 00:53:47,249
ir até o identity inspector
e ao invés de ser uma ImageViewController

975
00:53:47,269 --> 00:53:52,170
genérica, eu quero que ela seja,
eu vou aqui e dizer

976
00:53:52,190 --> 00:53:56,460
Hawaii. HawaiiImageViewController, ok?
Agora, quando eu rodar,

977
00:53:56,480 --> 00:54:00,849
Como é um HawaiiImageViewControoler,
ele vai obter

978
00:54:00,869 --> 00:54:04,309
Ele a obteve instantaneamente,
porque a conexão de internet

979
00:54:04,329 --> 00:54:05,969
da Stanford e muito boa.

980
00:54:05,989 --> 00:54:10,659
Mas sabe? No seu iPhone,
você pode ter uma conexão um

981
00:54:10,679 --> 00:54:13,909
pouco mais devagar (só um pouco...) se ela
for pela rede de celular ou algo assim. Mas

982
00:54:13,929 --> 00:54:16,409
aqui está, e olhem. Está
funcionando bem. Fazendo o panning, ok? Agora,

983
00:54:16,429 --> 00:54:19,409
eu não posso ver se tem alguém
na praia ali

984
00:54:19,429 --> 00:54:22,409
muito bem. Porque está meio pequeno.
Então eu gostaria de fazer zoom, ok?

985
00:54:22,429 --> 00:54:25,909
Mas eu não posso fazer zoom, ok?
Nós não implementamos o zooming

986
00:54:25,929 --> 00:54:28,619
no view controll-- no ImageViewController.
Então, vamos

987
00:54:28,639 --> 00:54:31,170
fazer isso. Voltamos
ao nosso Image Controller.

988
00:54:31,190 --> 00:54:35,039
E eu disse a vocês que para
implementar zooming, vocês precisam

989
00:54:35,059 --> 00:54:38,980
fazer basicamente duas coisas. Uma é que
vocês precisam setar o min e o max.

990
00:54:39,000 --> 00:54:43,569
Então vamos fazer isso. self.scrollView.min,
nós vamos

991
00:54:43,589 --> 00:54:44,569
setar o min

992
00:54:44,589 --> 00:54:51,369
igual a 0.2 e self.scrollView.max
igual a 5.0.

993
00:54:51,389 --> 00:54:52,369
Então nós vamos

994
00:54:52,389 --> 00:54:55,839
ir de 1/5 do tamanho para 5
vezes o tamanho, ok?

995
00:54:55,859 --> 00:54:59,449
Um zoom grande, certo?
Então fizemos isso. A outra coisa

996
00:54:59,469 --> 00:55:02,199
que eu disse que vocês precisam fazer
é implementar o lance do delegate.

997
00:55:02,219 --> 00:55:04,109
Ok? Isso é fácil. Nós vamos
apenas

998
00:55:04,129 --> 00:55:06,109
self.scrollView.delegate = self.


999
00:55:06,129 --> 00:55:10,099
Mas nós vamos receber
um warning se fizermos isso

1000
00:55:10,119 --> 00:55:14,809
e por que? Porque nós
não dissemos que nós

1001
00:55:14,829 --> 00:55:17,559
vamos implementar o protocol
do UIScrollView.

1002
00:55:17,579 --> 00:55:21,230
Então eu preciso voltar
para o topo aqui e dizer:

1003
00:55:21,250 --> 00:55:25,829
UIScrollViewDelegate. Agora,
você pode pensar: oh, vamos receber

1004
00:55:25,849 --> 00:55:28,329
um warning agora, porque nós não
implementamos esse

1005
00:55:28,349 --> 00:55:31,799
protocol. Mas todos os métodos nesse
protocol são optional,

1006
00:55:31,819 --> 00:55:35,009
então nós implementamos todos eles.
Todos os required, que é nenhum,

1007
00:55:35,029 --> 00:55:37,900
ok? Entretando, nós não vamos
receber o warning

1008
00:55:37,920 --> 00:55:40,199
aqui embaixo mais, certo? Nós podemos
dizer que o delegate = self.

1009
00:55:40,219 --> 00:55:41,199
Ok?

1010
00:55:41,219 --> 00:55:45,400
E a última coisa que nós
devemos fazer é implementar

1011
00:55:45,420 --> 00:55:50,670
o método que nós queremos implementar
que é o 

1012
00:55:50,690 --> 00:55:54,539
viewForZoomingInScrollView. Ok?

1013
00:55:54,559 --> 00:55:55,539
Então nós vamos

1014
00:55:55,559 --> 00:55:59,230
apenas retornar nossa imageView,
porque é essa

1015
00:55:59,250 --> 00:56:01,559
a view que está dentro do
contentArea que nós queremos

1016
00:56:01,579 --> 00:56:02,559
que seja zoomada,

1017
00:56:02,579 --> 00:56:05,519
zoom in e out. Na verdade tem mais
uma coisa que eu

1018
00:56:05,539 --> 00:56:09,019
vou fazer, que eu já alertei vocês,
vocês precisam fazer, que é

1019
00:56:09,039 --> 00:56:12,329
aqui em cima, onde nós estamos
setando o contentSize de uma

1020
00:56:12,349 --> 00:56:23,889
nova imagem que está chegando.
Eu vou resetar meu zoomScale para 1.0.

1021
00:56:23,909 --> 00:56:28,019
Ok? Isso é porque, novamente,
se eu fiz zoom in, então meu

1022
00:56:28,039 --> 00:56:30,739
contentArea vai ficar maior e menor.
Então se eu

1023
00:56:30,759 --> 00:56:33,739
tentar setar o contentSize quando
eu estou com zoom, eu não vou

1024
00:56:33,759 --> 00:56:36,489
obter o que eu quero aqui. Certo?
Então eu vou resetar

1025
00:56:36,509 --> 00:56:39,989
o zoomScale para 1. Toda vez
que eu receber uma imagem nova

1026
00:56:40,009 --> 00:56:42,989
e eu setar o seu tamanho. Certo?
Então agora, quando nós rodarmos,

1027
00:56:43,009 --> 00:56:45,929
nós devemos conseguir segurar o option.
Lembrem-se que é assim que

1028
00:56:45,949 --> 00:56:50,009
nós fazemos o pinch. Nós podemos
fazer o zoom e nós podemos ver. Ninguém

1029
00:56:50,029 --> 00:56:54,219
nessa praia. E ninguém aqui também.
Ok? Então, novamente,

1030
00:56:54,239 --> 00:56:55,980
Eu não sei se esse é de fato o Hawaii.

1031
00:56:56,000 --> 00:56:59,639
Poderia ser, sei lá, Costa Rica,
ou... eu não sei

1032
00:56:59,659 --> 00:57:02,389
o que poderia ser. Mas, de qualquer jeito.
Espero que vocês tenham entendido.

1033
00:57:02,409 --> 00:57:04,639
Todo mundo bem em relação a isso?
Entenderam? Alguma pergunta

1034
00:57:04,659 --> 00:57:06,639
sobre ScrollView?
É realmente... não é tão ruim.

1035
00:57:06,659 --> 00:57:09,539
>> Ok. Pergunta.

1036
00:57:09,559 --> 00:57:10,539
>> [Estudante Perguntando]

1037
00:57:10,559 --> 00:57:14,249
>> YEAH, então a pergunta é:
existe alguma maneira de prevenir

1038
00:57:14,269 --> 00:57:17,389
essa negócio branco? Vocês vêem
quando eu... ele faz

1039
00:57:17,409 --> 00:57:20,909
o "bounce" assim e mostra o negócio branco?
E a resposta é:

1040
00:57:20,929 --> 00:57:24,069
algumas coisas. Essa parte branca
é apenas o background

1041
00:57:24,089 --> 00:57:26,819
sendo mostrado. Então você poderia mudá-lo
para uma cor diferente

1042
00:57:26,839 --> 00:57:29,319
se você quiser. E também existe
uma property no ScrollView

1043
00:57:29,339 --> 00:57:31,940
chamada alguma coisa tipo "setBounces"
ou algo assim,

1044
00:57:31,960 --> 00:57:35,190
você pode setar para no
e então ele não vai fazer o bounce. Ele não vai

1045
00:57:35,210 --> 00:57:38,190
fazer esse lance de "bounce". Ele vai
simplesmente parar e então

1046
00:57:38,210 --> 00:57:41,190
você não verá esse branco. Mas o bouncing,
as pessoas estão acostumadas

1047
00:57:41,210 --> 00:57:43,940
com o bouncing. Eles meio que gostam
do bouncing. É bom, então

1048
00:57:43,960 --> 00:57:45,940
eu meio que recomendo ao invés
de desligar o bouncing. Pergunta.

1049
00:57:45,960 --> 00:57:48,690
>> [Estudante Perguntando]

1050
00:57:48,710 --> 00:57:53,989
>> A pergunta é:
por favor diga novamente

1051
00:57:54,009 --> 00:57:58,480
por que eu tenho que resetar
a imagem aqui no viewDidLoad. E aqui

1052
00:57:58,500 --> 00:58:03,999
quando eu seto a imagem. Ok.
A pergunta é que eu preciso

1053
00:58:04,019 --> 00:58:07,249
realmente setar ela aqui. Cada vez que
você mudar a imageURL,

1054
00:58:07,269 --> 00:58:10,149
eu quero resetar a imagem para
qualquer que seja a nova imageURL

1055
00:58:10,169 --> 00:58:13,749
que você pediu para mostrar, ok?
Entretando, se isso for

1056
00:58:13,769 --> 00:58:18,690
chamado antes de eu acabar de carregar,
por exemplo, no prepareForSegue,

1057
00:58:18,710 --> 00:58:22,029
certo? Lembrem-se, prepareForSegue
é chamado antes de você acabar

1058
00:58:22,049 --> 00:58:25,409
de carregar. Então, se eu tentar
rodar esse código, ele não

1059
00:58:25,429 --> 00:58:28,879
fará nada. Porque o self.scrollView
será nil,

1060
00:58:28,899 --> 00:58:33,089
certo? Porque meu... eu não estou
carregado. Então, por causa disso,

1061
00:58:33,109 --> 00:58:35,969
quando eu finalmente fui carregado,
eu preciso me certificar que minha imagem

1062
00:58:35,989 --> 00:58:40,109
foi setada. Ok? E isso funcionará
porque eu guardei qual

1063
00:58:40,129 --> 00:58:42,859
era a imagem e quando
a pessoa a setou, ok?

1064
00:58:42,879 --> 00:58:48,879
Essa resposta é suficiente? Ok,
agora TableView. O que nós

1065
00:58:48,899 --> 00:58:51,879
vamos fazer para TableView? Certo,
então minha demo

1066
00:58:51,899 --> 00:58:54,889
de Tableview aqui é: eu vou
pegar um monte de

1067
00:58:54,909 --> 00:58:58,399
últimas fotos que foram
tiradas no Flickr. E eu vou

1068
00:58:58,419 --> 00:59:02,289
colocar o nome delas na table,
junto com quem, a pessoa

1069
00:59:02,309 --> 00:59:05,589
que tirou elas e então eu vou
deixar você clicar em uma

1070
00:59:05,609 --> 00:59:08,469
e mostrar a vocês a imagem.
Ok, agora, isso parece tipo: uou,

1071
00:59:08,489 --> 00:59:11,449
isso é muita coisa pra fazer
e você só tem 12 minutos sobrando,

1072
00:59:11,469 --> 00:59:13,949
o que você está fazendo? Mas isso
é totalmente fazível, ok?

1073
00:59:13,969 --> 00:59:17,449
TableView vai fazer um monte
do trabalho para nós aqui, ok?

1074
00:59:17,469 --> 00:59:20,449
No Flickr, eu vou prover
a vocês um pequeno código para fazer

1075
00:59:20,469 --> 00:59:22,699
a parte do Flickr. Certo, então
como vai ser a cara disso?

1076
00:59:22,719 --> 00:59:23,699
Vamos começar

1077
00:59:23,719 --> 00:59:29,359
essa aqui voltando para o nosso
storyboard e

1078
00:59:29,379 --> 00:59:34,089
arrastando uma tableview. Ok?
Novamente, eu poderia ir aqui embaixo

1079
00:59:34,109 --> 00:59:38,559
e arrastar apenas a TableView bem aqui.
TableView. Assim como 

1080
00:59:38,579 --> 00:59:40,710
eu arrastei uma Collection View,
mas eu na verdade vou

1081
00:59:40,730 --> 00:59:45,069
para o topo e arrastar
uma tableview pré-fabricada.

1082
00:59:45,089 --> 00:59:49,129
GLUP! Ok? TableView completa.
Se você olhar a classe,

1083
00:59:49,149 --> 00:59:50,129
ela já é

1084
00:59:50,149 --> 00:59:53,999
UITableViewController. Ok?
Então ela já sabe

1085
00:59:54,019 --> 00:59:57,929
como interagir com a tableView.
Se você olhar para os seus outlets,

1086
00:59:57,949 --> 01:00:00,879
as coisas da tableView.
O datasource e o delegate já estão

1087
01:00:00,899 --> 01:00:04,489
lindados para o meu controller, ok?
Isso é da hora.

1088
01:00:04,509 --> 01:00:08,809
Já está pronto. O que precisamos
fazer agora? Bom,

1089
01:00:08,829 --> 01:00:11,059
mesmo que nós temos um
TableViewController pré-fabricado, nós ainda

1090
01:00:11,079 --> 01:00:14,420
precisamos fazer uma subclasse dele.
Porque nós queremos ter alguma lógica

1091
01:00:14,440 --> 01:00:17,909
nessa table, tipo,
gerenciar esses dados, essas cells.

1092
01:00:17,929 --> 01:00:21,889
Então vamos fazer isso. Vamos aqui,
eu vou criar uma

1093
01:00:21,909 --> 01:00:22,889
nova classe.

1094
01:00:22,909 --> 01:00:29,059
Essa aqui. Eu vou chamá-la de
FlickerPhotoTVC, abreviação de

1095
01:00:29,079 --> 01:00:32,920
TableViewController. E eu quero
me certificar que é uma subclasse

1096
01:00:32,940 --> 01:00:34,920
de UITableViewController. Se você
esquecer essa parte,

1097
01:00:34,940 --> 01:00:36,399
você vai quebrar tudo
no seu

1098
01:00:36,419 --> 01:00:40,529
TableViewController, que você arrastou,
ok? Agora eu gosto

1099
01:00:40,549 --> 01:00:44,219
de colocar esse pequeno TVC porque
já tem muitas palavras,

1100
01:00:44,239 --> 01:00:46,469
TableViewController e isso começa
a ficar realmente comprido,

1101
01:00:46,489 --> 01:00:49,469
e eu realmente quero focar
o nome da minha classe nessa parte e

1102
01:00:49,489 --> 01:00:54,109
desfocar o TVC no fim um pouco.
Oops, Cuidado com isso.

1103
01:00:54,129 --> 01:00:57,960
Bom, de qualquer modo, FlickrPhotoTVC.
Eu vou chamar disso

1104
01:00:57,980 --> 01:00:59,960
porque é uma TableViewController
de fotos do Flickr. Ok,

1105
01:00:59,980 --> 01:01:00,960
então vamos clicar

1106
01:01:00,980 --> 01:01:07,429
em next. Temos nossa
nova classe, aqui está.

1107
01:01:07,449 --> 01:01:11,299
Vocês vêem aqui está
o seu inicializador, nós nunca vamos fazer isso.

1108
01:01:11,319 --> 01:01:14,499
viewDidLoad, não acho que precisamos disso.
Eu não vou manusear

1109
01:01:14,519 --> 01:01:17,219
nenhum memory warning, embora
isso é uma classe... é...

1110
01:01:17,239 --> 01:01:19,749
provavelmente não vou precisar disso.
Os dados que estou pegando do Flicker

1111
01:01:19,769 --> 01:01:22,639
não são tão grandes. Aqui estão
os dados,

1112
01:01:22,659 --> 01:01:26,940
TableViewDataSource. Nós vamos obter
isso em um segundo. Aqui temos

1113
01:01:26,960 --> 01:01:29,279
um monte de coisas de delegate
e data source que eles meio que

1114
01:01:29,299 --> 01:01:32,659
te dão comentados para "stubs",
que nós também

1115
01:01:32,679 --> 01:01:35,739
não vamos usar. Vamos nos livrar disso tudo.
Então nós vamos

1116
01:01:35,759 --> 01:01:36,739
voltar para isso

1117
01:01:36,759 --> 01:01:39,949
em um segundo. Agora,
a mesma coisa que fizemos com o

1118
01:01:39,969 --> 01:01:44,440
ImageViewController. Vamos falar sobre
a API pública dessa coisa, ok?

1119
01:01:44,460 --> 01:01:47,980
Então, esse ViewController, o que ele faz?
Bom, ele recebe uma

1120
01:01:48,000 --> 01:01:51,569
lista de fotos do Flickr e
as mostra. Então, sua

1121
01:01:51,589 --> 01:01:59,009
API pública é: uma property,
nonatomic, strong, NSArray

1122
01:01:59,029 --> 01:02:03,190
*photos. E esse de NSDictionary,
não se preocupem com isso

1123
01:02:03,210 --> 01:02:06,219
por enquanto. O que existe nesses
dicionaries. Eu vou

1124
01:02:06,239 --> 01:02:07,719
mostrar a vocês em um segundo.


1125
01:02:07,739 --> 01:02:10,219
Mas isso é apenas
um array de dicionários. E cada

1126
01:02:10,239 --> 01:02:12,969
dicionário tem várias pequenas
entradas sobre uma foto

1127
01:02:12,989 --> 01:02:19,629
do Flickr, ok? Então,
esse é o nosso model desse MVC,

1128
01:02:19,649 --> 01:02:23,129
e quando nós os setarmos, nós vamos
usá-lo para direcionar o

1129
01:02:23,149 --> 01:02:26,369
data source da tableView.
Agora, como esse é o nosso model,

1130
01:02:26,389 --> 01:02:29,359
toda vez que ele mudar, eu preciso
fazer um reload da TableView inteira,

1131
01:02:29,379 --> 01:02:30,359
porque esse

1132
01:02:30,379 --> 01:02:34,509
é o model para a TableView.
Então bem aqui eu vou

1133
01:02:34,529 --> 01:02:41,420
setar as fotos. E eu vou dizer
self.tableView...

1134
01:02:41,440 --> 01:02:42,420
disse a vocês

1135
01:02:42,440 --> 01:02:48,449
que isso já estaria prointo pra vocês,
reloadData. Ok,

1136
01:02:48,469 --> 01:02:50,199
é muito importante qu entendam isso.
Quando eu mudar

1137
01:02:50,219 --> 01:02:51,199
o meu model,

1138
01:02:51,219 --> 01:02:53,949
eu tenho que recarregar os dados.
É uma mudança total

1139
01:02:53,969 --> 01:02:59,839
do model, ok? Certo,
isso é bom. Vamos voltar

1140
01:02:59,859 --> 01:03:02,499
ao nosso Storyboard e setar essa coisa.
Ok, uma coisa que queremos fazer é

1141
01:03:02,519 --> 01:03:08,059
nós queremos inspecionar o
TableViewController

1142
01:03:08,079 --> 01:03:10,999
e nos certificar que ele não é
um TableViewController, que ele é

1143
01:03:11,019 --> 01:03:14,690
um FlickrPhotoTVC. Certo?
Isso é algo fácil

1144
01:03:14,710 --> 01:03:18,849
de se esquecer. E nós vamos
mudar as cells aqui. Vamos

1145
01:03:18,869 --> 01:03:22,690
fazê-las serem subtitled. 
Nós vamos fazer com que elas

1146
01:03:22,710 --> 01:03:24,909
tenham o mesmo nome da foto
e da pessoa que a tirou.

1147
01:03:24,929 --> 01:03:27,609
E então, claro,
nós precisamos do imporantíssimo

1148
01:03:27,629 --> 01:03:30,649
reuse identifier, que eu vou chamar
de flickr photo, porque

1149
01:03:30,669 --> 01:03:33,399
é isso que tem nessa cell,
uma foto do Flickr. Ok, 

1150
01:03:33,419 --> 01:03:36,699
isso é algo bom. E é isso
que nós vamos usar no nosso lance

1151
01:03:36,719 --> 01:03:39,949
de reúso. Na verdade, vamos prosseguir e fazer
isso agora mesmo.

1152
01:03:39,969 --> 01:03:42,449
Eu apenas copiei isso. Eu vou voltar aqui,
estou scrollando para

1153
01:03:42,469 --> 01:03:45,199
o lance de reuse e colando aqui.
Percebam que

1154
01:03:45,219 --> 01:03:47,449
o template faz esse pequeno
identificador de cell estática, que é

1155
01:03:47,469 --> 01:03:49,449
legal. Não é necessário.

1156
01:03:49,469 --> 01:03:53,249
Você pode definitivamente
colocar essa coisa bem aqui, se

1157
01:03:53,269 --> 01:03:58,839
você quiser. Ok. Eu acho que
isso é tudo que precisamos para

1158
01:03:58,859 --> 01:04:01,869
o nosso Storyboard, porque o datasource
já está linkado para nós

1159
01:04:01,889 --> 01:04:05,679
e todas essas coisas. Uma coisa,
eu vou fazer essa coisa

1160
01:04:05,699 --> 01:04:08,739
ser a coisa que inicia, ao invés
do meu lance do Hawaii, ok?

1161
01:04:08,759 --> 01:04:12,059
Nós vamos usar esse mais tarde,
mas eu vou fazer com que

1162
01:04:12,079 --> 01:04:16,589
comece pela tabela. Então eu posso
rodar isso agora e

1163
01:04:16,609 --> 01:04:17,589
ele vai estar

1164
01:04:17,609 --> 01:04:20,339
em branco porque eu não fiz
a parte de fetch do Flickr. Eu não

1165
01:04:20,359 --> 01:04:23,339
obtive nenhuma foto do Flickr, mas
pelo menos está mostrando

1166
01:04:23,359 --> 01:04:25,089
uma TableView em branco.
E ele está pergundando ao data source

1167
01:04:25,109 --> 01:04:26,089
e o data source está

1168
01:04:26,109 --> 01:04:32,289
dizendo que não há rows. Uma section,
sem rows. Ok?

1169
01:04:32,309 --> 01:04:35,649
Vamos implementar esse
UITableViewDataSource, bem aqui.

1170
01:04:35,669 --> 01:04:38,619
O número de sections, nós vamos
ter apenas

1171
01:04:38,639 --> 01:04:40,879
uma section, então nós não
precisamos implementar esse método.

1172
01:04:40,899 --> 01:04:45,059
Todo mundo entende isso. Certo?
O default é 1. Então

1173
01:04:45,079 --> 01:04:48,129
faça isso. mas agora nós precisamos
do numberOfRowsInSection. E acontece

1174
01:04:48,149 --> 01:04:51,359
que isso é bem fácil
de implementar também. Isso é apenas

1175
01:04:51,379 --> 01:04:53,359
[self.photos count]


1176
01:04:53,379 --> 01:04:56,699
Lembrem-se que "photos"
é um Array de

1177
01:04:56,719 --> 01:04:59,269
NSDictionaries, onde cada um
é uma foto. Então, quantos existirem

1178
01:04:59,289 --> 01:05:02,219
ali, são quantas fotos temos
na nossa table, ok?

1179
01:05:02,239 --> 01:05:05,639
Super fácil. Configurando a cell
qeu vou fazer

1180
01:05:05,659 --> 01:05:06,639
desse modo.

1181
01:05:06,659 --> 01:05:09,639
Eu vou dizer
cell.textLabel, esse é o título.

1182
01:05:09,659 --> 01:05:16,399
[ditando código]

1183
01:05:16,419 --> 01:05:19,149
Eu vou implementar esse método
em um segundo e então o

1184
01:05:19,169 --> 01:05:24,609
detailTextLabel, esse é o
pequeno subtítulo, igual a

1185
01:05:24,629 --> 01:05:32,119
[ditando código],
ok? novamente estamos 

1186
01:05:32,139 --> 01:05:35,919
dentro do cellForRowAtIndexPath,
então nós sabemos onde procurar

1187
01:05:35,939 --> 01:05:37,919
no nosso model. Vai ser
indexPath.row, nós temos apenas

1188
01:05:37,939 --> 01:05:38,919
uma section,

1189
01:05:38,939 --> 01:05:41,169
então nós não vamos olhar
para o indexPath.section.

1190
01:05:41,189 --> 01:05:42,169
Então vamos

1191
01:05:42,189 --> 01:05:45,919
aqui em cima e implementar esses.
[ditando código]

1192
01:05:45,939 --> 01:05:52,419
vai serum unsigned integer.
A então nós temos

1193
01:05:52,439 --> 01:05:58,399
subtitleForRow, é quase
a mesma coisa. Ok? Então,

1194
01:05:58,419 --> 01:06:00,899
como nós vamos implementar essas coisas?
Bom, nós precisamos olhar

1195
01:06:00,919 --> 01:06:04,559
nos dicionários do Flickr, ok?
E olhar o título

1196
01:06:04,579 --> 01:06:07,279
e olhar o dono.
Então como nós vmos saber

1197
01:06:07,299 --> 01:06:08,279
quais são as chaves

1198
01:06:08,299 --> 01:06:11,940
que estão lá?
A resposta é que eu vou dar um código a vocês.

1199
01:06:11,960 --> 01:06:14,440
Vêem esse pequeno FlickrFetcher aqui?
Isso vai ser

1200
01:06:14,460 --> 01:06:17,730
postado e vocês vão apenas
arrastá-lo para dentro.

1201
01:06:17,750 --> 01:06:21,969
Ok? Se certifiquem-se que
vocês tem ambos checados. Eu digo isso

1202
01:06:21,989 --> 01:06:24,969
várias vezes nesse curso
e ainda é esquecido, eu sei.

1203
01:06:24,989 --> 01:06:28,539
E agora nós temos esse
FlickrFetcher e se vocês olharem

1204
01:06:28,559 --> 01:06:31,039
no FlickrFetcher, aqui está,
eu tenho que tomar o cuidado de dizer

1205
01:06:31,059 --> 01:06:34,059
isso, a propósito.
Exitem três arquivos. O FlickrAPIKey,

1206
01:06:34,079 --> 01:06:37,359
vocês vão colocar a sua key
da API do Flicker aqui

1207
01:06:37,379 --> 01:06:39,259
e tem um link no homework que te diz
como você consegue

1208
01:06:39,279 --> 01:06:42,679
obtê-la. E tem também um
FlickrFetcher.h e esse tem

1209
01:06:42,699 --> 01:06:46,029
as chaves, ok? Então,
para a foto, você tem o título

1210
01:06:46,049 --> 01:06:49,529
e a descrição, photoID, que é
um id único, você tem

1211
01:06:49,549 --> 01:06:52,909
o dono dela, certo, o lugar
que foi tirada. Então essas

1212
01:06:52,929 --> 01:06:56,869
são as chaves do dictionary.
Ok, entõa tudo que preciso fazer

1213
01:06:56,889 --> 01:07:02,759
aqui é importar esse FlickrFetcher,
FlickerFetcher.h

1214
01:07:02,779 --> 01:07:09,199
e então eu posos apenas dizer
que isso é

1215
01:07:09,219 --> 01:07:10,199
self.photos[row]

1216
01:07:10,219 --> 01:07:16,669
isso vai me dar o dictionary.
[FLICKR_PHOTO_TITLE],

1217
01:07:16,689 --> 01:07:20,199
por exemplo. ISso vai me dar
o título para essa row.

1218
01:07:20,219 --> 01:07:22,889
Então esse é o título.
Agora, você pode achar que está pronto,

1219
01:07:22,909 --> 01:07:27,539
mas na verdade você não está,
porque o modo

1220
01:07:27,559 --> 01:07:29,960
como a API do Flickr funciona,
você nem sempre recebe uma

1221
01:07:29,980 --> 01:07:30,960
string no título.

1222
01:07:30,980 --> 01:07:36,069
É possível receber NULL, ok?
E NULL não é zero,

1223
01:07:36,089 --> 01:07:37,069
nem nil,

1224
01:07:37,089 --> 01:07:42,249
é um objeto chamado NSNull, ok?
E isso não é uma string.

1225
01:07:42,269 --> 01:07:46,269
Então se eu tentar dizer
cell.textLabel = essa coisa,

1226
01:07:46,289 --> 01:07:51,339
ele vai crashar, ok? Então
eu vou dar um jeito nisso

1227
01:07:51,359 --> 01:07:57,419
pegando a description dessa coisa.

1228
01:07:57,439 --> 01:08:01,089
Porque a description de NSNull é
<null>. E a description da

1229
01:08:01,109 --> 01:08:04,480
string é a própria string. WOOHOO!
Eu estou fazendo

1230
01:08:04,500 --> 01:08:08,389
uma gambiarra aqui, mas esse é o modo
que eu fiz isso.

1231
01:08:08,409 --> 01:08:11,609
E então o subtitle ao invés de ser
o title será

1232
01:08:11,629 --> 01:08:18,320
o owner, ok? Então, novamente,
nós temos uma classe completamente genérica

1233
01:08:18,340 --> 01:08:22,259
aqui. Você seta um array
de fotos do Flickr e ele vai mostrá-los,

1234
01:08:22,279 --> 01:08:26,019
ok? Nós temos que fazer a mesma coisa
que nós fizemos com Hawaii.

1235
01:08:26,039 --> 01:08:28,929
Que é, ir até o FlickrFetch,
que é, nesse caso, as fotos

1236
01:08:28,949 --> 01:08:31,570
do Flickr que nós queremos são
as últimas que foram

1237
01:08:31,590 --> 01:08:36,259
postadas. Certo? Então vamos
voltar aqui, New File,

1238
01:08:36,279 --> 01:08:42,320
criar uma nova classe,
eu vou chamá-la de LatestFlickrPhotosTVC

1239
01:08:42,340 --> 01:08:50,179
e ela vais er uma subclasse de

1240
01:08:50,199 --> 01:08:51,179
FlickrPhotoTVC.

1241
01:08:51,199 --> 01:08:56,329
E eu sempre coloca isso aqui
e eu não quero isso, ok?

1242
01:08:56,349 --> 01:09:00,280
LatestFlickrPhtoos. Fazemos isso.
Aqui está.

1243
01:09:00,300 --> 01:09:04,039
Exatamente a mesma coisa novamente.
Tudo que farei aqui será

1244
01:09:04,059 --> 01:09:06,539
no meu viewDidLoad eu vou
fazer o que eu quer,

1245
01:09:06,559 --> 01:09:07,539
que nesse caso é

1246
01:09:07,559 --> 01:09:18,349
vou usar outro FlickrFetcher,
que é o

1247
01:09:18,369 --> 01:09:24,909
[ditando código]

1248
01:09:24,929 --> 01:09:28,190
Ok? Tudo que isso faz é:
ele faz uma query no Flickr

1249
01:09:28,210 --> 01:09:31,820
e te devolve um array de dicionários.
Ok? Das últimas fotos

1250
01:09:31,840 --> 01:09:34,929
tiradas no Flickr. Updateadas
a cada 15 minutos mais ou menos. É o

1251
01:09:34,949 --> 01:09:39,929
que parece. Ok,
e novamente quando nós chamarmos

1252
01:09:39,949 --> 01:09:41,999
self.photos ele vai
fazer o update automaticamente porque ele vai

1253
01:09:42,019 --> 01:09:50,419
fazer o reload do TableView aqui,
ok? Faz sentido? Ok,

1254
01:09:50,439 --> 01:09:55,329
então isso não quer ser genérico,
FlickrPhotoTVC, ele quer

1255
01:09:55,349 --> 01:10:03,879
ser esse... como qu eeu chamei?
Latest. E eu acho

1256
01:10:03,899 --> 01:10:07,379
que eu coloquei um S aqui também.
Certo, aqui vamos nós.

1257
01:10:07,399 --> 01:10:10,379
Novamente, vêem o delay aqui?
Eu não posso usar meu iPhone.

1258
01:10:10,399 --> 01:10:14,309
Isso é ruim. Ok? Esse delay é ruim.
Completamente inaceitável.

1259
01:10:14,329 --> 01:10:17,480
Entretando, eu vou permitir que vocês,
eu vou aceitar isso nessa semana

1260
01:10:17,500 --> 01:10:19,730
e na proxima semana nós vamos aprender
sobre multi-threading e vamos

1261
01:10:19,750 --> 01:10:22,450
nos livrar disso, ok?
Porque isso é totalmente inaceitável.

1262
01:10:22,470 --> 01:10:25,969
Nunca construam um app desse modo.
Bom, aqui estão as últimas

1263
01:10:25,989 --> 01:10:28,169
fotos do Flickr. Vocês podem ver
que ela está dando os títulos delas.

1264
01:10:28,189 --> 01:10:30,999
Esses títulos são setados
pelas pessoas que as tiram,

1265
01:10:31,019 --> 01:10:33,749
então alguns títulos são melhores
que outros. Mas o que queremos na verdade

1266
01:10:33,769 --> 01:10:37,530
é quando eu clicar nelas,
eu quero vê-las. Ok? Então,

1267
01:10:37,550 --> 01:10:41,389
para fazer isso, eu preciso de um segue
dessa cell para um ViewController.

1268
01:10:41,409 --> 01:10:44,049
Agora, eu não quero um segue
para o HawaiiViewController. Então eu

1269
01:10:44,069 --> 01:10:51,659
vou mudar isso de volta para ser
uma UI genérica, ou uma

1270
01:10:51,679 --> 01:10:53,159
ImageViewController genérica.

1271
01:10:53,179 --> 01:10:56,409
Ok? Eu vou fazer o segue
com CTRL + arrastar

1272
01:10:56,429 --> 01:11:01,570
a partir da cell, a cell de prototype,
para cá. E vai ser do tipo

1273
01:11:01,590 --> 01:11:04,879
push, ok? E então eu vou
colocar esses caras

1274
01:11:04,899 --> 01:11:12,059
dentro de um Navigation Controller.
BAM. Ok? Alguém sabe

1275
01:11:12,079 --> 01:11:16,690
o que mais eu preciso fazer?
Uma coisa? Nenhum voluntário?

1276
01:11:16,710 --> 01:11:17,690
>> [Estudante se voluntariando]


1277
01:11:17,710 --> 01:11:21,659
[Estudante se voluntariando]


1278
01:11:21,679 --> 01:11:22,659


1279
01:11:22,679 --> 01:11:26,249
>> PrepareForSegue! Vencedor!
Sim, nós precisamos nos preparar

1280
01:11:26,269 --> 01:11:29,249
para esse segue. E o modo como nós
preparamos é apenas dizer

1281
01:11:29,269 --> 01:11:32,280
para esse ImageViewController qual imagem
que nós queremos que ela olhe, certo?

1282
01:11:32,300 --> 01:11:39,730
Então, nós voltamos aqui
e implementamos o prepareForSegue,

1283
01:11:39,750 --> 01:11:43,909
aqui está. E isso é realmente
bem direto para implementar.

1284
01:11:43,929 --> 01:11:46,659
Primeiro de tudo, nós vamos
nos certificar que esse sender

1285
01:11:46,679 --> 01:11:49,629
é um TableViewCell. Apenas para
ficarmos bem seguros. Deve sempre ser,

1286
01:11:49,649 --> 01:11:55,509
mas nós queremos nos certificar.
[ditando código]

1287
01:11:55,529 --> 01:12:02,740
Se for, então eu vou pegar
o indexPath dele.

1288
01:12:02,760 --> 01:12:06,940
Dizendo
self.tableView indexPathForCell...

1289
01:12:06,960 --> 01:12:17,019
Ok? Se nós tivermos um
indexPath, então nós

1290
01:12:17,039 --> 01:12:20,079
realmente temos tudo que precisamos
saber para fazer isso.

1291
01:12:20,099 --> 01:12:24,679
E eu vou fazer esse segue
de um modo um pouco diferente do que eu

1292
01:12:24,699 --> 01:12:29,039
fiz na última demo. Na últia demo,
eu sabia a classe dessa coisa

1293
01:12:29,059 --> 01:12:32,940
para qual eu estava segueando.
Eu sabia qual era, então eu sabia

1294
01:12:32,960 --> 01:12:36,190
que métodos eu poderia enviar para ela.
Nessa aqui, eu vou dizer:

1295
01:12:36,210 --> 01:12:44,559
se estamos falando sobre um segue
Show Image, que é o que nós

1296
01:12:44,579 --> 01:12:48,030
vamos setar nesse segue.
Então nós temos

1297
01:12:48,050 --> 01:12:51,089
esse segue bem aqui. Eu vou
inspecioná-lo e chamá-lo de

1298
01:12:51,109 --> 01:12:53,959
segue Show Image.


1299
01:12:53,979 --> 01:13:03,530
Então, se estamos fazendo um
segue Show Image, então,

1300
01:13:03,550 --> 01:13:08,909
se o ViewController de destino do segue
responder para o selector

1301
01:13:08,929 --> 01:13:16,089
setImageURL, então vou enviar
essa mensagem. Ok?

1302
01:13:16,109 --> 01:13:20,769
Aqui eu estou cego para qual é a classe.
Eu só sei que se

1303
01:13:20,789 --> 01:13:24,089
o segue for um segue Show Image,
e se o ViewController de destino

1304
01:13:24,109 --> 01:13:27,209
responder a isso,
eu vou prosseguir e enviar

1305
01:13:27,229 --> 01:13:30,459
essa mensagem para ele. De fato,
isso é tão valioso que eu poderia

1306
01:13:30,479 --> 01:13:34,950
colocá-lo no meu arquivo header
como uma documentação para essa classe.

1307
01:13:34,970 --> 01:13:35,950
[ditando comentário]


1308
01:13:35,970 --> 01:13:41,079
[ditando comentário]


1309
01:13:41,099 --> 01:13:50,240
Ok? Agora, alguém

1310
01:13:50,260 --> 01:13:53,480
que quer ser segueado também,
tudo que eles tem que saber

1311
01:13:53,500 --> 01:13:56,940
é implementar isso.
E isso simplesmente funciona. Ok?

1312
01:13:56,960 --> 01:14:00,919
Então um segue um pouco mais
genérico aqui. Então eu vou dizer,

1313
01:14:00,939 --> 01:14:05,329
segue.destinationViewController
performSelector.

1314
01:14:05,349 --> 01:14:08,650
Isso é uma das coisa de NSObject
que eu falei sobre. 

1315
01:14:08,670 --> 01:14:15,659
[ditando código]
E onde eu vou obter

1316
01:14:15,679 --> 01:14:20,289
essa URL? novamente,
eu vou usar o FlickrFetcher,

1317
01:14:20,309 --> 01:14:25,429
[ditando código]
E qual é a foto?

1318
01:14:25,449 --> 01:14:30,059
é [ditando código]

1319
01:14:30,079 --> 01:14:31,059
Então eu estou

1320
01:14:31,079 --> 01:14:35,839
apenas olhando nosso model,
nessa row. E o formato será

1321
01:14:35,859 --> 01:14:38,469
FlickrPhotoFormatLarge.

1322
01:14:38,489 --> 01:14:41,299
Porque, sabe, nós não queremos
muito grande,

1323
01:14:41,319 --> 01:14:42,299
nós não queremos que

1324
01:14:42,319 --> 01:14:45,299
seja gigantesca, nós estamos em um
iPhone nessa caso, mas se nós

1325
01:14:45,319 --> 01:14:48,299
estivessemos em um iPad,
nós talvez quiséssemos algo gigantesco,

1326
01:14:48,319 --> 01:14:52,259
mas nós não queremos algo muito pequeno também.
E por último, eu também vou setar

1327
01:14:52,279 --> 01:14:57,089
o título do destination do segue. Ok?
Vou setar para ser

1328
01:14:57,109 --> 01:15:00,409
[ditando código]
o mesmo título que estava

1329
01:15:00,429 --> 01:15:01,480
na cell.

1330
01:15:01,500 --> 01:15:04,719
Ok? Então agora nós
preparamos a coisa. Isso tudo deve funcionar.

1331
01:15:04,739 --> 01:15:05,719
Vamos dar uma olhada.

1332
01:15:05,739 --> 01:15:10,589
Novamente, vai no Flickr,
demora um pouco... vamos achar

1333
01:15:10,609 --> 01:15:13,949
alguma coisa que não seja
ofensiva ou algo assim.

1334
01:15:13,969 --> 01:15:17,539
"Apple"? Não sei,
parece um pouco perigoso.

1335
01:15:17,559 --> 01:15:20,490
Que tal "sunset clouds".
Não deve ser ruim. Então é,

1336
01:15:20,510 --> 01:15:23,820
aqui está nuvens no por do sol.
E vocês podem ver que ela foi

1337
01:15:23,840 --> 01:15:26,829
transicionada para a ImageViewController,
a mesma ImageViewController genérica

1338
01:15:26,849 --> 01:15:29,619
que nós tínhamos antes.
Nós ainda temos todas as features que nós

1339
01:15:29,639 --> 01:15:30,619
tínhamos da última vez.

1340
01:15:30,639 --> 01:15:34,179
E nós podemos voltar e escolher
algo diferente como

1341
01:15:34,199 --> 01:15:38,740
"painted bunting".
Olhamos novamente, parece bom. É um pássaro.

1342
01:15:38,760 --> 01:15:43,709
É isso. Essa é a demo de hoje.
Se vocês tiverem

1343
01:15:43,729 --> 01:15:46,879
qualquer pergunta, eu estarei por aqui.
Obrigado.

1344
01:15:46,899 --> 01:15:51,579
Visite o nosso site:
www.centraldosapps.com
